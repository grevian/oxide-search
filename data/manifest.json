{
 "LastUpdated": "Sat, 11 Nov 2023 11:46:00 -0800",
 "Episodes": {
  "0b828375-5b1e-45e1-9d20-17f053d365bf": {
   "Title": "Books in the Box III",
   "Description": "\u003cp\u003eIn an Oxide and Friends tradition, Bryan and Adam invite the community to share book recommendations.\u003c/p\u003e\u003cp\u003eIn addition to \u003ca href=\"https://mastodon.social/@bcantrill\"\u003eBryan Cantrill\u003c/a\u003e and \u003ca href=\"https://mastodon.social/@ahl\"\u003eAdam Leventhal\u003c/a\u003e, speakers on included \u003ca href=\"https://twitter.com/steveklabnik\"\u003eSteve Klabnik\u003c/a\u003e, \u003ca href=\"https://mastodon.social/@aka_pugs\"\u003eTom Lyon\u003c/a\u003e, \u003ca href=\"https://hachyderm.io/@iangrunert\"\u003eIan Grunert\u003c/a\u003e, \u003ca href=\"https://mastodon.online/@resistor\"\u003eOwen Anderson\u003c/a\u003e, phillipov, makowski, and saethlin. (Did we miss your name and/or get it wrong? Drop a PR!)\u003c/p\u003e\u003cp\u003eSome of the topics we hit on, in the order that we hit them:\u003c/p\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://mastodon.social/@elonjet\"\u003eElon Jet\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.goodreads.com/book/show/134605090-high-noon\"\u003eHigh Noon: The Inside Story of Scott McNealy and the Rise of Sun Microsystems by Southwick, Karen\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://press.uchicago.edu/ucp/books/book/chicago/M/bo3614928.html\"\u003eMaking PCR: A Story of Biotechnology by Paul Rabinow\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=_Q851fnC4io\"\u003eSun Labs vs. SunSoft Water Fight 1992\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Cyberville-Clicks-Culture-Creation-Online/dp/044651909X\"\u003eCyberville: Clicks, Culture, and the Creation of an Online Town Hardcover by Stacy Horn\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Built-Fail-Inside-Blockbusters-Inevitable-ebook/dp/B08WT9W6DL\"\u003eBuilt to Fail: The Inside Story of Blockbuster's Inevitable Bust Kindle Edition by Alan Payne\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/History-Silicon-Valley-20th-Century/dp/1686595050/\"\u003eA History of Silicon Valley - Vol 1: The 20th Century Paperback by Piero Scaruffi\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/H-E-B\"\u003eH-E-B\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Moby-Dick-Whale-Herman-Melville/dp/0520043545\"\u003eMoby Dick by Herman Melville (Arion Press)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/gp/product/B08H831J18\"\u003eA Psalm for the Wild-Built by Becky Chambers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Endurance-Shackletons-Incredible-Alfred-Lansing/dp/0465062881\"\u003eEndurance: Shackleton's Incredible Voyage by Alfred Lansing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Into-Raging-Sea-Thirty-Three-Megastorm/dp/0062699709\"\u003eInto the Raging Sea: Thirty-Three Mariners, One Megastorm, and the Sinking of El Faro\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/If-Then-Simulmatics-Corporation-Invented/dp/1631496107\"\u003eIf Then: How the Simulmatics Corporation Invented the Future Hardcover by Jill Lepore\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ethw.org/UNIVAC_and_the_1952_Presidential_Election\"\u003eUNIVAC and the 1952 Presidential Election\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.npr.org/sections/alltechconsidered/2012/10/31/163951263/the-night-a-computer-predicted-the-next-president\"\u003eNPR: The Night A Computer Predicted The Next President\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Doom-Guy-Life-First-Person/dp/141975811X/\"\u003eDoom Guy: Life in First Person by John Romero\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Secret-Ballot-Democracy-Sausage-Compulsory/dp/1925603849/\"\u003eFrom Secret Ballot to Democracy Sausage: How Australia Got Compulsory Voting by Judith Brett\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBryan had a reading list for his wedding?! (his wife confirms)\u003cul\u003e\n\u003cli\u003eThe Fatal Shore by Robert Hughes\u003c/li\u003e\n\u003cli\u003eHarp in the South by Ruth Park\u003c/li\u003e\n\u003cli\u003eCloudstreet by Tim Winton\u003c/li\u003e\n\u003cli\u003eDeath of the Lucky Country by Donald Horne\u003c/li\u003e\n\u003cli\u003e30 Days in Sydney by Peter Carey\u003c/li\u003e\n\u003cli\u003eLeviathan by John Birmingham\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Fatal-Shore-Epic-Australias-Founding/dp/0394753666\"\u003eThe Fatal Shore: The Epic of Australia's Founding by Robert Hughes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Barbarians-Bill-Gates-Jennifer-Edstrom/dp/0805057544\"\u003eBarbarians Led by Bill Gates by Jennifer Edstrom and, Marlin Eller\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://learn.microsoft.com/en-gb/archive/blogs/murrays/saving-windows-from-the-os2-bulldozer\"\u003eMurray Sargent's account of how his Scroll Screen Tracer got Windows to work in protected mode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Startup-Silicon-Adventure-Jerry-Kaplan/dp/0140257314\"\u003eStartup: A Silicon Valley Adventure by Jerry Kaplan\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://microsoft.github.io/devicescript/\"\u003eDeviceScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Washington-Life-Ron-Chernow/dp/0143119966\"\u003eWashington: A Life by Chernow\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/California-Burning-Pacific-Electric-Americas/dp/059333065X\"\u003eCalifornia Burning: The Fall of Pacific Gas and Electric--and What It Means for America's Power Grid\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Command-Control-Damascus-Accident-Illusion/dp/0143125788\"\u003eCommand and Control: Nuclear Weapons, the Damascus Accident, and the Illusion of Safety by Eric Schlosser\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Color-Law-Forgotten-Government-Segregated/dp/1631494538\"\u003eThe Color of Law: A Forgotten History of How Our Government Segregated America by Richard Rothstein\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Acts-Apostles-Mind-over-Matter-ebook/dp/B003NX7MGQ/\"\u003eActs of the Apostles: Mind over Matter: Volume Blue by John F.X. Sundman\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Thunder-Below-Revolutionizes-Submarine-Warfare/dp/0252019253\"\u003eThunder Below!: The USS Barb Revolutionizes Submarine Warfare in World War II by Eugene B. Fluckey\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555\"\u003eThinking, Fast and Slow by Daniel Kahneman\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Man-Who-Solved-Market-Revolution/dp/073521798X/\"\u003eThe Man Who Solved the Market: How Jim Simons Launched the Quant Revolution by Gregory Zuckerman\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Predictors-Maverick-Physicists-Theory-Fortune/dp/0805057579/\"\u003eThe Predictors: How a Band of Maverick Physicists Used Chaos Theory to Trade Their Way to a Fortune on Wall Street by Thomas A. Bass\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Eudaemonic-Pie-Bizarre-Physicists-Computer/dp/1504040694/\"\u003eThe Eudaemonic Pie: The Bizarre True Story of How a Band of Physicists and Computer Wizards Took On Las Vegas by Thomas A Bass\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003cp\u003eSome of the other books mentioned \u003ca href=\"https://discord.com/channels/1042492311080288306/1133177690745208902\"\u003ein the Discord channel\u003c/a\u003e:\u003c/p\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://de.wikipedia.org/wiki/Herr_aller_Dinge\"\u003eHerr aller Dinge/Lord of All Things by Andreas Eschbach\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Debt%3A_The_First_5000_Years\"\u003eDebt: The First 5,000 Years by David Graeber\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/The_Sciences_of_the_Artificial\"\u003eThe Sciences of the Artificial by Herbert A. Simon\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/California-Burning-Pacific-Electric-Americas/dp/059333065X/\"\u003eCalifornia Burning: The Fall of Pacific Gas and Electric--and What It Means for America's Power Grid by Katherine Blunt\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Man-Who-Solved-Market-Revolution/dp/073521798X/\"\u003eThe Man Who Solved the Market: How Jim Simons Launched the Quant Revolution Hardcover by Gregory Zuckerman\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Predictors-Maverick-Physicists-Theory-Fortune/dp/0805057579/\"\u003eThe Predictors: How a Band of Maverick Physicists Used Chaos Theory to Trade Their Way to a Fortune on Wall Street by Thomas A. Bass\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Eudaemonic-Pie-Bizarre-Physicists-Computer/dp/1504040694/\"\u003eThe Eudaemonic Pie: The Bizarre True Story of How a Band of Physicists and Computer Wizards Took On Las Vegas by Thomas A Bass\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Models-Behaving-Badly-Confusing-Illusion-Reality-Disaster/dp/1439164991\"\u003eModels.Behaving.Badly.: Why Confusing Illusion with Reality Can Lead to Disaster, on Wall Street and in Life by Emanuel Derman\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://link.springer.com/book/10.1007/978-0-387-75340-9\"\u003eIt's a Nonlinear World by Richard H. Enns\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003cp\u003eNot technically books, but suggested reading nonetheless by folks in Discord:\u003c/p\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.npr.org/sections/alltechconsidered/2012/10/31/163951263/the-night-a-computer-predicted-the-next-president\"\u003eThe Night A Computer Predicted The Next President by Steve Henn, NPR\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.mathscitech.org/gplus/20180803%20-%20How%20a%20brilliant%20debugger%20%28Scroll%20Screen.html\"\u003eHow a brilliant debugger (Scroll Screen Tracer by Murray Sargent) turned Windows OS into the IBM OS/2 crusher and gave Microsoft its killer product.\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://microsoft.github.io/devicescript/\"\u003eDeviceScript: TypeScript for Tiny IoT Devices\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=ysHUfjSMGWQ\"\u003eBob and Ray | Slow Talkers of America | Audio Recording (YouTube)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Ursula_K._Le_Guin\"\u003eUrsula K. Le Guin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://worksinprogress.co/issue/the-maintenance-race\"\u003eThe Maintenance Race by Stewart Brand\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003cp\u003eIf we got something wrong or missed something, please file a PR! Our next show will likely be on Monday at 5p Pacific Time on our Discord server; stay tuned to our Mastodon feeds for details, or \u003ca href=\"https://sesh.fyi/api/calendar/v2/iMdFbuFRupMwuTiwvXswNU.ics\"\u003esubscribe to this calendar\u003c/a\u003e. We'd love to have you join us, as we always love to hear from new speakers!\u003c/p\u003e",
   "Link": "https://share.transistor.fm/s/acffcb3d",
   "Filename": "0b828375-5b1e-45e1-9d20-17f053d365bf.mp3",
   "GUID": "0b828375-5b1e-45e1-9d20-17f053d365bf",
   "Published": "Mon, 24 Jul 2023 17:00:00 -0700",
   "Transcript": "Hello, Brian. Hey, Adam, how are you? I'm doing good. How are you doing? I'm doing well. You made it. I made it just in the nick of time. There was a moment where, and I was, of course, following your flight in real time. Right, like it's Elon Jet, exactly. Elon Jet, exactly. And I think, well, maybe we need to get going with, if we have to get going without you here, and have you, maybe you're going to be joining in as you're kind of like walking on the concourse or something. So I will need to kick off the recording bot. And I'm just describing this to Steve Klapnick. And I'm like, there's like a wolf named Jeff. Is that right? He's like, I think you mean Greg. And it was Jeff with a G in my, I go, I don't know. Anyway, so I don't feel like I was that close. I think, well, and now that I'm looking at it, what is that? What is the Greg? In your head, you sounded weirder about it than I heard you say to me. It was a very normal question of how do I set on the recording. So what do you think? Like wolf named Jeff with a G, can you hear yourself? I mean, this is okay. What is wolf? You're saying wolf? Like the canid? I'm saying wolf. Okay. Yes, the canid. What is the icon there for our friend, Greg? Oh, oh, oh, got it. I thought, I mean, it's the bear. Yeah. Isn't a bear like a pacifier? Like what's going on with the bear? I don't wanna, you know. It's got a microphone. Microphone. Bro. I agree that at the resolution, it is a little hard to tell exactly what it is. I mean, I'm going with pacifier on that one. Are you certain it's not a pacifier? Could it be a pacifier? All right. Brian, before we get into it, I just wanna make sure, you're not sounding millennial podcast audio quality. Okay. I just want to check. No, this is true. Is it terrible? No, no, it's totally fine. It should be like serviceable, but not millennial podcast quality. It is. It sounds vaguely radio. Like you're like an interlude of a 90s rock song, and you're gonna say like two sentences, and then cut back to the normal. Yeah, no, he's ready to spit, exactly. No, you sound totally serviceable, it sounds like you're not in the litter box, as it were. I am not in the litter box. Yes, I'm not in the litter box, because I felt for this, that I needed to be among my books. I wanted to be- I almost spit on my water. Did you? I just, I'm clothed, by the way. I mean, I realize that- Well, I don't know why you, why would you bring that up? Why would you? Because I, I'm clothed now, I'm clothed now. I put clothes on after I rubbed them all over my body. Look, I, yeah, I'm sorry. No, no, it's great. This is what you're missing out on, by being, you know, an e-book reader. You know, you miss the opportunity to rub your books all over yourself. I'm very excited to talk about a paper book that I'm holding with me right now. Oh boy. Radio sound effects, right there. Radio sound effects. That's not, like the walking across- Drive ball to center field, right. Okay, what is that paper book that I did, that I heard distinctly here on Radio Time Hour? Yes. Yeah, so this is our time-honored, I guess, tradition of talking about books for reading. And as a stage dive, it's gonna be very important for people to raise their hand to talk about the books that they're reading. But a book that I'm reading, actually, I just finished it on the airplane. I was coming back from Grandmasters Nationals, where we finished a ignominious seventh. And I finished on the plane. A book that someone DM'd or tweeted at us, Brian. And I don't think you noticed it. Yeah. Okay, yeah. And I was sort of, I was gonna present this to you at some point, and I guess this is the point. But there is a book about Sun and about McNeely, written in about 1999, 1998, 99. Yeah. I haven't read it. I've seen it. I know, I can visualize the cover. What's it called? It is called- Well, I'm gonna give you one guess, because the title is eerily, and I think accidentally prophetic, and it's playing on Sun. Yeah, and it's not Java Man. No. No. I do not remember the title. What is the title? It is High Noon. High Noon. High Noon by Karen Southwick. Okay. It was pretty good. It was a pretty good chronicle, about 99. But you said 99, so you said that. And that's why I feel like High Noon was so appropriate of a title, because they can't have known that it was about to be, I mean, dusk and then midnight. But yeah, talking about from the start of Sun to accidentally its peak at High Noon. Yes. And like, not tons and tons of technical details, but good stuff about Gosling and Joy and John Gage and stuff about the founder squabbles early on. And it was not too long, pretty good. And certainly for someone who came in right after that, I'm kicking myself that I didn't read this 25 years ago or whatever. But really, I think they captured a lot of the management zeitgeist, this kind of teetering between chaos and organization. I captured that pretty faithfully. Yeah, interesting. I feel that the Sun is to blame, not for the most mendacious of Google's management, but for the most incompetent. You know what I mean? Like the incompetent streak in Google's management, I think you can chalk up to Sun, in that Sun did believe, incompetent is a little too strong, but hands off, for sure. Yeah. In ways that were positive, often. I mean, and I only came in after the end of the planets, but I guess there was this management paradigm. Right, there you go. I know you were right in the middle of it. I was right in the middle of it. Basically, I think the idea was sort of to let independent organizations be independent and entrepreneurial. But the end effect was that a customer ostensibly buying from Sun was talking to like five different organizations that mutually hated each other. Or were trying to resell each other's stuff with a markup. Is planet the metaphor you want to go for here? You know what I mean? It's just like, does this make sense? It's like in our solar system, only one planet is habitable. It's only one of the- Which is Earth, right. Right, which one of these is Earth? Like, which is Venus? Which is Mercury? The planets have nothing to do with one another. You can't get from one of the planets to the other. It's like, really? Like, can't we? I bet we could come up with a better metaphor. In fact, I'm not sure we can come up with a worse metaphor. The planets were the different divisions inside of Sun. So we were at Sunsoft, which for those folks that are kind of longtime Sun watchers, you can blame the planet model for the fact that the compilers are no longer free. That was Sunsoft trying to monetize the compilers because Sunsoft needed to monetize itself. And it needed to treat Sun Microsystems Computer Corporation, SMCC, like just another customer. Which was not, it was bad. So you had SMCC and you had Javasoft, and then you had- Sunsoft, yeah. Sunsoft, SparkMic Electronics, and then it got weird. Then they started these new planets. I mean, it was like Pluto. Like, you had these things that are like, oh, this is no longer a planet. This is now just like a celestial object now. And it was a mess. The whole thing was a big, big mess. But I learned about this thing, News, like a predecessor to X-Windows. News, yeah, absolutely. That I knew nothing about. So it was- Really? Yeah, that's like Gosling's first, that's like the- Yeah, it was a big deal. No, for sure. For sure, it was a big deal. And I think Sun really tried to make it a thing and it didn't go. And I think that then when Java kind of rolled around, they were like, let's not do News again. And it sort of almost directly spawned out of the failure of News. The folks involved were, one of the key folks in Java was about to leave to go to Next, had signed an offer and got yanked back by Scott McNeely. Actually, they were on the same pickup hockey team and Scott kind of pulled him back. So anyway, a bunch of interesting anecdotes for the Sun lovers on the call. Yeah, that sounds great. And I can see, I know Tom is here. We can get, I'm not sure if Tom is red hot or not. But- Yeah, and Tom, there's definitely an anecdote about you in there, Tom, about some pranks that you pulled. So I'm sure you've seen it, but it was pretty fun. This is the, we've got an Oxide and Friends regular contributor that's in High Noon. This is, boy, gotta talk about bearing the lead there. That's exciting. The Tom Lyon anecdote alone. Yeah, exactly. On the subject of Tom, I, a book that Tom had recommended, I think the first time, so we should actually set the context a little bit. We did this originally almost three years ago, September of 2021. Sorry, that'd be almost two years ago. And then we did another one of these in June of last year. And it turned out to be really interesting and there were a lot of really good recommendations. Tom, in particular, had made the recommendation of what the Dormouse said by John Markoff. And I had kind of been meaning to read that, Tom, and I finally got around to it. I was really good, I really enjoyed it. Yeah, that was a great one. So thank you for that recommendation, Tom. Really appreciate it. You're welcome. Yeah, I didn't realize I was in High Noon. I read it a long time ago, but I don't remember. Tom, I mean, you're always been famous to us, but this is, you know, you're book famous, great. And so, and then Tom, you had, and I still, sadly, The Making of the Microchip is still where it was a year ago. So namely on my bookshelf where I look at it, it's- Daunting volume. It's daunting. Have you made any progress on it? No, I just got through another book called A History of Silicon Valley by Piero Scarufi. And it's a terrible book in that there's no plot or story or anything, but it's just knee deep in facts and figures. And it's fascinating. It covers not just the computer side of things, but also biotech and military and cultural stuff. So it's pretty interesting. You know, and I feel like the biotech side of Silicon Valley is way too often forgotten. That there's a, I mean, this is also, I mean, Boston, I think is rightfully thought of as kind of the historical epicenter of biotech, but San Francisco would be certainly in the running there with, I mean, this is where obviously PCR was invented here. It's a great book, actually. Have you read the book on PCR? There's a great book on PCR. I haven't read it years ago. You read this? I don't know. Yeah. Was it about the chemist who's really into drugs and stuff? Yeah, it was the chemist who's really into drugs. That's the one. I'll go take that one up because that was actually a great read and a good reminder of the kind of this area's role in, but that sounds good. So not well-structured, but worth reading nonetheless, it sounds like. Yeah, yeah. It's a great place to dive in and then go Google about the stuff he's talking about. He also has no references, which is a drag. So it's not, it's a very strange book, but just thick with details. The book that I was thinking of, by the way, is Making PCR, a Story of Biotechnology, 2011, which was a really interesting history of PCR. You were talking about the planets earlier. Yeah. I should note that today is the anniversary of the water war between Sun Labs and SunSoft. Oh, okay. Were you around for the program? I was not, but this is definitely handed down to me as oral tradition. So I would be very curious to fact check it. No, this predates me. But so could you describe? Yeah. I posted a link that has the raw footage, but it was this amazing war that was prepared for for several weeks on both sides and included helicopter support and God knows what else. And this is Sun Labs. All kinds of trebuchets and yeah. So it was basically between the Sun Labs building and the next building over, which was one of the SunSoft buildings and the little pond in between and people marching back and forth and flinging water balloons. And I actually didn't see it either. It was, I was traveling for some reason, but. Can I describe how this was handed down to me as kind of a legend was, and again, I'm very curious how accurate this is or was. Oh, Ben Stoltz is there. Ben can weigh in as well. But so the way this was handed down to me is that it was Sun, it was labs versus the operating system group versus SunSoft. And over at labs, you had these ridiculously ornate contraptions and a trebuchet that never quite worked correctly. And meanwhile, over at SunSoft, they had just had the old surgical tube slingshot and they were just doing enormous damage with just this like very simple slingshot that kind of a three or four person slingshot. And they are just like absolutely launching water balloons with deadly accuracy. And of course, this is the triumph of the pragmatic guerrilla movement over the kind of the fancy labs trebuchet is the way that was. Is that at all? Is there any reality to that at all? I don't recall who won or whatever. It was just a total melee. And at the time we had a Russian au pair living with us who was taking care of our kids and she was dating a guy in Sun Labs. And so she saw it and came back and reported it as like the most completely fucking insane thing she had ever seen. It's still the stuff of legend. And that was how many years ago tonight that was, you said? 1992, so. 1992, okay, so when I showed up in 96, but it was definitely legendary by the time I showed up. The other great story I heard was that the Sun Labs guys got wind of Sunsoft hiring a helicopter. And so they got out their radio gear and they jammed all the frequencies so they couldn't coordinate with the helicopter. Wow, wow. I guess we're looking at a pretty high tech. Also, I think motion's running pretty high. It's kind of. When you're calling it an airstrike? Yeah, I think so. When you're calling it a literal airstrike, exactly. It's like, no, we're gonna jam their communications. Is that civil aviation, is this legal? I mean, where are we? Some sort of counterinsurgency? What is going on? Have we drifted into domestic terrorism here? Yeah, I don't think any of that was legal. That's pretty great. Well, another book that I, actually, so as long as Ian, you're here, because you made a recommendation that I also read that I loved, which was Cyberville by Stacey Horn about the history of Echo. And Ian, I was wondering if you'd, did you actually read that? I know you'd recommended it. I think you'd started to read it last year. Yeah, I read it after I recommended it. Right. What did you think? I thought it was really interesting. I thought it was interesting because, so this is a well-like social network. This is like New York's equivalent of the well. This is Echo. And I thought it was really interesting because I thought there was so much foreshadowing for what later happened to the internet and social networking where we saw this real dark side. Ian, what did you think? Yeah, I think there was a lot of lessons learned that got relearned about five to 10 years later. And we could have avoided a lot of pain if more people had read this book that were involved in the next wave of social networks. And Elon Musk, not too late. You could still figure out how social networking works. The, you could, I feel like there's a lot of actually currency in there still today. So that was a great recommendation. And you, I'd also read, although I'd done this a year ago, but the book on Blockbuster, which was absolutely terrific. And why is that title escaping me? I don't have it in front of me. It's not too big to fail. What is it? The Blockbuster book. Yes. I can't remember either. Yeah, yeah. That was another terrific book. This was built to fail? Built to fail, exactly. Not too big to fail. Very much not too big to fail. Yes, built to fail, which is a great book about, and that's where I learned, is it HMB, Steve, is that the grocery store in Texas? Am I remembering that right? No. What's the grocery store? You said H-E-B. H-E-B, H-E-B. Yeah, which was really extraordinary to learn about. And they're kind of, their execution, it sounds like they are every bit as good as this book made them out to be. It sounds like they're really an interesting grocery store. So the other book that I, I just took a very long time to get through, like on the order of many weeks, not months, to get through a book that I would highly recommend. A little book that no one's heard of called Moby Dick. I read Moby Dick, Adam, and, have you read Moby Dick? No, never read Moby Dick since you threatened to have this show exclusively on Moby Dick. I wanted to dedicate this show to Moby Dick. That's right. I only got as far as downloading it onto my Kindle, but it's, that's as far as I got. Well, to which your response was, are you concerned that we have too many listeners? Yes, well, you know, the best audience for my jokes is me, separated by a small amount of time. So, okay, so we do not, we will not dedicate the entire show to Moby Dick, but Moby Dick is extraordinary. It's really, really good. I think it's, it's really outstanding. It is, it's well-written. It's got, there's so much in there thematically. So the reason I do, I know I'm now answering the question No one's asked, but do you know how I got to Moby Dick? I, yeah, exactly. Do I have a choice? Doesn't feel like a very important question. Let's get it out, yeah. So when we were, and I was actually, I'm curious if you heard me use whaling as a metaphor. I would use whaling as a metaphor. Yes, yes, yes, absolutely. And in particular around hard tech investing, I think. Yes, that's right. That hard tech investing is that you're going whaling. And in particular, there was one VC firm in particular that was really a poor fit that should not be investing in hard tech because they haven't done any. All they've done is software. And I was telling them, it's like, you need to fish from the pier, we're going whaling. Which I intended to like tell them why they are not a fit. Unfortunately, it made them desire oxide or they thought they desired oxide a lot more. They thought I was like, this isn't a negotiation tactic. I'm telling you like, there's a lot that's like not great about whaling. But this idea that like, you're on this, because I think it's amazing that you'd go on this multi-year journey. And, but I was, at the back of my head, I'm like, am I like, how over my skis am I on this one? I don't actually know that much about whaling. And I was talking to a friend of mine who is super into whaling. And I was asking her, like, what would be the book to read on whaling? She's like, the book to read on whaling is Moby Dick. Like that is the book to read on whaling. And she's like, I got the edition for you. So you want to get the Aryan Press edition. This was a like a handcrafted edition of which they only made two or three copies, but you can now buy a reproduction of this for like, you know, whatever, 10 bucks. And it's amazing. So like they have a, they developed their own, it's all the hand press custom font and everything. So the edition is amazing, but the book is just incredible. And there's a lot you can say about Moby Dick, but I feel like there's, in all the analyses I've read, there's one piece that was missing, namely Herman Melville is super, super into whaling. That's just a very important detail. Like this guy is really into whaling. And you just learn a lot, I think about, and I would say that like, I come away with having more conviction than ever that this is actually a good metaphor for a startup because you are going whaling. You're going on this multi-year journey. You are kind of getting your crew, you're getting together, and then you're taking this extraordinary risk, although not to life or limb, but to go to venture out. And in a whaling ship, the crew actually has a slice of the profits called the lay in a whaling ship. And perhaps like a startup, they tend to not be worth very much. That's the one thing they prefer to like. So, you know, you kind of chase that metaphor as much as you want, but a really good book. I think it's a really good book. And I think it's like funny. I laughed out loud a bunch. I also think it's an absolute waste to inflict this on anyone who is like certainly younger than 30. I would say younger than 40. Like certainly no high school student should need to read Moby Dick because like you're a child. You'd like, this book has nothing for you. Like you don't actually, the deep resonance of this book, you're not going to have until you have a lot more life experience. This is what I have to say. Education's wasted on the young. Can we, can you share what you shared about Moby with me? Oh, that Moby, the artist. Yes. Is the, yeah, this is like, you know, when you, this is the other reason to read Moby Dick. It's like you get into the Moby Dick club and now there are all these Moby Dick references that you get. Oh, by the way, okay. You, one thing I am not doing, by the way, I am not spoiling the ending for you. And some, there is like, we socially, we just don't seem like, there's this idea that like, I don't know, it's written in the 19th century. Anyone can spoil the ending for anyone else. And I was like, come on. There's no, and so I was watching and you feel like, I mean, like nothing is safe. You know, I was watching Major League with my 16 year old because we view it as a documentary about the Oakland A's. We'll leave that aside. But so we're watching Major League, a movie made in the 80s that has a very explicit Moby Dick spoiler in it. And in particular, there's like, cause I mean, I know the love story in Major League. What do you mean you don't recall the love story in Major League, Adam? There's a love story in Major League. And the, in particular, he, the catcher needs to prove his love. Yeah, Crash Davis, you're right. Isn't Crash Davis? Oh no, no, I've got Bull Durham. I'm sorry. That's Bull Durham, pardon me. Also a great book, or also a great movie. But the, no, the, but the catcher needs to prove his love by reading Moby Dick. And she asks him an extremely specific question about the ending while I'm reading Moby Dick. I'm like, Jesus Christ, you literally just ruined the actual ending for me. Anyway, I'm not ruining anything. I'm not going to, like, I think people like casually, like this is an ending that I feel is famously spoiled and I'm not going to spoil it. So that's what I'm going to say. And this is an important pro tip along with read Moby Dick, which is don't also watch Major League. So hold off for a few months on watching Major League. It's really, I don't know how many people have been reading Moby Dick, being on the edge of their seat reading Moby Dick while they're watching Major League, but I'm just saying it happened to me. It's really a pretty small, a small club. It feels like a small club. It feels like a small club and I'm in it and I'm going to, I'm writing a letter right now to the producers of Major League. Dear sir or madam, I trust this letter finds you well. The, but you're asking about, so Moby the artist is the great, great nephew of Herman Melville. So change is like his name to Moby, that's kind of cool. Yeah, or at least according to his Wikipedia page, claims to be, but that's good enough for me. I trust Moby. And there were a bunch of Simpsons references in Moby Dick. I know that it may be fair to say there are a bunch of Moby Dick references in the Simpsons, but it felt like. That's right. For me, the Simpsons is canon and Moby Dick is terrific. Moby Dick is just like, wow, how they, how did they crib the Simpsons? You know, 140 years beforehand, but from hell's heart, I stab at the Springfield. Anyway, really good book. And it takes a while to get through because it is so dense to do the super into whales. And there's like Googling all the time because I just felt like there's so much stuff that I'm like, what even is this? And also, although you may, it's like where, there are things that like I've never heard of. And I would like brought up by Bridget. I'm like, have you ever heard of like ambergris? She'd be like, yeah, of course. Like, yeah, the ambergris, absolutely. And then it's kind of rattles off a bunch of things about ambergris. Do you think about ambergris, Adam? Isn't that like made from whale blubber? Jesus, am I the only one that doesn't like, okay. But Bridget and I were both raised, you were raised in coastal cities, you know, so maybe that, that's it. Yes, on the, yeah, do you, is there some mandatory whaling class in the Connecticut curriculum? Maybe that would actually. Well, there used to be. There used to be, when they got rid of the Hartford whalers, they also got rid of the mandatory coastal whaling. Oh, too soon. Fair enough. But now I'm like, I really want to go to New Bedford. Like I, this is like a gateway drug. I'm getting super into whaling. So that really highly recommended, great, great book. And I think that there's also a bunch of people that I've read because I, you know, I threw this out there on the internet. A bunch of people were like, yeah, this is a great book. It's like the best ever. This actually prompted me to read another book that I absolutely raced through, that I could not put down on endurance, on Shackleton's. Do you, what do you know about Shackleton? Or not Shackleton? Zero. Even though you've mentioned Shackleton to me within the last few weeks, I feel like I've already dropped back to zero. So I was like Shackleton, I don't know, Antarctica, stranded, like made it back. That's kind of what I knew about Shackleton. Didn't really know much detail. Alfred Lansing wrote this book in like the fifties, like 1957 or something like this on Shackleton. Amazing. This story is crazy. I mean, it is, it's got to be the best survival story ever because, and I, this, I don't feel this is a spoiler because this is like something I feel is well-known about Shackleton. They all survive. And they survive like despite the absolute longest odds. In this book, Endurance, I was just a page ripper and I would, I wish my kids were, I would read it aloud. This might be a read aloud to a younger kid, to Joshua. Maybe it is. I mean, okay, it looks like it's not that long. It looks like that's like a month or whatever. Yeah, cool. And I think that it would be like, I almost, I wish my kids were a bit younger. I'd read it aloud to them. I think it's that good. So that's what I'm going to say. Nice. I think I'm done. I just had to get the, I had to get the nautical books right out of my system. And I feel that we, we, we basically did a good job. So I'm sorry. I'm done now with that particular theme. So can I pile onto the nautical theme? Go pile onto the nautical theme. Yes, please. Okay, I posted this one for you on Mastodon, but I actually managed to make it to the call today despite not thinking I would. I hope my audio quality is okay. It is good. Aren't you at sea right now? Yes, I am literally at sea off the coast of Baja, but Starlink is holding up right now, so. That's amazing. It's a brave new world, but I apologize for engine noise. Yeah, so I wanted to recommend Into the Raging Sea by Rachel Slade. And it is a work of an investigative journalism about the sinking of the USS El Faro in 2015, which was the first loss of a US merchant marine vessel since like the early 80s or something like that. And it is both haunting because it pulls heavily from the recovered black box recordings from the voyage of the ship, including I believe all the dialogue from the last chapter is taken verbatim from the black box. But also fascinating in the investigation of both the improximate and the systemic issues that resulted in this ship being lost and 33 people being lost at sea. The cultural factors in the merchant marine, the great sexism and classism, racism, the economic factors that cause shipping companies to be pushed to run leader and leader and cut corners everywhere we can. The technological factors in terms of like people relying on systems that present pretty pictures over systems that are actually more accurate. And yeah, it's fascinating and heartbreaking and I recommend it to everybody. Yeah, this book looks great. I'd never heard of it until your recommendation on Mastodon yesterday, and this looks really terrific. So yeah, I'm not done with my nautical theme. I think this is gonna be the next one I add to it, but it really looks like a terrific book. So I look forward to your review next year. Yeah, and do you read maritime disaster books while at sea? I mean, I definitely admire that. Sometimes, I find it's a really good way to build time. There was a while, maybe about 10 years ago where I read the Wikipedia index of shipwrecks by year, which is really actually shockingly interesting. You also learn that all these merchant marine ships, like they never die. Like they're built for one company for a purpose, but then they just sell it on to somebody else. So all these ships are floating around like 80 years old or something, right? With long, complicated histories. Yeah, I definitely, I mean, that's a deep Wikipedia black hole. Did you find the root cause of the HMS Comfort, by the way? This is something that has bothered me. Do you, did you do this? I don't get familiar with that. This is the container ship that broke in the two, and then what happened? What happened, like burst into fire? And I wanted to, like, does a ship, and this is like the bow was separated from the stern. Like literally the ship cracks in the two. These are two wholly separate parts. And the bow portion of this container vessel bursts into flames. And I'm like, look, I'm not a maritime engineer, but does that seem normal to everybody? Like, does that seem, is that, would you expect fire? And I could not get the, I mean, like the final accident report or whatever, and no one seems to care. No one died. So it's like, there's like, whatever. It's a massive loss of property. Speaking as someone on a boat right now, like fire is one of the most dangerous things that can happen to you on a boat, which is counterintuitive. But if you think about it, like there's nowhere to go if there's a fire. Yeah, one of my favorite, like, you know, you get one of these little like Discovery Channel documentaries, the fire at sea documentary is just like absolutely terrifying. Yeah, fires are very, very bad news. Yeah. If you want another Wikipedia black hole on a nautical thing to go down and look up the Halifax explosion, which was a cargo ship loaded with TNT during the First World War that exploded in Halifax Harbor and took a large portion of the city with it. Boy, and it didn't start a war. It wasn't used as a cause for America to go. I'm sorry, I'm amazed that the U.S. didn't use that as a cause to invade another country. That way those things generally rolled at that time. No, no, but when newspapers were writing about the first atomic bomb, they compared it to the Halifax explosion. Wow. Wow. Yeah, that is a, okay. Yeah, that is a good Wikipedia black hole. That's great. Good stuff. Yeah, that's a great recommendation. You're welcome. Thank you. Yeah, Ian, do you have some good recommendations for us? Yeah, right now I'm reading, If Then, How the Simulmatics Corporation Invented the Future, which I don't know if you, which is by Jill Lepore. I don't know if you've seen this one or heard of it. No, no, tell me about it. It's about this corporation that lasts for about 11 years. It's founded in 1959 and it closes its doors in 1970. And they are doing very early work on voter data collection and kind of application of computers to social sciences to try and predict how voters will behave in an election. So they're looking at the, I think, 64 election was the first one that they really came into to view on the JFK campaign. And yeah, it seemed like a pretty high profile flame out where it kind of burnt bright and not for very long and has some pretty interesting ties to the politics that were happening in that kind of 10 year period as well as just like computing in the Northeast where some of the work was done out of MIT and on the early time-sharing systems that were in MIT and the invention of email or like early days of email were in that same, like kind of tied in with this. Yeah, pretty interesting. So far I'm about, I don't know, two thirds of the way through at the moment. Yeah, this looks really good. And does this go, what was the election in which UNIVAC was able to, am I remembering this correctly? And maybe did they talk about this in the book where UNIVAC was used to predict, was it the 1960 election? Yeah, exactly. I'm not sure I remember the details of that. And I think that they talk a bit about how computers make their way into the newsrooms of the TV stations at the time and start predicting results based on early returns. And then this kind of part that I'm kind of up to is the New York Times enter into a contract with this corporation with Simulmatics to be able to do some similar sorts of reporting and they get some IBM mainframes installed and hilarity ensues where they were not as competent as they seem to indicate early on to the New York Times. So yeah, pretty interesting stuff and some kind of US history that I'm not super well versed in. Yeah, that's really interesting. It was 1952, there's a couple of people pointing out in the chat. There was the 1952 election that, but this looks great. Ian, how do you find what to read? I just feel like you've had so many great recommendations for us that I've just never heard of before. Like, how do you get the next thing to read? Ian, are you seeing other podcasts? Is that what's going on? Exactly, I mean, when we said that we were in an open relationship, we really didn't expect that you'd be going to other podcasts. I don't know, this is... I think this one may have been an Amazon recommendation going down the deep black hole, which is like similar items and you're clicking through a few times before you find something that's like actually good. I did end up picking this book up in person in Portland when I went to the Palo Alto in Portland. Palo Alto, yeah. And it has some good stuff there. Yeah, I've never actually been physically to Powell's. I've bought books from them online, but was it great? Was it as good as I imagined? I imagine it's a huge bookstore, right? It's massive, it's absolutely massive. And there is a wall, which is like historical business fiction, which I spent a good, I don't know, 30 minutes poring over all the titles and managed to restrain myself to buying only a couple of books because it was- Did you say historical business fiction? Yeah, yeah. So like historical fiction, but based on- The kinds of stuff that we've been talking about on this podcast is like, you know. But nonfiction, right? Nonfiction, sorry, yeah, yeah. Nonfiction, okay, that makes more sense. I was like, that's a really- I was gonna be very excited for this genre, yeah. Like, that's a small demographic. Alternative histories, yeah, that could be a fun one. Right, what if Sun had bought Apple? Yeah, and it's like, it's right next to the business erotica section. Did you see that? Like, that gets even weirder by the way. I thought we weren't gonna talk about that one. That's right. That sounds, yeah, I mean, I love that. That sounds great. And so that you got If Then there. If Then, not the best title. That's a little bit of a rough title, but I bought a copy. So Ian, you could recommend pretty much anything. I think I would, you got a very high hit rate. I've really enjoyed your recommendations. Speaking of which, do you have any others? Yeah, I've got a couple others for today. I would note that I haven't read this one because it just got released, but John Romero just released his autobiography, Doomed by a Lightning First Person. Is that already out? I thought that's coming out. Oh, is it out like this week? Yeah, it came out like, I don't know, on the 18th, so less than a week ago. And Masters of Doom, I have not read. That's definitely on the queue. You've read Masters of Doom, right? I mean, you've really enjoyed it, I think. Yeah, you know, and I've been waiting for Romero's rebuttal for a while now. Yeah, Masters of Doom is definitely an excellent read and I would recommend that as well. Yeah, very fun, especially for folks who kind of grew up on Doom and that genre and that kind of era of computing and video games. Well, that's not in 3D. Yeah, exactly. Yeah, I'm really very much looking forward to hearing what Romero has to say just because he's not portrayed in the most flattering way. Yeah, this looks good. And so this is just out now. Ian, have you read this or have you got this on the way, I guess? Yeah, I downloaded it to my Kindle but not read it, so it's in the same state as Moby Dick for Adam, I guess. Yeah, I feel like your likelihood of reading Doomguy is higher than Adam's of reading Moby Dick. Adam, am I disparaging you? I'm sorry. No, that's fair. And then I've got one more for today. This one is called From Secret Ballot to Democracy Sausage, How Australia Got Compulsory Voting. Oh, that's interesting. So this is not in the usual set of things that we talk about in this podcast, but it is about how the voting system in Australia changed over time to be able to evolve to get both compulsory voting, but also it talks about the women's suffrage movement in Australia. And the two are kind of tied together in many ways. And yeah, it's pretty fascinating stuff, particularly like looking at how the voting system the US system and the Australia system are both kind of reactions to the problems at the point in time that they split off from the UK system. And that, you know, both of them are kind of reactions to the problems that they saw at the time. And from that framing is kind of interesting. That looks really interesting. And Ian, have you read The Fatal Shore? No, I haven't. Oh, The Fatal Shore is so good. This is by Robert Hughes, outstanding book on the history of Australia. I have tried to get more or less every Australian I know to read it, but no Australian I know has read it. And Adam, do you recall this is on the book list for our wedding? Do you remember this? I don't remember your wedding having a book list, so that's on me. I feel like you are like most of our wedding goers in that you, I kind of faded out by page three of that letter you sent. So yeah, I don't know. There's a book list at the end of it, I definitely missed it. I had the, okay, like perhaps ill-advised idea that like we had a bunch of Americans going to Australia for our wedding and wanted to, it's easy for Americans to not appreciate that Australia is a different country with a very, very different history. So I, and the history is super important. I mean, like it is everywhere. And so, yeah, we put together a reading list that again, don't worry, no one else paid attention to either, but The Fatal Shore was first among them because The Fatal Shore is a really, really good book. And Ian, this looks great. The secret- Brian? Yeah. Brian, I read The Fatal Shore too. My favorite part of that was the story about the guy who escapes from Australia and joins some ship and ends up going all the way around the Pacific, up through Japan and back to North America and down somewhere. And then they recapture him and take him back to Australia. Yeah, absolutely. Because the system of transportation, which is Australia being used, and it, which is super complicated and you have a lot of people that are being transported that don't deserve it. And then you've got a set of people who'd be transported who really do deserve it as it turns out. And the, Adam, a bunch of them actually, there's a group that escaped, came to San Francisco and started burning down San Francisco. So there's a- Hey, they don't like that here, right? The, I believe it was the Sydney Coves or the Sydney Ducks, some gang that had what I felt at the time was not a very menacing gang name. I don't know. I feel like, but yeah, Tom, I loved The Fatal Shore. I thought that was a great book. Yeah, it was a long time ago for me, so I don't remember too much. If you're going to Australia, if you're going to Australia and you would like our reading list, you could be the first person to read the books on it. Or even read the reading list. I mean, I should have quizzed people on just the contents of the reading list. I'm not even asking you to read the books. You know how I know that I forgot about the reading list is because I didn't bring it up in every conversation when I've ever introduced you to anyone. This is the guy who had a reading list for his wedding is what I would have started every sentence with. So you're saying really it is a blessing that people did not make it to that final page. It's true. You know, no one has actually given me grief about the reading list or indeed said anything about the reading list. So maybe, yeah, maybe everyone just like faded out. Maybe no one even got there. Maybe no one even read the reading list. You know what, it's his day. We should be kind, right? It's his day. Right, I guess the other possibility is that everyone's like, oh, wait a minute, is this reading list guy? Yeah, yeah, that's reading list guy. Yeah, he's like, he's not going on Moby Dick. And I thought I was stranded on a wayward. I thought I was, yeah. All right, look, something's gonna change. Yeah, those are great. I think there's now multiple people asking for the reading list to be posted. So make sure that that makes it to the show notes at the very least. Oh, by Australia reading list. All right, I will. You know what? I will. Thank you, internet. Someone wants my reading list. And I will. Oh, this is where like the grand reveal is, because Bridget's like, I destroyed every copy of that thing that way. Like I mirrored you despite the reading list, like not the, so off you go. No, no, no, you sent it to me. I just didn't send it out to anyone. But I gave you the reading list to send to the guests. And like, yes, and I know, and I told you I did it because I know what's best for you. Our whole relationship is founded on a lie. Founded on a lie of the reading list that was never sent. That included actually a bunch of great books. Peter Carey book, which is terrific. Leviathan, a bunch of good stuff. Book on the dismissal, which is like something I have an extremely hard book to find, but the dismissals when the governor general actually dismissed parliament in Australia. All sorts of interesting things about Australia that you could learn if you read the reading list. I think I speak for the entire internet when I say I can't wait. I can't wait, exactly. I can't wait to make fun of you for this. Yes, please, post it on the internet. It's like, they tell you Alexander's made a podcast and he won't share it with me, even though he's like, it's genius, but no. And he's like, but Tobin, his older brother, is super into it. He wants me to send him like every episode. I'm like, are you certain that he's not making fun of you for it? Like, are you certain he's not wanting you to send him this podcast to mock you mercilessly? Yeah, they've said John that one, right? Yeah, Ian, those are great recommendations. I thank you very much. Any others? Did we get the three cats? I think that's about it. Yeah, I would plus one on Tom's recommendation of Psalm for the Wild Bill, the first in the monk and robot series. It's a library, but it's fun. And- And where was that dropped in the chat? Where's that? Yeah, Tom dropped it in the chat. It's by Becky Chambers. Yeah, it's a good read. It's about a tea brewing monk and his adventures with a wild built robot. All right, yeah, I need to, this is, I assume, science fiction, which I keep trying to find the right entree into them. I'm just not a science fiction person, but it's not a point of principle. All right, is that Philbo V? Do you have some- Yes, let's see if I can get all the way through this without crashing, but like mentally, because I have to load the entire content, at least some interesting context from this book into my brain between my work day and now. I'm gonna be talking about the barbarians led by Bill Gates, which- Oh, yeah. That's a pretty, that seems like a pretty tortured pun on barbarians at the gates, which I'm sure came up as a phrase. I'm not sure if on the side of Microsoft or on the side of the DOJ in the early Microsoft days, like 80s, 90s early, I mean. Boy, is it a pun on the barbarians at the gate book about RJ, which is a terrific book, by the way, about RJ Artibisco and private equity. Anyway. You're already going far deeper than I have, because I mean, look, I've been, as far as, I'm kind of going on a Microsoft history binge. I kind of have to. Okay. And this, okay, like Overdrive, Showstopper, they've all been, hey, Showstopper, they've all been podcasted to death. So I can just listen my way through those instead of having to read my way through those. But this one's kind of niche. I found it for like six bucks at a half price books and in Redmond, in Redmond, obviously, because where else do you get niche Microsoft titles? And it's like a loose collection of stories. It all put together with the objective of, okay, back in the day when the DOJ was clamping down on Microsoft, this book was written as a weird like reverse hit piece where they're like, okay, everybody's gonna think that Microsoft, you know, Bill Gates and everybody, they're so Machiavellian, they're so evil. They always have everything calculated. This book was like, wait, wait, wait, wait, wait, wait, they're all idiots. And they were all just barely getting by. They had no plan. They're all mad, all no plan over there. So we're just gonna write about all the dysfunction in there and hopefully this proves that Microsoft is defensible against the DOJ just because they weren't planning to be this evil. It just happened that way, right? Very, very funny premise for a book. And I thought that the, there is so much, I mean, it's not like the stories are all in one cohesive order and there's one big payoff. Like I think they jump across time a little bit, but one interesting one I think that you'll like in the Cantrillaverse is that, and you in particular, the reason, so DOS robbed you of your childhood, right? No memory protection. They had memory protection on those CPUs, right? But they never used it, right? That's correct. Okay, so you know why they, how they finally got memory protection into Windows 3.0? Of course, it seems like from this book, Microsoft was still so completely unsure of what their strategy was for the next operating system while dealing with IBM, right? Are we going to deal with IBM Top View? What's their strategy for OS2? The history of these operating systems and how they're going to deal with each other, it's a lot less clear cut than I thought it was. I'm Gen Z, so I have no perspective on this. Okay, they found a professor who had written a debugger, a scroll screen trace debugger, and they took interest in this debugger. They brought him on, this guy named Sargent, and he started working with his debugger. I don't know if he, let's see. It was his, yeah, I guess he kept using that debugger. He just debugged his way through a prototype of Windows 3.0 that could take all the programs that were never designed to run in protected mode and run in protected mode. So he used a debugger, your favorite thing, to get through non-protected mode, your least favorite thing. That's pretty funny. I wonder, what was the name of the debugger? The one that he was recognized for was SST, the scroll screen tracer debugger. Again, I had like five minutes to scroll through. I think he kept using that debugger to find and squash all the bugs. And at that point, it's another Windows story. It's like the IBM PC, right? If they knew how big of a deal this was gonna be, they would have just put a ton of people on it and it would have fallen over. But they got this professor in. He sneakily made this memory protection, protected memory prototype. And just because he was able to get it in under the radar meant that, oh, finally, we can now present it to management and be like, here's our case to go forth. So do I infer correctly, do you work for Microsoft? I assume you work for Microsoft. I do. I was praying that I do not get pinged on call while telling this story. And so for you, is the evil Microsoft, is that like, I mean, that must feel like otherworldly at this point. No, absolutely. So I only get traces and hints of it because the people I came around while growing up were all the parents were like 40-year-old Microsoft. Like, what happens when you take all those evil jackasses and they turn 40 or 50 or 60? And then what are those personalities, right? They usually don't all remain evil. It turns out they try to cure tuberculosis or whatever. I mean, Gates seems to have been kind of like, now has like redeeming qualities. So I feel that, although actually maybe now with the divorce. Not all of them fly off from the East side. Some of them are only millionaires instead of billionaires. So they live around here, right? So I only got that culture. And of course, Microsoft pushes all this open source stuff, which I love, by the way. Which is crazy to think that, I mean, it's great. And in fact, we were just talking about Playwright last week, right? And it's amazing. And it's a Microsoft tool, there's Microsoft tools. No, it's been, I mean, Microsoft, it is amazing how much has culturally changed from when this book was written in 1998, which is really kind of the peak of it. I've got another book suggestion for you, actually. If you are at Microsoft and you're interested in kind of understanding that era. And Adam, actually, no, it's a great book. Startup by Jerry Kaplan. Have you read this, Adam? Yeah, it's been a minute. I think it actually was given to me along with the Barbarians led by Bill Gates. Relatives who didn't know what to get me for Hanukkah some years, but it's been a long time. It's worth a reread. I had read it when, this was a book that came out in 1985. I read it when I first came out to Silicon Valley in 1986, but I had not read it since. And Jerry Kaplan has started a tablet company called Go, which makes it, not Go the programming language, Go the company. And it is a really, really, really good read. And then one of the- Yes, this came up in Barbarians. The Go company, if I'm not, this was like the writing tablet, Go, right? Yes, that's right, that's right. Okay, this book has an entire chapter of them just, Microsoft getting so distracted with the one goal of just fucking over Go with 10 windows. And it's like, good job, everybody. You did it. You wrote the thing that obsoletes Go. They're not a concern on the market and nobody cares about it. Yes. And so, startup is basically a retelling of that from Kaplan's perspective. And it does feel like very directed of like, we are, and this is kind of the era of, this is before the findings of fact. And they were kind of with impunity. They would kind of announce that they're doing something to destroy a startup. And it was really very, felt very stifling, but it's definitely an interesting, it will couple well, it will pair well with- See, it's stuff like this that I don't, I never like the point of view that people have about, oh man, Google is just not successful at all. I wish Google were successful. If Google became the next Microsoft, we would have this whole evil, 30 years of evil replayed on the web. And it's very important to not have companies so evil that they spend, they go out of their way to screw over startups and then get nothing out of it. Yes. Microsoft was, it was pretty bad behavior in the late nineties. And we were well-served by the DOJ ultimate findings of fact. And I think they really cooled their jets, honestly, after that. And then they kind of went into their own- I don't know how I didn't connect these, I don't know how I didn't connect these dots earlier, but it's only super, super recently that I realized that the don't be evil motto that Google used to have, it wasn't some moral stance that they were keeping internally about let's all do nice things for the, no. If that was just subtle marketing to be anti-Microsoft, because back then- Yes. If you said evil in the context of software, of course you're talking about Microsoft. No, my generation does not get that now. I did not get that. No, and it's- I didn't say evil, oh, Microsoft. Well, and this is like a big wake-up call when we were trying to hire someone who was trying to decide between joint at the time, Microsoft and Facebook, and went to Facebook. And all of the younger millennials were, my reaction is like, well, at least you didn't go to Microsoft. So I can still like have some respect for them. And they're like, what are you talking about? Microsoft's a fine company. The fact that he went to Facebook, like I'm disgusted. Like I actually thought higher of him than that. I'm like, oh, okay. Like Facebook is the one- I will confirm that this is the view now, that if you go to- I had an offer for Meta before I got into this stuff. 100%, and this was in 2016 when it was, and I feel like I was kind of late to that realization. And, but yes, it was very clear that like that Meta, Facebook had really- lost their way. And I mean, justifiably, younger folks thought of Facebook the way I had thought of Microsoft. And for good reason, as it turns out. The kids are all right. The kids are right about that one. Yeah. And my last dig at Microsoft will be, I am starting my own timer to see when device script will be mentioned in a podcast, because that is definitely up the same alley as hubris. And we will see where that goes, especially with your node marriage and divorce. I'm waiting for, okay. Well, I mean, obviously you you've sent us device script now. I'd not heard of it until now. So we're going to, you know, you're talking right now. Okay. I'm sorry if I rabbit hole this and put us so deeply over time. I'll just say this before leaving TypeScript on microcontrollers. That is it. This looks wild. This looks wild. This has got ultra Java. Yes. Speaking of. Absolutely. In the planets. Yeah. And Adam, I know you're going to have to disappear in short orders because you've been away from home. So. Well, then I, before I do, I have one other book that I've been really enjoying that I'm listening to. I feel, you know, as you know, I feel. Don't stop being dirty about it. Every time you say listen to a book, you apologize. That's right. So I'm listening to Chernow's Washington. You know, I loved Hamilton just like every everyone does. But and the reason I got there was I had like credits on audible that were going away. And I was like, what is the longest book I can get for the fewest credits? And it was like 40. No, it's no, no, this is longer. Moby Dick was 24 hours. This is 41. I'm moving. Yeah, there you go. Exactly. Step aside. And I think I mean, fascinating, you know, that that time period is obviously fascinating. But I think the things of the discussion of slavery in the founding, very nuanced discussion of that. Washington's views were were really interesting, surrounded by Hamilton and other aides to camp and became much more progressive sort of in their, you know, in that military family, which was really interesting to see how, for him, the youth was influencing him in a much more progressive direction. But the other big, big sort of surprise or thing that I didn't quite appreciate was the degree to which, you know, he needed to make sure everyone understood that he was not going to be a monarch because people didn't understand forms of government that were not monarchies. So people like, oh, OK, I guess we have a president. I guess that's sort of like a king. Right. And it was really important that he had no children, that he and Martha Washington have no children of their own. So in a lot of ways, he was a safe pick for president because, you know, there were no he had no sons to marry off to royalty off in Europe. That's really interesting. Yeah. Recommended, though, it sounds like. And much, much more. I mean, that's that's like, you know, 30 seconds of the 41 hours. But, yeah, I'm really enjoying it. I love Chernow. Yeah, exactly. And apparently there's a bunch of new scholarship about Washington. So it's not just a retread, but there was a new I think was written in 2010, but new as of then. So, you know, it wasn't just sifting over what other folks had already written, but actually a bunch of new stuff that had not been woven into a narrative. The other reason I love Hamilton and Chernow is to just to put T.J. back in his place. Thomas Jefferson, I'm not a Thomas Jefferson fan. And I you know what, I love the fact that Hamilton basically hates his guts and views him as a chicken and calls him out on his own hypocrisy on on, you know, talking a mean game on liberty and then being an unapologetic slaveholder. Yeah, well, I mean, obviously very nuanced in Washington, too, where he I mean, he like he had very little money, like he kept up this appearance of having tons of money and was but, you know, didn't want to sell off slaves. But anyway, very complicated, conflicted. And, you know, all of these declarations about liberty, you know, have a very sour taste when you have massive slaveholders running the government. That sounds great. Yeah, it's a great one. Really enjoying it. That is awesome. And Adam, if the Jeff, the wolf with the pacifier will stay if you. Yes, yes. Don't worry. The Trump. Right. So Craig is in for the long haul. Craig is like, tell me more about that. I want to go back to that. I just like just riveted into my seat. Yeah. Mikowski. Do you have some books for us? Go for it. We can't hear you. Or I can't hear you. But Discord, maybe go and split brain. I don't know. I don't know. Green circle isn't appearing on Discord. So that means the problem is between Mikowski and Discord. How about now? How about now? Hey, sorry. First time list or long time listener. First time caller. So I apologize for that. I actually just snuck out of my office to tell you guys about these books. So I'm going to be super quick. But I have an elevator pitch for two different titles that kind of come from the sort of Cantrellian world of like organizational behavior that leads to terrible engineering outcomes. The first is California Burning by I believe it's Catherine Blunt. I don't have my notes in front of me. She's a Wall Street Journal reporter. And that is a deep dive into the history of PG and E. So both the history of electricity coming to San Francisco and California, but then also the the incentives and the organizational behavior and other things that led them to accidentally blow up San Bruno and then burn down Paradise, California. The teaser fact I guess I'll share from that one is that there's a great sort of metaphor for tech debt in your engineering projects. I think they're in that much of the problems that PG and E has had in the past few decades have been coming from the fact that they are financially incentivized to build new things and not to maintain old things. And that is a theme that runs throughout their history. I don't know if anyone's already read that one, but I would definitely recommend that for any tech leader or engineer. Yeah, this looks really, really good. Great recommendation. Yeah. And then the second one, and I'm going to run back to my cube, is the it's called Command and Control by Eric Schlosser. And that is, yeah, you know, this one. OK, cool. So you can probably sell it to me. I guess my quick synopsis or pitch for it would be it's about the history of the American nuclear arsenal. So it walks you through like the early days and then the kind of speed walks you to the 80s, which is when the actual incident occurred. And the acute thing that happened was a technician accidentally dropped a wrench and blew up an ICBM in Arkansas, in the United States. But that's not even a spoiler because the real story is the like fact that we didn't actually accidentally have a nuclear detonation in our in our Cold War history as a nation. And just sort of a recount of like all of the lessons learned and sometimes lessons that we should have learned but didn't related to how we designed for safety in our nuclear armaments. And also, I would say there's even like a debugging line in there because as their missile silo is on fire and they don't know what's going on, they they realize that like all of the systems they designed to make it safe were not working. So really good read there. And I think both of those titles are. Lost you or those. Sorry about that. My phone. I was just ending with that. I think both of those titles are fairly accessible, not overly wonky. So I would definitely encourage that. I tell my teams, my my software teams to take a look at them as well. Really broadly applicable lessons. Totally agree. And I actually read Command and Control after Atomic Accidents. So I remember if you read Atomic Accidents, Atomic Accidents is a great book that surveys essentially every atomic accident that happened in the US. And it is remarkable. We came, Steve, if you read this, this is like we came remarkably, remarkably close to nuking South Carolina. Can you imagine if we had nuked South Carolina? Seems bad. But it's like there's no I mean, can you imagine? There's no way to be like, oh, sorry, that was us nuking South Carolina. They'd be like Soviets. What? You know, they'd be like, well, now we have to also nuke. Funny story. But now we have to nuke Moscow as well, or we're going to have to own the fact that we nuked. I mean, it is just absolutely wild that we got so lucky. And in some of these accidents, just extraordinarily lucky. And there are actually, in some of these accidents, we actually didn't blow something up because something failed. If something had actually operated as designed, we would have actually nuked ourselves. But Command and Control is a great book. And I love the California Burning. You know what I have not read also is Smartest Guys in the Room, which I've been, it's been on the list for quite some time. Yes, it wasn't the Arkansas is the yeah, this is and this is it is a Titan missile. If I'm remembering correctly, it's a it's a it's a silo that and the wrenches drop down the silo. And the book is also all about the engineering of the silo, which is super complicated, as as one might imagine. Have you been to the Titan two museum? No, no, it's interesting. You can go in a silo and it's got the whole thing. So it's really highly recommended. It interesting. And if you read Command and Control all the time, you would love Command and Control if you haven't read it. Yeah, it's it's really good. Especially if you've got any interest in in Titan, you would love it. You would love it. All right, other I go through all my I mentioned Creative Capital last time about George Dorio, great book on one of the first century capitalists. And I imagine Adam, I imagine you've taken off at this point. But what another one that I actually liked after the, you know, Steve Jobs, the next big thing, which a bunch of us read by Randall Strauss, I'm like, I'm just gonna read more books by Randall Strauss. And I read eboys terrible title on by Randall Strauss about the history of benchmark capital, which was I really enjoyed. And as I definitely recommend, now there has to be an eboy VC firm like that. Is that not just like a book with that title? Yeah, the and you know, it's kind of funny because I get the sense that like, I think the book is pretty well researched. But I think benchmarks a little uncomfortable with the book. The benchmark capital is really interesting. Actually, Steve is one of the things that's funny about benchmark is, you know, there are a bunch of things that we've done at oxide that we think are great. No one has like, you know, I mean, we've got a uniform compensation across oxide, which things like totally radical. And then you realize that like, actually, benchmark capital does the same thing. And the it actually turns out like there are actually quite a few high performing teams that did the same kinds of things, which is definitely interesting. And Ian is also recommending the benchmark, the podcast on acquired acquired, it's a great podcast, and they did a an acquired on benchmark that is really worth listening to. And yeah, if you say I listened to the acquired on benchmark and then bought and then bought eboys, eboys, I thought it was great. I thought it was a really good read. I mean, Randall Strauss is a great author. And it is mainly about eBay, which is kind of the reason he called it eboys. Again, terrible title, really call it literally anything else. But it is it's pretty interesting. eBay was just absolutely minting money early on and is like a no brainer from a VC perspective, because they are like immediately profitable, but the way they operate as a firm is really pretty interesting. And then let's see what else did I talk about losing the signal that was, which was fun. That was folks didn't get a chance to listen to that. And oh, the recommending that the sibling podcast acquired called founders of the check that out. Acquired is a great, great podcast. Any other Steve, you have any, any recommend book recommendations? Oh, I have one book that I'm reading. And by reading, I mean, I'm reading it really slow, but I am I am part of the way through it. But I've enjoyed it a lot so far is the color of law, a forgotten history of how our government segregated America. And it's, it's it. And what's really interesting about it, too, is it starts off by saying the author deliberately just chooses to talk mostly about San Francisco, not because San Francisco was particularly bad or different than anywhere in the US. But because San Francisco has such a progressive reputation, the author is basically like, if I can convince you that it has deeply racist policies, you could be convinced that the entire rest of the United States does. And so most of the stories in it are actually Bay Area focused. Yeah. And for but for that, like strategic reason, which I also thought was an interesting point about things. Yeah, but they talk a lot about zoning law and like how the way the federal government ran government housing and like different things that happened and, you know, stuff that was technically illegal, but was overlooked by authorities because they didn't want to make stuff legal. So just all kinds of things. So it's a good book, although obviously, you know, not a great topic, but just things. Yeah, it's like, it's important to remember these things have happened in living memory about people who are like older than me. But you just like, you know, the past is racist, but then you like read some history and you're like, wow, it's somehow even worse than that. So anyway, it's sobering, but but good book. So it's the only thing I'm like, actively reading right this second. Yeah, it's a good recommendation. Yeah, that's and yeah, I mean, the Bay Area history is rife with it. So yeah, best of my knowledge, no community is really, as you say, it's just like, this was very, very pervasive and deeply uncomfortable, but something that is important to confront and learn about. All right, any other recommendations? Other books? You've got a good, I've got a good reading list. Yeah, Tom, go ahead. I dropped it in the chat. And it's science fiction. So you might not like it. But you know what? The books by John Sundman, I think the first one is Acts of the Apostles. And it features a fictionalized company, which is a merger of Sun and digital. And a lot of thinly veiled, fictionalized executives. So it's a fun read. This sounds like the genre. This is like business science fiction is what it sounds like. Now, this is some science fiction I can get behind. Yeah. And I don't know if you know John Sundman, but he was a tech writer on the East Coast, one of the first East Coast employees. And so he's still pretty active writing stuff. That sounds great. No, that sounds like a great read. And sorry, what did you say the title was? Acts of the Apostles. Acts of the Apostles. All right. Not a science fiction title, but yeah. Yeah. And when was it written? Is it kind of current day or is it? It was written in the early 90s, I think. And then he's done kind of a couple of riffs on it and updates. And so it's a little bit hard to figure out what order to read things in. And this is Acts like A-C-T-S of the Apostles. Right. Right. Man, I'm just getting a bunch of free downloads from the Catholic online learning resources. I get a... John Sundman, S-U-N-D-M-A. Oh, there we go. I got it. Okay. Yeah. This looks good. I'll have to... I tried to read some Werner Wenge to be like, you know, I like the idea, like, you know, this is obviously coined the Wenge Insigniority. I like the idea of like software archaeologists. I thought it was really interesting. And I'm like, all right, I'm going to like just sit down and really force myself to read this. And it was just, I just couldn't get through the first page. I just started reading him too. And it is very slow going at first, but now I'm getting into it. Okay. So maybe I need to... And Tom, you're a science fiction reader. I mean, you enjoy science fiction, right? Oh yeah. Yeah. My wasted youth. I think I've read at least 50 books by Philip K. Dick. Do you recommend that? I mean, what is a good... To someone who is not a science fiction reader, what is a science fiction book you'd recommend? Is that an unfair question? Oh, the one I really liked was The Sparrow. And what'd you say, Steve? The Gween? The Gween, Ursula Le Gween. Ursula Le Gween. Okay. I could also pick specific ones, but just like, that is how I always point people to if they like want to experience science fiction. She's my favorite author in general in that genre. Awesome. That's a great recommendation. She's great. With The Sparrow, it's a story of first contact and how everything can go wrong. And it's pretty hilarious. That's interesting. Yeah. I mean, I want to get... Actually, I do want to get more into it because I think it's like, it's an important genre and I need to like, what's my problem? Why can't I just, you know, I don't know. So yeah, I'm excited to... Those are a bunch of good recommendations. All right. Now is where I need to make sure that there were not speaking requests that I missed, or maybe there are. Hold on just a second. Oh yes. Sorry. I've got two speaking requests that I need to process. There we go. Ian's coming back and Ben's here. All right. Ben, do you have a recommendation? Yeah. First, just a comment. You reminded me before, oh gosh, talking about maritime disasters. In response to a previous episode, I bought Flying Blind and immediately took it on an airplane and started reading the book during takeoff. Realized my mistake and put the book down. What did you think of Flying Blind? I thought mine was really good. I... The book is written in this dark and brutal way, especially the opening. Like, it hits hard right out of the gate, and it also, like, it pushes, like, the humanity and the actual, like, truly terrible. And, like, on top of how screwed the business model and everything was, that also kind of surprised me. I expected it to be more technical than it was, but it was really about business and management and really trying to drive home how awful these accidents really were. Yeah. Which I actually appreciated because I felt like there was... I mean, just bluntly, there was some implicit racism in the dismissal of both the Indonesian crash and especially the Ethiopian crash. As someone who has flown Ethiopian airways and absolutely loved it, it's a terrific flying experience. I'd recommend Ethiopian in a heartbeat to anybody. It was a great airline, and I thought they were really, really maligned. And, man, those pilots, those poor pilots, they were doing, absolutely doing the right thing in the Ethiopian air crash, especially. Anyway. Yeah. I'm currently reading a book by Daniel Kahneman called Thinking Fast and Slow. Yes. Oh, you've heard of this? Oh, for sure. Yeah, yeah, yeah. I've heard of it as well. Yeah, yeah, it's definitely been of note. And are you liking it? Oh, it is a little bit challenging to get through at first because every couple pages, I'm like, oh my goodness, I just need to think about this for a little bit. And because it starts dredging up so many examples of weird behavior that you've seen people do or that you've noticed in yourself, and then all of these things make sense. But I'm very much in the back half of the book now, which is much more about all the psychology that Kahneman and Tversky developed making its way into economics. And that is also a little trippy. Yeah, so I have not read Thinking Fast and Slow, but I've read, Michael Lewis wrote The Undoing Project, another terrible title, not a good title, but that is about actually Kahneman and Tversky and their kind of partnership and collaboration. Yeah, I read that too. Yeah, oh, interesting. Yeah, yeah. So, but you're enjoying Thinking Fast and Slow. Oh, yeah. I think the other thing is, at some point, I need to go through here and pick out all the papers and such that Kahneman references. It is like, I mean, of course, it's written by a scientist, college professor, researcher, but it is incredibly well cited. Like, almost every statement that he makes is attributed to some particular study. Like, you know, some paper by some, usually, you know, mentions author's last name and year or something like that. Right. Interesting. That sounds good. Yeah. Yeah, that's a good one. Do you, any other suggestions? Not to put you on the spot, but make sure you got through the other ones. Yeah, excellent. Suggestions given. And Ian, will you come back to offer another? Yeah, I went back through the show notes and realized I had not recommended this one that I had read a few years back. It's called The Man Who Solved the Market, How Jim Simons Launched the Quant Revolution by Gregory Zuckerman. It's a book about Greg Simons and the Renaissance quants, you know, the medallion fund and how Jim Simons kind of started the quant revolution and that kind of stuff. Oh, that's interesting. And when is that? Are they... I think they, so he was tinkering on it for a while and it did not really bear fruit until the late 80s, like 88 or something. And yeah, it kind of kicks up on his early research, his early kind of, it follows his life basically. And it does also talk about Robert Mercer a bit and how he fits in with the funding of right-wing PACs and various other kind of things that he's been associated with. Yeah, that's really interesting. I'd be interested to read a, this is a good book, because it was like D.E. Shaw and O'Connor and Associates right in Chicago that were on the, in the 80s that were beginning to discover that they could do these things kind of algorithmically, they could trade algorithmically, they could front run, they could do. And apparently it was like just an era where it was like really easy to front run because there are these big trades, you could see these big trades happening and very easily get in front of them. There's a lot of money to be made, but yeah, and well-written it sounds like. Yeah, yeah, I enjoyed this one. This is a good one, at least from memory is about three years ago that I read this one. Yeah, there's another book of that book about quants called The Predictors, and this is about the group that got started in Santa Fe, basically a bunch of chaos theory people and some guys who used to cheat at BlackJet with computers in their shoes and stuff like that. It's good fun. That sounds like the Eudaimonic Pi. Because the Eudaimonic Pi is Roulette, not Blackjack. Have you read the Eudaimonic Pi? Have we not talked about the Eudaimonic Pi? The Eudaimonic Pi, which is E-U-D-A-M-I-N-I-C. This is hilarious because Amazon has just said frequently brought together The Predictors and the Eudaimonic Pi. The Eudaimonic Pi, okay. I forget how, but The Predictors was about the prediction company. Got it. One of my brothers ended up as COO there. Is this the brother that invented the optical mouse? Nope, nope. That was my smart brother. That's the smart brother, right? God, the LeBlanc family, amazing. So the Eudaimonic Pi, and I want to get the predictors. The Eudaimonic Pi is a really good book, and I'm going to knock, great title. Have you read this, Tom? This is about the UC Santa Cruz. So this is Doyne Farmer, who is now at the Santa Fe Institute. Physicists and computer scientists at the UC Santa Cruz, same kind of thing. It was computers in their shoes, and they had decided that, look, Roulette is Newtonian. We can predict Roulette. And it's an amazing story, nonfiction, really incredible. And they are the reason that electronic devices are banned in casinos. So definitely worth reading. I don't think I've read that, but there's clearly a heavy overlap. Clearly a heavy overlap, yes. And I enjoyed, to folks who have read Ben Masters' Burning Down the House, which is a very entertaining, but kind of like, it's a little bit of cotton candy, book about card counting. I recommend the Eudaimonic Pi, because it's, again, not a good title. And I feel like, are titles that hard? I feel like we've got a lot of great books with titles that are kind of mediocre here, or worse. I feel like we could do better on titles. But Burning Down the House is heavily overused. Burning Down the House, yes, that is an entertaining book, though. Burning Down the House is a very entertaining book. I didn't have to think about, oh. Yeah, go ahead. I was going to say, I got to be easy about that, because the title of my book is just literally the thing that it is. So I didn't have to worry about it. It wasn't hard for me. But for other titles, I'm sure it's one of the most difficult parts of writing a book. Yeah, I mean, the Rust programming language, I've got to say, that's a pretty good title. And a lot of those books could serve to learn from your book, Steve. And they should give it a book that's... Simply just be about a nonfiction thing that can be explained very simply. It's just that easy to have a good title to your book. It's that easy. Good stuff. All right. Well, I want to make sure that everyone got a chance to offer theirs. But as we did previously, we got a lot of really good books in here. Oh, where did I? I have now lost the channel. But a lot of good stuff, a lot of good reading for the next year. And I actually went back and listened to the episode from last year and realized that I've got some things that I had meant to click on, that I didn't quite purchase. But in yours, I've already bought a couple of the ones that you recommended. So they're already en route. I appreciate that you like my recommendations. Thanks. Yes, you have this. And if then headed my way, looking forward to it. So just got the notification that it shipped. So I'm looking forward to that. All right. Well, thank you very much, Adam and Absentia. Thank you. And thanks, everyone, as always, for Books in the Box 3. And looking forward to it. We'll make this a kind of a quasi-annual tradition. So if you read any good books in the coming year, be sure to bring them next year. Thanks, everyone. "
  },
  "2ac2cad5-b846-4b58-b0cf-bb8bcc6c5107": {
   "Title": "Launching the Cloud Computer",
   "Description": "\u003cp\u003eOxide Founder and CEO, Steve Tuck, joined Bryan, Adam, and Oxide Friend, Steve Klabnik, to talk about our recent announcements: general availability of the Oxide Cloud Computer, and raising $44m. The reception was (broadly) great! Bryan and Steve answered questions about the product, company, and launch.\u003c/p\u003e\u003cp\u003eIn addition to \u003ca href=\"https://mastodon.social/@bcantrill\"\u003eBryan Cantrill\u003c/a\u003e and \u003ca href=\"https://mastodon.social/@ahl\"\u003eAdam Leventhal\u003c/a\u003e, we were joined by \u003ca href=\"https://hachyderm.io/@sdtuck\"\u003eSteve Tuck\u003c/a\u003e and \u003ca href=\"https://twitter.com/steveklabnik\"\u003eSteve Klabnik\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIf we got something wrong or missed something, please file a PR! Our next show will likely be on Monday at 5p Pacific Time on our Discord server; stay tuned to our Mastodon feeds for details, or \u003ca href=\"https://sesh.fyi/api/calendar/v2/iMdFbuFRupMwuTiwvXswNU.ics\"\u003esubscribe to this calendar\u003c/a\u003e. We'd love to have you join us, as we always love to hear from new speakers!\u003c/p\u003e",
   "Link": "https://share.transistor.fm/s/8e31035c",
   "Filename": "2ac2cad5-b846-4b58-b0cf-bb8bcc6c5107.mp3",
   "GUID": "2ac2cad5-b846-4b58-b0cf-bb8bcc6c5107",
   "Published": "Mon, 30 Oct 2023 17:00:00 -0700",
   "Transcript": "We get some comments from time to time about, and I hope you're sitting down, about us being lousy podcast hosts. We are, well, I mean, I don't understand how anyone can criticize our intro music for starters. That's right, there's very little to critique. I mean, it is beyond reproach. Yes. It may be true that our intros are a little terse. Terse. Also non-existent. Well, there's that. But today, I think particularly, one of the reasons we get dinged is by not introducing our guests. So, especially because we have two Steves as our guest, I thought we should introduce our guests. So Steve Klabdick is here with us. Steve, welcome. Hello, hello, thanks. Friend of the show, Oxide colleague, and I don't know, generally famous. Is that fair, Steve? No, just generally famous. I'm just some dude. I admin to Discord, though. That's a good credential. But number 23? Yeah, 23. Most karma. On Hacker News karma all time. All time on the planet. Yep. He is part of the, I dare say, the Hacker News aristocracy. Yeah. He's a baron on Hacker News. How do you spend all that karma? Yeah, how do you, well, I am convinced that there is like a global services for Hacker News that they can't use. I think that he hits like 30,000 and like something different happens, and he's just like, we're never gonna get it out of him. It should be like a little twinkle in the eye, being like, no, it's just like, I don't know, yeah. I told myself I was quitting at 1,000 points, and then I told myself I was quitting at 10,000 points, and then here I am forever later. But I feel like this is not in service of my cause, but I wanna be like, actually, I'm number 24 because Paul Graham is hidden off the leaderboards and he has the most. So there's really no extra one on top. But yeah, I don't feel like I was defending myself very well. Right, but who's counting, right? Yeah, exactly, no one's counting. And other Steve, welcome to other Steve, Steve Tuck. Hello. Was this meant to address the criticism that our intros were bad? Is that, I mean, I'm just trying to understand. Are we trying to, okay. No, I'm saying, look, you thought that was bad? Could have been worse. That's right. Like, okay, okay, we'll do it your way, pal. We will do intros. You'll be begging us to never do another intro again. Yeah, exactly. Thank you, that was very kind. Yeah, there you go. Other Steve, I guess. Our CEO and Oxide co-founder, of course. A lot of the 25 karma on Hacker News. Yeah. My karma also was hidden. That's right, yet to earn karma on Hacker News, but any day now. So big week last week. It was big, yeah, it was. And a little bit surprising, I guess. I mean, I know that's the wrong thing to say. It's like our launch, we shouldn't be surprised, but I was a little surprised. I was surprised. I was just flat out surprised. I'm surprised by how surprised you are, just because the internets love us. That surprises me. There you go, you're just easily surprised. The internets love us. So we announced the first shipment, or the shipment of the first cloud computer. We announced the raise, which is kind of a big deal, because it pays all our salaries. And everyone loved it. Like the internets lit up, and people were very interested. And I was unsurprised by their interest. Yeah, it was great. I mean, it was delightful, honestly. And I guess it's also, there's a little bit, okay, now this is like, let me just get this, get this out there. Let me just get this off my chest. There's a little bit like, why is everyone so surprised that we shipped? You know what I mean? There's a little bit like, you know? It's like, I kind of feel like, you know, it's like when I graduated from college or whatever, it's like, people don't need to be that surprised, you know? You can actually like, act like you knew this was gonna happen this way. But I think it is, I mean, but of course, truthfully, it is surprising. Everyone's got every right to be surprised. I mean, we also talked about the entire journey. We did. The near misses, the difficult times. Which is the other thing that I did think that, so okay, Adam, this is the other element of my surprise, is that, and we did, there were some stories in journalists who were like, this company is coming out of deep stealth. It's like, we are, aren't we the? Oh my goodness, like how- Much like we be. We get out here and proverbially, to be clear, open the kimono like every week. We're talking about some esoteric detail of the product. I mean, some problem that nobody's ever talked about, but everyone has had. I mean, I don't know what deep stealth is. I don't know how we can be more the antithesis of that. Yeah, if anything, we're like TMI. It's like, hey, let's just- Enough already. Don't you guys like have some problem that you just like keep to yourselves for once? Like experiment with that. Like, I just don't need to know everything. It's like kind of gross, honestly. Go to therapy. It is therapy. There's the truth of that. But the podcast is cheaper than therapy. The podcast is really cheaper than therapy. And the, so that part was, I mean, it was, and obviously there were plenty of folks online who were like, hey, these guys have been talking about what they've been doing for a while. But I think it's also easy for us to kind of get in our bubble and realize that like, not everyone listens to the podcast and not everyone is following what we're doing. So- Not everybody's on Hacker News. Not everyone's on Hacker News. As I try to remind myself, or Yakker News, as my kids call it. I'm going Yakker News again. It's like, come to your room. Or lobsters, as I came to find out. Or lobsters, that we, when you say came to find out, what does that mean? I just wasn't aware of- Of lobsters? I mean, aware of, but not, I mean, I had think I'd been pointed towards it once or twice before. Well, and were you, I mean, as long as we're talking about all places in which we were discussed, were you aware of Slashdot? I mean, yeah, that's- Oh man, that was, that was definitely- One step further. Yeah, I would say never change Slashdot, but they're one step ahead of us in that regard. So, so yeah, I mean, I think it might be interesting to go a little bit kind of into the mechanics of the launch, I don't know if people are interested in this, but just in terms of like, what's actually involved in a, you know, what it means to actually engage journalists, for example. Because there were a bunch of news stories that came out that we were all kind of coordinated. And it's like, how does that actually happen? Yeah, so how long ago did it start? Like, when did you start having conversations with PR and journalists and how did it roll out? Yeah, so I mean, I think we, so we started probably in earnest, maybe like two months ago. PR, probably like, yeah, several weeks ago. And we knew that we, you know, one of the advantages, I think we've said this, certainly implied it over and over again, but just to say it explicitly, there are a lot of advantages to starting a company later in your career. And Steve, I think you and I have had, I've just really appreciated that. And then we've got, because we've got a team of veterans that are all, I mean, we're not, you know, been around the industry for a long time. And so everybody's got a really big Rolodex. So when it came to like a PR firm, well, we know like who's on that shortlist and, you know, ran a process and which is something we emphatically believe in. It's like, we don't want to be, we always want to run a process for this kind of stuff. And you're kind of selecting a firm like that. And it was, I feel that this has happened certainly more often than not, Steve, where we kind of come in with our, but we've worked really well with this firm. Let's run a process and see what happens. And then it's like, you know what? The firm that we love is actually the best firm. So that was actually great. Because I mean, it's pretty easy to fall. And I think for a lot of companies to fall into the playbook that is out there, be it a playbook that a set of investors will put in front of portfolio companies. For sure. Other folks in the network. And once people have gone down a certain path, they're going to kind of recommend it. Not necessarily if they've had a bad experience, but you will see these kind of just add water playbooks where it's like, you know, insert mega PR firm over here. Or law firm, or I mean, it's like when you get these kind of because you need these professionals. Well, payroll platform here is your, and PR is just another one. And I think there are a lot of companies that aren't sure if they need it or not. And they're told like, no, no, no, you definitely need this. And it can be in cases where they haven't even shipped a product. They haven't started on the product. And there's a lot of ways to spend money poorly. Yeah, and I think that, you know, PR, actually, Steve, you don't have to talk about this but I'd be interested to get your take on it. I think PR is one of those things like sales that's often misunderstood by technologists. They think like, oh, the way I get people to care about my thing is PR. And the way I get my thing sold is sales. And it's like, well, that's part of it. But it's like PR can't make people, a PR engagement or engaging with a journalist can't make people care about something that people don't care about. And worse than that, I mean, you now are like two bridges away from the actual message, right? So if you don't have the right firm just talking to a reporter who like, oh my God, more diligence than others. And so you're already going to get a version of the story, right, not your version of the story. And then, you know, if you have the wrong folks in the middle, it can go really. Well, and in particular, you can have like a bad PR firm that can be like, you know, actually like your story is actually pretty uninteresting. So I told a different story to the supporter. They love it. They are super interested. Like, okay, well, that's also interesting. That's not what we do. So you really need a firm that kind of understands who you are as a company, kind of the soul of the company. And we were really lucky with the launch squad folks, definitely have worked with them in previous lives and they've been really terrific. And in particular, when one of the things that in part of this, I want to call them out in particular, because as they were kind of, they absolutely understood Oxide. I love the fact that they'd come in listening, having listened to the podcasts. And, you know, that's always a metric for us is like, have you done your homework on us? Do you understand us? And of course they had, but in particular, they were like, you know, we really see the transformative power of this. And we think strongly that it needs a name that we need to like, not a product name. It needs a category name. And we agree, you know, I think it's, and the, you know, and I think it was, it was, you know, their suggestion that, you know, we think you should call this the cloud computer. And does that make sense? And, you know, that, and we were kind of trying it on. I, you know, one of the things I, whenever you get something like this, you want to test that out a little bit. And Steve, I remember like the kind of, they had suggested it in the morning and I think we had, you know, two different customer meetings over the course, potential customer meetings over the course of the day. And we were both kind of trying it on and, you know, watching the reaction to it. And it was helping to catalyze it. It was really helping people understand, because there's kind of an interesting built-in juxtaposition with cloud computer, because we kind of think of the cloud as being something that we don't see, that we are, that is often the public cloud. And to have this kind of juxtaposition of like, no, this is this physical thing that runs elastic infrastructure. Cloud computing is running in someone else's data centers. Cloud computing is something you rent. Cloud computing is this kind of ethereal service layer that you can't see, you can't touch. And in fact, you go into the data centers of where these processors are running, and there's, you very quickly understand that there's a very, the big difference in what's been built to support that. Totally, and so we kind of view this as like, just like you've got a microcomputer and a minicomputer and a personal computer and a mainframe computer, this is the cloud computer. So that was something that was, I thought that was a great suggestion on their part and the more we were test driving it, the more it made sense to us. So as we were, kind of the way these things work is that you, and this is, you kind of go pitch reporters on a story. And the thing you have to understand, and I think I'm going to speak up on behalf of the fourth estate here, because I really think that we have culturally really maligned journalism, and especially in Silicon Valley, there's this idea that journalists are the enemy. And my wife's a journalist and I know a lot of journalists and I really take issue with that kind of perception. Of course, there's bad journalism, just like there's bad everything. I mean, there are, in any profession, you can find the worst of the profession and the best of the profession, but the best of journalism is important and terrific and has broken huge stories. So that's all the things in the positive category of journalism. One of the challenges with journalism is they are telling a story. And when you are, I mean, we think that there's a big story here in the abstract, but it's a big story. It's not one that's, it's not something that is- Doesn't fit in 500 words, so then. And it's not like, what's the news? There's a difference between us having a story and having something that's like newsworthy. And so you've got to couple the larger story with something that is newsworthy. For us, I mean, there are kind of two newsworthy elements. Obviously, there's that we are in customer data centers right now and we are announcing our general availability. And then we're also announcing our fundraising, which was actually wrapped up a while ago, but it's just not something we've talked about. So this was gonna be our opportunity to talk about that. We wanted to be very circumspect about the way we talked about fundraising. I mean, Steve, you and I have both seen, and Adam, you too, have seen, we've seen plenty of companies that treat fundraising as if it's the objective. And it's like, fundraising is not the objective. Fundraising is something that is necessary on the way to the objective. So we want to, you always want to be careful about kind of how you do that. But we did want to, we also needed to announce it because we hadn't, I mean, we hadn't really said anything. And, you know, on the one hand, our investors like to keep a low profile. On the other hand, like, okay, like not that low profile. Like, can we start talking about this? So we- And to go hand in glove too, to say that we've got this product in market, it's available now, and we're not some underfunded startup. We've got this war chest. So don't worry, we're gonna be able to support this thing and actually bring it to market in the way that your businesses need. That's right. Yeah, that's right. And I think it'd be interesting to know kind of how, I mean, that should be important to, and hopefully that is important, but yeah, Adam, that's a very good point. And that war chest really is, it is essential to know that like, okay, I am gonna be, you know, this thing is early, but there's gonna be longevity here. And there are a bunch of investors who really believe in this thing. And they include the very best of institutional capital, institutional venture capital, and some of the very best of corporate venture capital. And there's some just really big backers here, which is terrific. And we obviously really appreciate all those folks. So yeah, Adam, you're right. I mean, it is a really, it is an important hook. But so as we were kind of thinking about like, all right, so we need to go structure this. Then you get to be kind of like outreach to journalists, and you're trying to tell them what the story is. And of course, like, and Adam, I can't remember if you and I talked about this, but it just sounds a lot like talking to venture capitalists in terms of like, oh, like we're too early for them, or we don't do hardware. I'm like, this sounds like you're talking to VC guys, where the raise is not above a certain level. Right, exactly. You're like, okay, all right. I'll be writing from the sidelines. There was some of that, actually. Yeah, exactly. And actually, to their credit, I mean, we've known a lot of journalists over the years. I mean, Adam, do you think it's kind of funny that we knew Ashley Vance, like when he was a little sprout? And I mean, we were sprouts. We were all sprouts together. Was that article from like 2004, 2005, something like that? Yeah, 2004. So the very first article ever written by any technology that I'd had any part in was the article that The Register wrote on D-Trace and featured a profile of the three of us, of Mike, Adam, and me, and Adam, the three of us sitting in my apartment because we didn't have a better photo of us holding a Scrabble rack, as I recall. That's right. I know. When you say it out loud, it sounds weird. Did Ashley physically take that photo? No, no, no, no. Remember, you and I went out drinking with Ashley. Okay. I think it was like Sun Network in China. I know I'm saying this and it sounds like a dream. Yes, go on. And then what happened? And then- Was Steve there? Or was I there? You were there. There were no Steves there. And then the headline was something like, Sun Engineers Drunk on Something or Other. And we looked at it and said, uh-oh, what is this going to be? But it turned out to be pretty good. So in my dream, Ashley took that photo himself. Or maybe, so you think Bridget took that photo? You think my wife took that photo? I think so, I think that's right, yeah. I think that, I mean, I have it in my photo album, so I think that's domestically generated. So anyway, but Ashley went on to, so left the register and went to, I think the Bloomberg, New York Times, one of those stops. He was at the New York Times, yeah. Yeah, and was at the New York Times, and then wrote what is one of the important books about Elon Musk, and is now a traveling, he's a television host now of a television show, which is great. So Ashley has become, and I mean, the piece he wrote was really good, actually. He went deep on it, and he talked to our users, which was great. But so on the one hand, we've cultivated- That's what good looks like. That is what good looks like. Is like- That is what good looks like, yeah. Reporter that actually wants to dig deep, understand the people behind it. Understand the people behind it, yeah. Just like the first couple people, but like the team, and where things have been in the industry for a period of time, why this is new, different, et cetera. That's what you're after. Yeah, and I, you know, the fact that he likened me to Ron Papyle, I think, this is, have you ever seen, like he- Oh, yeah. I remember you saying that your mom and sister like dined out on that for like months. Yeah, dined out on my carcass. They dined out on me, because, and is this in the story or not? I, okay, so I, Ron Papyle was an infomercial salesman. Yes. I- I just had to see his picture. I, and I know I'm, you know, I'd like to say, I would like to hope I'm in a safe space. Yeah, thank you. Someone has dropped the picture into the chat, just in case, there's like, how can this be so bad? Oh, goodness gracious. Okay, so he was a famous pitch man. And in particular, I had purchased a food dehydrator. I know this is not a safe space. Did you, you did not know this, Steve? No. Yeah. And Adam, you may have forgotten this. Like, why am I- No, I'm here for this. I know this one. This is the one that you've left to your heirs to be opened upon. My untimely demise, yes. Untimely demise, especially if Brian does not have an airtight alibi. So I had bought a food dehydrator. You'd be very surprised to learn that they're basically garbage. So this is when, because, so you watch this infomercial, you're like, God, this seems great. And- Problem number one. Okay, and so it's basically just like a cheap piece of plastic that heats, that at extremely low temperature, dehydrates food. And so I'm like, I'm gonna make raisins. So I go to the grocery store and this is just embarrassing like how this is the part that they don't feature on the infomercial That you go to weigh the raisins and I'm like, wow, that's $12 worth of raisins And of course, I'm like I have just paid for the water in the grapes I bought the grapes and it is the water that I have paid for and I'm now going to go Dehydrate these grapes and turn them into raisins Um The I would like to say that I made the world's most expensive best raisins And yes, if you're wondering am I in the right? Are we just for the oxide launch show? We're talking about raisins. We're talking about both They're related Startup number 6042 is uh, finally an integrated well-designed top to bottom. Uh, of dehydrator Truthfully the bigger problem the dehydrator is that you that ultimately you're paying for the water when you go only they were at scale It would be everything would be better, but they're just not That's right. Um So anyway, so when you deploy a traditional rack, what is the net you're left with at the end? Not too abrupt of a transition the um but so ashley had written this great story about us and this is like on the one hand we we've like Got this great rolodex over the years But if you on the other hand like ashley is now world famous and a bunch of the other journals But they're just like two either too prestigious or retired or both so it's like well, all right, that's not that's not very helpful Um, so we know your friends are too good. Brian. It's very rough It is it's very rough. I'm glad that you understand my my dilemma steve about how difficult it is to be um So it but it is it was tough. I mean honestly, and so we um as we were, you know trying to find folks and um The and launch quite the terrific job reaching out to a bunch of folks but you get to the point where like, all right, so we've got a uh, You kind of try to sell an exclusive but that's that can be a hard sell when um, Even though we would love someone to really dig deep Um, but then you do what's called an embargo. So you say all right So we've got this news and the news is under embargo. Um, and you got a press release that you write um, and the press release is going to go out on the wire, um, and there's a A couple of different wire services pr There's pr news wires. They're a bunch of them where you're basically pushing your press release onto a press release news wire and now that is available for anyone to write a story on and it is a press release is like for the press it's Is pretty well? Recognized. Yeah, for sure. I mean they don't have to live by it, but most journalists will Adhere to it and it is Effectively just so someone is not preempting the news. That's right. And so when you have something under embargo, yeah They're always gonna honor. I mean, that's just like I mean, yeah, I guess they don't legally have to but it's but um A reporter is basically going to honor an embargo. Um, and the um, So we kind of knew that was happening. Then once you kind of commit to that date It's like, all right You're basically locked in for the date and that's going to be And we knew we were going to write a blog entry that kind of accompanied The the press release and setting that was about two weeks before yeah Like starting to give reporters the opportunity to write under embargo Reporters will then reach out and want to do interviews right? Yeah have a bunch of q a back and forth But once we had set that The timing of that was a bit early. Yeah So why is it at 3 a.m? Why? Where where's that number come from that that is 6 a.m. Eastern So and that is why 6 a.m. Eastern well, that's just so they can even that seems early well, so the particular reason for that launch squad explained was that a bunch of Financial service newsletters go out at 6 a.m Eastern so if you want to be included with these like financial trade rags that go out you want to be Launching it at 6 a.m. Eastern which I did not know Just in general if you want a reporter to have a story that's going to publish on that morning You want to give them you don't want to have like a 9 a.m Embargo where they have to be like well shit This is like the story's going to go live at 8 30 And that would be jumping the embargo by half an hour. You just want to give them like all right So it's going to be so 6 a.m 3 a.m on uh here on on the west coast, but we don't necessarily be up for it So, um, we kind of have that locked and loaded And then we we know we need to write a blog entry for it. Um, and so we we're kind of noodling that It was very catalytic to how we were at an event that actually one of our investors was hosting um, and they in particular a counterpart they were having this conference and they you know, it'd be great is if you Had the oxide rack at this conference, where was it being held? in san francisco No, but like what kind of a building was he just asking was it just an office building or what kind of was the stadium? I mean, it was a major one. Like what was the zoning? Yeah, are you trying to knock me out here I mean it's like It was an illegal establishment. It was it was a church and it was a pretty tricky Pretty tricky logistics endeavor to get the thing in there and we and to be clear we did not plug the rack in Um, and it did we took what we called the showcase rack which got mechanical blanks and is a little bit like less weight um But um, it turned out well, it was great I was I mean, I think we were all like a little bit skeptical It's like what do you we want to have a whole rack there? It's not small It's big and it's going to go to a church and it's like the the one in particular So this this particular investor they work very closely with cbc's corporate venture capital teams And so the folks that attend their annual investor conference are almost all fortune 500 companies which is definitely a demographic that is good to have exposure to The product that we're building and so that they they made the the case very very easily and getting it in and out was a little tricky, but Uh, and I don't think we will find the rack in as luxurious a location ever again It was It was impressive it was impressive kind of uh, it was like surrounded by like tapestries or you know, it was very uh velvet And it could you had that like that afternoon like going and it was definitely there was a there was a little bit of uh It's a bit of holiness around that. I gotta say a holy rack um But so at and the kind of the reason I bring all this up is because at the event Um, there was you know at these events you get a lot of like very buttoned down kind of corporate venture capitalists And then there's always a couple, uh, a couple of wild cards in the deck and One of the the wild cards was someone who's run a consumer brand that you've heard of. Um, and um, but was uh was uh a bit flamboyant the right word so If if there were one person at this conference dressed to go to a club, it was this guy In in every way imaginable in every way imaginable Like if you put that in your head, you basically have the right visual and so like a little bit of a extraordinarily caffeinated Extraordinarily caffeinated maybe generous like not I mean at least caffeinated caffeinated across the block. That's right. Um, and so I was like kind of waiting to for food or whatever and uh, and I ended up basically talking to this guy and i'm thinking like man. This guy is not there's just this guy's he's a good He's a direct to consumer Person who looks like he just got kicked out of the club. I mean, it's like this is not going to be And uh, it turns out like do not judge a book by its cover because I kind of got half a sentence into what oxide's doing And he's like god. Oh, man. I got so many memories dealing with nicks and dealing with this And you order a cable you get the wrong cable You get different wrong crossover and everyone every vendors pointing fingers at one another and you're just trying to get the software up and like Where am I right now? And by the way, by the way just to set that I mean the audience generally at this event if you pulled 10 of them and asked them just what like AWS is or what cloud computing is would blank stereo. I did totally Yeah, so the the fact that this guy was like I had had pain with nicks in a data center in a data center It was definitely, uh, let alone cable. So he's definitely surprised. I'm like, well, I um, so I start explaining oxide obviously And he's like terrible name. You have to change the name I'm, like, okay. Well, okay. Um, okay. We're not gonna we're not gonna do that That one's off the table like what's uh, And i'm like actually let me go show you the rack And so I took him kind of back into the church and showed him the rack um, and uh, and you know, he it was really interesting because this guy was uh caffeinated plus plus um was uh, very um had technical experience doing this but also really understood kind of like you know what the differentiators would be and can if he He really felt like I had I had undersold it apparently, uh to him he was uh And and readily acknowledged that the branding was like that was like, yeah, this looks sick. This is good Um, but he in particular he got to the back of the rack and he's looking at the the cabled backplane And he's just like are you kidding me? Look at this thing. Like this is this is you know, he's really kind of uh, very exuberant um, which is great, um, and So IE as he's kind of going through the things that were just mind-bending to him And so like in particular he's talking about the cabling and the boxes like how many boxes does this thing ship? I don't know it ships in One large crate. It's like you gotta say that on your website. That's gotta be that topic, right? um So then uh, the blog entry was in no small part Uh inspired by kind of uh caffeinated plus plus this is actually uh later in the conversation. He would later uh, uh reveal that he he may have been on things additional to caffeine, um, and uh They have offered us to indulge No, thank you, uh, yeah, no, thank you on that one, but the um, but thank you very much for I just dropped a picture Oh, did you? Oh nice. You did. Yeah a long shot a long shot. That is I know It does look photoshopped. It does. It is not photoshopped Yeah, it looks extraordinarily photoshopped that is an actual picture taken Uh, and then yeah, there there were some other some other photos that came across In that setting that were you know look prom worthy because of the back background and now adam's thinking like oh great Now I have to like make this the image of the podcast or you got to make me go in and do video editing It's the image. I got it already. I'm also trimming this out. So we're fine Yeah, yeah, there you go. We're gonna trim out this whole discussion never happened um, so that was kind of the the motivator for getting into um, you know as we're because I think that realizing that we needed to speak about this really from that perspective of And by the way, it should be stated. This was a this person is a pretty good marketer Yeah, for sure. Absolutely. They have people spending hundreds of millions of dollars on canned water Right of which we may be drinking right now, right? It's good. It's good canned water Good canned water, but uh, he had some good suggestions. He had some very good suggestions and I think that what and just in general I think the just uh capturing and what we tried to capture in the blog entry was The the what we have heard over and over again from folks. Um who when you see this, this is not What you are accustomed to this does not look like a a stack of commodity gear Um, this looks very different and it looks very different in a bunch of different ways. And so we kind of tried to capture um a bunch of that, um and talked about things like the the the cabling and the fans And the fact that it is not something that you're cobbling together in the software But it's like I also feel that that you know, try as we might we can't capture the whole thing So we're trying to capture some of those those first impressions. I think they told me to keep it to a thousand words I think I definitely did not do that, but it wasn't you know, it's only over by stuff. Well, that's just exactly close um But so that was the the kind of the genesis of the um of the blog entry, um, and the uh, yeah I I actually think so there are people in the chat being like hold on the you let me just get this straight you brian cantrell are complaining about someone being excitable and Seemingly and it's like yes, that is exactly. Yes you're just gonna have to like take me at my word here that This is I think and steve you were talking to both of us at the same time I think you can confirm that he was a faster talker. Yes. It was more amped. Yes. Okay. Thank you and absolutely zero off switch So there's oh, what are we talking about me or him right now? No, he I mean he did not get there was not a room to get a word in edgewise and there were folks there that definitely were you know, kind of trying to break in and No, you're just Yeah, it was uh, so yeah, maybe this is what it's like talking to me, but it's like hey look it's exhausting Okay, i've got I you all have my my sympathy. It's it is uh, it was a lot But he was also right about a lot of things. So um, you know, so it's fun to get it out there so we Had the blog entry written and uh, so that's gonna we're gonna turn the key on that one at 3 a.m. Pacific. Um, I Like we have folks in the uk that easily could turn said key. Yeah Yeah, it would be later in the day Yes Instead I think you were up at I was 3 a.m That sounds like a criticism. No, just an observation I I was like look if I wake up naturally I wake up and I just happened to wake up at 2 35 I don't know my you know, my body knew my body knew it was time I was uh, um, yeah, I don't know. I got some like yeah some hacker news like I don't know some hormones or something um the uh, so got that thing kicked at um at three got the blog entry up and I I mean, so steve is so clever. Do you because I do not submit any of our stories to hackers I I always wanted that to happen kind of organically Is that your I mean as someone who's a top 25? I absolutely post everything that I believe should be posted as soon as oh, do you really? Yeah, well, it's not not as soon as you see it I think that the correct time to post in general is at 9 a.m Pst And that is because you get the people who are just showing up to the office Who don't want to start doing any work and they're drinking coffee and they're reading hacker news And you get the people on the east coast who are at lunch who do not want to do any work and are looking at hacker news And I think that okay So generally you get the most chance of being upvoted to the front page of being uploaded to the front and and so Just for those of you who do not spend as much time Your lives online you're living much better lives than steve and I are Um, so with I mean with hacker news, it's like you don't really control it, right? I mean people it's going to get upvoted whether if it's kind of compelling Um, if it is, um, I and I have had this happen where I submit things that I think are super interesting That get zero attention and then they if they kind of don't survive in that kind of that new bin um, they uh, they will just never see any more close to the front page and on some of those they will actually um, The folks at hacker news will say like hey, this is really technically interesting. This is important the audience So we will later give this an artificial boost which is great. So that's always an option on stuff like this But yeah, steve generally i'm with you like 9 a.m. Pacific is a good time to do things I would say 3 a.m. Pacific is not the time I would pick So yeah, I actually so I had asked on our pull request on the draft of the blog post I was like, oh by the way, the way this is going out and ben said oh 3 a.m Pacific time on the 26th and I was like, oh cool because like ben's a funny guy And uh, he makes jokes sometimes and I thought that he was like Joking about it going out at 3 a.m It's like oh, that's really funny and I just didn't actually follow up and then like I wake up and I was like Oh, man, i'm still pretty sleepy. And then i'm like, uh, let me check the computer and I was like wait, holy crap It's already there. There's a bunch of and then I was like, oh ben wasn't joking Actually, it's been up for three hours and like immediately got involved. But yes, that was not talking. Yeah, it's very funny. Yeah Yeah, so the so, um again, I didn't submit it. Um, and uh, but you know As we're kind of getting everything else out there because you've got to get like all the social posts out there. So i'm posting to Twitter and i'm realizing that like, you know what? I don't have the blue sky creds for the oxide account Yeah, and I kind of don't care. I think this is like oh blue sky This is like, you know, you know Like your true social network is the one you check after an earthquake And the fact that like I couldn't even be bothered to i'm like, sorry blue sky, I don't know I i'll i'll deal with you later. This guy's gonna open up completely to the public. It's the problem with this guy. It's still uh, i'm Um, i'm still optimistic about blue sky. Um, but I did get the the post up certainly on on twitter Uh and on mastodon, I mean, I think I think it's super interesting and steve I don't know if you found this for your stuff as well Uh for tech audiences broadly have moved to mastodon and the engagement on mastodon is better it's like you almost want I mean we um So really important to get up on mastodon And then it is really important to get it up on what is rapidly becoming the third most important social network I cannot believe say this linkedin LinkedIn is like I feel like the big story about The the fact that musk has flown twitter into the side of the mountain is that linkedin has become actually way More relevant the content is better. The engagement is good They don't have I I mean and now that said like linkedin has got all the same problems that linkedin has always had Yes, and i'm like Everybody that came up to our booth was like hey Can I connect with you on linkedin and like the first time it happened? I like laughed and I was like, oh, yeah Sorry, I don't like have that and the second time it happened. I was like What the fuck is up with linkedin? And then the third time I was like am I gonna have to re-sign up for linkedin? Like why is everybody so interested in linkedin now? um, but yeah Well, and I think it is because it is beginning to serve, you know twitter was serving this kind of professional capacity for a lot of folks and I think it is uh LinkedIn is and mastodon kind of between the two of them Anyway, so I like I mean I get this linkedin post up there for gotta get it Make sure post that and we actually election a lot of great engagement on on linkedin facebook for professionals That is a good. It's a good descriptor. Oh, it it for sure is and it's With all the trash all the trash Right. That's right Oh good No, just that it like it sadly Is still an easy way for your extended friends and family to keep up with things that are happening when you've got kids like it's easy to have a vector where it doesn't all have to be telephone calls and texts and Facebook's terrible, but it serves that purpose And at least linkedin similarly is this place where you've got, you know, your your connections from Your professional career and it is a place where you can update people and I think and then the quality of engagement has gone up as twitter as because you have Uh, and I know steve right now. You can't see his eyes, but he's just like I I hear your words But I can't actually process that it actually is the the engagement is is better because I think it um Anyway, let's replace twitter So we get up on linkedin a bunch of good engagement and by the time I get all those up there and I like Spend I don't know 10 seconds trying to find the blue sky credentials and i'm not able to do it Um, I was like, oh my god, this is already on hacker news and it's the number two story And i'm like, wow, okay, I guess we're coming in hot there and then I like click reload and it's the number one story I'm like, all right. Well, here it is. It's like at this point, you know, 3 30 in the morning pacific And I want to go back to bed. I do not want to sit here and uh, but for those of you I'm sure anytime you got you know, the internet talking about something you've been a part of It is hard to not you know Click reload on it. It's hard not to stare at it. Um, and it's also Like for people who don't spend their lives posting on hacker news. First of all, congratulations And second of all, the initial comments can really set the tone for everything else, and so it's semi-critical to shape the conversation in the way that you want it to go early on in the thread's history, because otherwise it could go to literally anything. Yeah, I think you're totally right, Steven. I think you and I have both seen this, where if somebody sets the tone poorly, then it's going to attract a lot of negativity, and people just aren't going to engage with it, because often if people actually want to engage with something positive about it, or they've got questions, or they want to get technical answers, and they can just see that it's like, all right, this is just a mess in the comments, they'll just walk away from it. So it's really important to get an initial comment out there that people can latch onto and upvote if they so feel it. So you really want to, as Janet is saying in the chat, you've got to set those thread vibes early. But look at the thread vibes, you're good. I'm like, this is all good. This is all basically tacky. Nothing is too far off the rails here, and whenever you've got someone saying something nutty, you've got someone else coming in and answering them. So it's like, all right, this is good. And I'm like, all right, I'm going to go back to bed, actually, which is not something I would have thought that I was biologically capable of doing. It's like, I am actually going to sleep with us as the number one story in Hacker News. Being up at 3 a.m., mildly surprising, going back to bed, extremely surprising. So surprising that, I don't know, did it really happen that way? Maybe. Right, exactly. Maybe not. Yeah, as far as you know. That's right. Yes. Look, I may have just been clicking reload and keeping a low profile, telling everyone that I went to sleep. But it was good. So the comments are good. And so I think we want to get into the... Yeah, that's right. Someone was saying in the chat, like, okay, he actually is aging. I assure you, I am aging. And if you would like, I can do a... My children would be happy to point out all the elements in which I'm aging. My 19-year-old cannot run me, which is very, I don't know, adamant about that. That's tough. No. Better not be hanging out with him in a bear anytime soon, or you're going to be in trouble. That's exactly right. I know. I need to make sure that I take my younger children with me, who I can still outrun, unfortunately. But so there was a bunch of questions in there. I think that we... And then a bunch of news stories. So I think we want to kind of... The news stories, I think, were less surprising. I mean, I think that they were... And especially folks who have been following Oxide, I don't think you're going to find any big reveals. One thing I did want to... I thought maybe we could go through some of the big themes on the questions and things that we did not. So when we first shipped in July, at the end of June, July, we did a podcast where we kind of answered questions. And so I would definitely refer people to that. I mean, because we answered a bunch of questions there. I don't want to go through and kind of... Because there were certainly some of the same questions. But there are also some new ones and some important ones. One of the things that I was surprised by, and I would love to get everyone else's take on it, I was definitely surprised by the number of people who were like, this is not cloud. Cloud has to be rented. That's part of the definition of cloud. And I think I did see this comment before I went to bed. Maybe this is where I was able to send me to bed with some confidence, is someone had quoted the NIST definition for cloud. And this is usually like, oh man, I hope NIST has got the right definition here. I hope. I was probably a little bit like, oh, maybe we don't have this link to go to bed. Exactly. And the NIST definition, actually, as with many things, NIST is really good, actually. The NIST definition of cloud computing is like, right on. Spot on. Spot on. I mean, a really good definition. You have it? Yeah. Adam dropped it in the channel. And it is just, yeah, cloud computing is a model for enabling convenient, on-demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. That is a, so- Well done, NIST. Well done, NIST. And whatever technologist, I mean, obviously there are technologists either at NIST or friends of NIST that help write that definition. And I know you may feel that your job is thankless. We'd like to thank you here at HockSci because, I mean, I thought that was a really good definition. What'd you think about that? I think it's really good. I think I'm tempted to start a talk with NIST defines cloud computing to be. I was going to joke about a best man speech that starts at a wedding reception. NIST defines love. But I think that was really good. So that was great. And then, so that comment, that kind of angle of like, no, no, this is not cloud, cloud has to be rented. That just got absolutely launched into oblivion. It was really great. And then there was one of the comments in reply to this, it's like, yeah, sorry, you're just going to get downvoted here because you're just wrong. Nobody agrees with your definition basically. So that was good. Maybe that's, I think that was the lullaby that I needed. There you go. Off to bed for me. This is great. So reception was good. Do you want to get into some of, I pulled out some of the comments. Do you want to get into some of those from Hacker News? Well, so one of the, I do want to just tack directly into one of the themes that I, because I think that something we saw a decent amount was like, hey, how much does it cost? Like the fact that like their pricing is contact sales is like, oh, okay. Yeah. I've seen this before. When that came up with reporters as well. Yes. Obviously reporters want to get as much tangible information that they can go right on. And so we had that question also posed as we were doing the interview process. Yes. And one reporter in particular was like asking us about pricing and you gave them the answer. That's the honest answer, which is, it depends. It depends. People do not want to hear the, it depends answer. Like, oh, it depends. I see. You're being a basement. I got you. Usually that means it depends on how much money you have. Like how big is your budget? That's how much the price is. Exactly. What's your timeline? What's your budget? Right. No, it depends because while this is a rack scale computer, there are things that are variable. So one is the number of sleds that you have in this rack scale computer. You can buy it complete with 32 sleds. You can initially install it with fewer than 32 sleds. And we've had customers that have needed to do that for reasons like we want to get this in under a certain power footprint. And then we want to expand it as we see how much we're using, or we have a budget limitation that is going to expire. And so we want to get it in and then be able to grow it from there. And so in that case, when someone is getting it in for, you know, fewer sleds than 32, the, the system itself can come in below a million dollars, which is what I, what I told them. Right. It is what you told him. He didn't print it. He didn't print it. He wasn't very interested in that. I guess he's like, no, because, and then I said, and it can be above a million dollars if you're, if you're configured a certain way, cause you also have a decision you can make about how much DRAM, how much memory you want per sled. We've got 16 dim channels. You can have half populated or fully populated. So you can have half terabyte or terabyte of DRAM per sled. And so you've got these kind of two dials and he, yeah, he was definitely not interested in the nuance. He's like, what is the price? Right. Right. And so that was, I, and I, I, I'm definitely getting from the chat. We will never again say contact sales. Obviously contact sales is clearly the, all the antibodies come out. We'll, we'll need to find some, some synonym for reaching out to sales so we can give you, I don't know that. Yeah, that it's tough. It's very fair. It's a fair criticism. So the I, I think that and I think people, you know, you want to kind of know what the price is, but it, which is important. And you know, we obviously need to have a little, a little configurator on there so you can kind of configure it and you can then see what the, the, and get an actual quote, which I think is important. I think that the well, especially because what folks want to do is they want to be able to kind of put together a comparison. They want to put together a comparison. Totally reasonable. You know, right now you can go to Dell's website and you can configure a server that has the same components. So you would put in like 10, 3.4 terabyte and VME drives and 16 dim slot, like 16 dims of 64 gig memory. I'd like the way you are instructing the future listener to be like, did you get that 10? No, no, no, not five. You need to put in 10. If you want to get the accurate price, 16, get the numbers right. They find that you can't go higher than eight, but you and then, you know, an AMD processor. And if you're doing that, and then if you're adding things like, for example, VMware, it will accurately flag you that you need not one VMware license. You need two if you're selected, but anyway, it'll error out and then you can kind of correct that and it will give you your, your, your final total. And I think it's, it's a pretty eyeopening experience because it just helps folks get a good sense of what these things cost. And we, I think it's fair to say we had a reporter who made it, who were named nameless, who made a bit of a mistake and didn't do exactly what you prescribed and instead got a quote for 32 CPUs. When you say CPUs, you mean like a server with 32 CPUs? Okay. No, I mean, 32 CPUs, unsocketed CPUs. Like a bag of chips. Yeah. Yes. A bag of chips. Right. I mean, 32, it's like, actually you'd be very, you might be surprised to learn that, that what you just ordered can actually go into a backpack. It's actually, it's a heavy backpack, but it's basically a backpack. And the, the number that you get is of course a lower number because you have actually, you've, you've priced out a car against the cost of the tires. So we, we did correct that. We could, we, we, we encouraged the reporter to do and maybe walk the reporter through the way to actually get a profit. There are fewer and fewer people today that want to then make their own PCB and do their own assembly and buy a bag of network cards and DRAM. And so, yeah, it, it, but again, we got it corrected, got it corrected, got to a good spot, which is important. And in fact, I've got that obviously in configured on, um, properly, it got, got a kind of a proper price comparison. And I think that, um, anyone that does a proper price comparison is going to discover like, wow, okay, actually, this is actually very price competitive. This is not, um, so we, we, we did not want to be, you know, we're a very transparent company. And I think that we can certainly understand how people felt we were being evasive by contact sales, but that is not what we were trying to do at all. No, it used to be, I think that the, the original link was sign up for a spot in line and maybe we should revert to that. Yeah. Yeah, yeah, yeah. Yeah. Or, or just the, I know, or contact us or yeah, there's, there's plenty of better ways to, to, uh, we got to find a way to price that anyway, the, uh, we, again, we're not trying to be evasive with the pricing. So we'll, um, no, not at all because again, it's, it, there's a bunch of public information about like, what does it cost today to put the equivalent amount of CPU DRAM storage into a rack, a commercial rack out there, and then, uh, warranty it for a couple of years and then get soft pay for software to, to be able to, to manage it and organize it. And, uh, as, as we had customers tell us early on folks that, that were running data center infrastructure, it's like, yeah, a rack full of gear with all the software licensing over three years costs us, you know, I think the, the, the last one we heard from someone was like 2.1 million bucks. Right. And so we, yeah, we're, we're going to get the, the numbers out there more broadly. And with this particular reporter, we had just shared, like, can be just under a million can be over a million and depends on the configuration. Yeah. And, and I think what you can, uh, questions in the chat of like, Hey, how hard would it be for you all to do a configurator? And the answer is not hard, but that's something we can go to. So, no, and we, I mean, we, we, we did a bunch of the, the, the groundwork on that because you can imagine when you're going through things like a fundraise, uh, investors want to understand, well, what is, what does this look like compared to someone running a bunch of infrastructure on AWS EC2? Yeah, right. And so we went through and, you know, there's a lot of things you need to do to do a fair and accurate comparison. You, you start with pick an arbitrary EC2 instance or a couple of them, and then figure out how you could pack that into some subset of the capacity in the rack. Then you have to fairly do some balance of on-demand and reserve pricing, which is a total, I mean, that is a bit of a trick, right? Because there's a big, big difference between on-demand and reserve pricing. And so, you know, this is where, you know, all kudos to AWS and their ability to execute, but the fact that that reserve pricing is so much cheaper, it shows you that there's real hardware behind it. It's like, Amazon needs to buy stuff to run this stuff on and they need, and they're going to give you, if you want a true, completely elastic, I'm going to give you zero forward visibility to how much compute I'm going to use. And I want to use as much as I, as I possibly can. One, you're going to find that there are actual real limits. And you go to permission, you're not going to be provisioning 10,000 VMs. You're going to be provisioning quite a bit less than that before you get kind of a, uh, you need to call us. Um, but you will also be absolutely paying for that. Um, and you'll be paying a lot for it. So that, uh, and thank you very much for those in the chat are helping us brainstorm to be transparent about our pricing. So, and, and I like folks like, don't forget like the cost of the power, you know, which is true. So another thing that kind of came up, um, and I don't mind if you saw that something I definitely went back and forth on a little bit on the hacker's comments of, uh, in a, in a very good way, but about, um, about the fans, um, and about the noise, um, and why the noise is actually representative of much of much bigger things that it's actually like, we weren't actually trying to design this to be, um, for its acoustics. Um, that was an artifact of the way we'd built this thing and, and took a clean sheet of paper. Yeah. The fans are a, are representative of what I think are some, a part of the value proposition that we don't talk enough about that. We do talk about the fans and I know you love your 80 million millimeter fans, but the impact to power consumption is pretty wild. I mean, really significant. It is. Um, and the, and right now, and I think that the, the fans, okay, look, I know people in the chat are being like, Oh my, Oh my God, the fans, right? Oh God. Well, the Senator from 80 millimeter fans, please yield. Um, so, uh, you know, the fans we've not been talking enough about are the fans on the AC power supplies on the one user to use. I feel like those fans, I have not, we have back in 10 minutes. If you want to skip, okay, we're done. So, wow. Okay. Anyway, that's that, that's the end of that. No, the, these, because you have these little teensy tiny fans in the AC power supplies and those things are also screaming. Uh, and this is where you get to the, and actually we did not factor that into our calculus for, I mean, we just kind of knew we were going to use a DC bus bar, but we did the calculus anyway. But I think that the, the power consumption for the fans in the power supply is something you've got zero visibility to. I don't know every single power supply that like an AC power supply that you're going to put in a commodity server. That's going to give you that. All right, everybody, that was a fast 10 minutes. So how significant is that? It's good. So how big, I mean, how, how much does the, do these fans draw? Like what's the power difference? It's only order of 20 to 30% of the rack is the, I mean, so we are, and so we say 2%, it's actually not 2% say under 2%, 2% is super conservative. It is like pretty far under 2%. And here we go again, but it is, but I mean, so these one, you fans can take up the, the combined fans, 20% of the power of the times and number of racks. This ends up being a huge, huge, huge inefficiency and getting that from 20 plus percent to under 2% just means way more density. That's right. I think, so, so see, this is an important point you're making because it's like, people like, well, I don't care about my power bill that much. It's like, that may be true, but you actually do care about the depth. You actually do care about the amount of compute you can put in per unit, per, per square foot, per tile in your DC. And that's what this goes to. It goes to density. This all goes back into compute and you want it to be used for compute and networking. Another, another question that came up, and oh, I should say, we are going to be doing a kind of a series because someone was asking about, you guys need to do a, a blog post on the fan power. I can't tell if that's like a, so I don't have to read it as opposed to like, listen to it. Um, I can't, this is kind of like when I tell, like, I tell my mom that she should write a letter to the municipal authority that she's so upset about. Um, it's like, um, so I'm not, I mean, I'm not sure an oxide only fans that just post pictures of the fans would do pretty well. I'm just saying, still, Oh man, social networks. Well, wow. Pandora's box has been opened. I, that is so dangerous. I, you know, yeah, exactly. Some ideas I should not have heard. Um, yeah, that's Steve. I love, have you, have you, you didn't sit on that for health? Yeah. You've been sitting on that one. I feel like that joke has been made several times, but maybe not in this call anyway, but like, it's fine. It's fine. Anyway. Um, so, um, yeah, that, well, okay. I'm just kind of blown. Yeah. I need, I need to recover from the only fans. Um, the, uh, we're going to have a, uh, a series of blog posts and we actually want to do episodes of oxide and friends where I go into some of the stuff in detail. Um, we'll, we'll, we'll save the fans for just the blog posts, but we want to talk about a bunch of different, uh, elements of the rack, um, and go into detail there. So, so where, and we obviously got an idea of the detail that we want to hit, but if people want to see particular details, we'd love to hear from you, make sure to get an episode teed up, um, and make sure to, to get a discussion on it. So, um, and, and a blog post. Um, so Adam, what were some of the other big themes that you. Yeah. Some of the, some of the other themes, uh, tacking into value proposition. I think that there were a bunch of commenters of the form, Hey, can't I just get all this stuff from super micro and load it up with open stack and do it all myself. And then a bunch of other folks saying, let me know how that's working out for you. Uh, and, uh, how do you get all this thing working together? And you've got six different vendors in the mix. And when there's a problem, how does that work out? And even further than, let me know how that works out for you. But you had folks that were going in and saying, uh, let me tell you my story and then telling their own stories about unboxing and assembling and integrating and troubleshooting. And back to the comment of this, this person that was the VC event. It's like, you've done all this and then you find that you have the wrong rail, one wrong set of rails sets you back another five weeks. And even once you get to that point of integrating all the five vendors together, then, Adam, to your point, folks commenting in there like, well, then what are you going to do when you have a problem? Who are you calling? And which of the vendors are you finally pinning down that are pointing at the other one? And I think it was great for us not having to chime in and others chiming in. Others chiming in. I did like, there was someone in the Hacker News comments who, speaking about Dell in particular, said that, and Ryan is quoting this, that Dell is a single vendor that will diagnose and fix all of your hardware issues. It's like, full sentence, no further qualifiers. I mean, this is a troll in the oldest sense. You could practically hear the guffaws and the replies to that. Well, I love the fact that Steve Klobnik, you said that you were with a friend of yours or an acquaintance of yours who has deployed large amounts of Dell at a social event and you're reading him Hacker News comments just to get him guffawing. Yeah, yeah. One of my neighbors works for the city and they have a pretty large deployment of VxRail, apparently, in whatever his department is. And yeah, I was just like, yeah, dealing with that support is absolutely terrible. Right. It's not great. And you get these fingers pointing at one another. And I think that with OpenStack, OpenStack's not a product, which is part of its problem. And back in the day, as more and more companies were throwing their lot in with OpenStack, one of the questions you get is like, well, how are you going to go compete with all these hundreds of companies now that are working on OpenStack? And it's like, can you hear yourself? I mean, the last time that hundreds of companies cooperated on something and had a successful result is like World War II. I just don't know. I mean, you can't have one company do something without getting in its own way, let alone like, oh, no, don't worry, we have many different organizations that are like, okay, yeah. I really appreciated how much folks got the value proposition of one entity responsible for this whole thing from networking and CPU and virtualization and all this stuff. Because I also think that that's a huge part of why we built it the way we built it. Why we are running the operating system we're running, why we're building our own service processor, our own embedded OS. It all comes from that desire to support this whole thing, this whole box full of lots of heterogeneous components that we are integrating. That's right, Adam. And I think that every one of those decisions was happening not because we were like electing to do something on our own or go our own way, but because we had had specific concrete experience where the inability to kind of control both sides of this led to a suboptimal, to put it mildly, experience. Well, and I think the thing that was great to hear come through in some of those responses in Hacker News was a vendor that is saying, hey, this vendor will support fill in the blank their product. And folks being like, yeah, well, if I could have diagnosed that it lived in their product already, wouldn't that have been nice? And instead being in a position where someone was saying, whatever issue I have sitting above this entire stack, I can throw an oxide. And that's true. It could be an issue in your database, could be an issue wherever it starts from. We're going to go run that to ground, Adam, to your point, because we can, because we control the whole stack. And because we've been on the other side of the table in that helpless position where people are kind of bouncing you all over the place, we will. We're going to take ownership of every one of those issues. And it's not as sexy as a speed or a feed, but it's folks that have actually run infrastructure on-prem. Hearing them come through and telling those stories, it means as much as any product feature you can have. And it's really, really important to us. I think it does kind of hit on two other themes that kind of came up in the Hacker News comments. One of it, and this already also came up in the chat. Did you all forget to make the Helios repo public? And the answer to that is basically yes. What is Helios? Sorry about that. What's that? Do you want to describe what Helios is? Yeah, Helios is, so it's our Elumos derivative. The Elumos derivative itself is actually all public. That's in the St. Louis branch of our Elumos fork. So that is actually, the meat there is all actually public. And as I kind of was replying to that on the Hacker News comments, someone else was like, how was I supposed to find that? I'm like, yeah, that's not on you. You were not supposed to find that. That was like, it's, so sorry about that. But we'll be rectifying that, which just needs to be, there's a small amount of cleanup that needs to be done. We do need to add a license in there before we, but the actual Helios repo really just contains the things that kind of point to these other repos. It's not actually, it kind of pulls it together and builds it. But the, it is very important for us and a big differentiator for us is the fact that it's all open. So from top to bottom, we really have wanted from the beginning to get it all out there. And one of the things that actually, you know, something that people didn't ask us about, that I think maybe a question we kind of, what's that Steve? Oh, nope. Sorry. You're in the middle of the thing. I'm trying to interrupt you. St. Louis is actually also not public. So saying that it's on a branch on St. Louis means that you could find it. Like that's also not open. Oh, okay. Well, okay. Yeah. So we'll rectify that. Yeah, exactly. But you know, the, one of the questions that we would ask of ourselves is like, Hey, what have you learned from your first couple of customers? Like what has been the experience been and how have things, you know, you've got some kind of some theories as you are getting this product in the market. And how did those theories work out? And I would say that we've got a lot of proof points of like, yeah, we've got, you know, we were having one tricky problem with a customer just with the, the necessary kind of assert generation that was not actually like it was at, I mean, if you want to get super technical about it, wasn't necessarily an oxide problem, but like was definitely a problem, like getting, like we needed to pull this together. You had to get it up and running. And you know, the, the, the line that we heard was like, you know, with, with VMware, I feel like I would be kind of like on my own right now, even though it's like, no, no, we're not going to be, it's really important, not just on my own. It was like, while you all were troubleshooting this, which to be clear, this is because we integrate into someone's identity and auth provider. So we don't try to replace that. We leverage like the SAML provider that they, or the fee that they use for identity and auth. And so they have to give us certificates. And in the, in the process of getting that up, we had them on our troubleshooting call. They're like, it's so refreshing that I was allowed to just sit back and kind of listen to how you're working through this problem with VMware, I would have been like in an SDK and they would have disappeared or I would have been, you know, sent to a, you know, online support system. And it just, you know, weeks later, maybe I emerged from something and it was, it was good to hear. And, and having the ability for folks to, for that, that is open source, which we are quickly resolving to get all of it out there. Another comment was they, we were talking with this customer about, they had some priority work that they wanted us focused on. And then there was in another issue that was low priority. And we just were updating them like, Hey, by the way, you know, we're still working on this other thing too. And they're like, Oh, I know I'm watching the bugs. I'm watching the issue right now. Yeah, exactly. So you bumped that yesterday and then said, like, it's such, it's so nice that I can kind of self service in that manner and see what you, what you guys are doing because everything's open source. So that's been, I think, really validating. And I think we've also had folks that have been like, Oh yeah, actually, I pulled over a clone of this thing and I found, you know, an issue with this or my health. So that's been, it's been, I think, really vindicating and, and, and validating. One of my favorites was our customer was trying to run our CLI. I've downloaded a binary on some different version of Linux than the CLI had been built on. And so they just cloned the repo and rebuilt it and they had it, which is not obviously the best user experience, but the fact that everything is out there means they are empowered to do those things, which is great. Yeah. And I think all of this is to like, is it's our empathy with folks that are running this thing. It's like, we, you know, we want to treat you the way we want to be treated. So that's been so far. And then we made a bunch of specific technical improvements to that have been really exciting and to really improve that install time and really getting to the point where, I mean, I think we're awfully close to this vision of being able to get this rack rack in powered on and provisioning VMs within hours, you know, we're not that far off. We were disappointed and we would share the disappointment with the customers like, ah, you know, two and a half days, right? They're like, this is exponentially faster than any other installation and standup we would do. And then of course we're like, yeah, no, we're trying to get it to one day. We want to get to a couple hours. Exactly. And the end part of the blocker there is like there is obviously a super important and complicated, frankly, interface in with the customer's network. And so there's a lot that can go wrong. So, um, the, um, one of the questions that was asked, um, just in the, in the chat here, uh, if you had to build and ship products again from scratch, what would you do differently? Um, good question. It's a really good question. And it's really hard to, I mean, I, I don't know. Um, I feel that we book our chamber time a little earlier for compliance. That's true. Yeah. Hire our EEs a little earlier. I don't know. I mean, I don't think there's any art, anything glaring architecturally that we regret or that we could have done differently based on what we knew. There is some super small stuff, but a lot of that stuff too, we actually got right on, on later iterations and it would have been kind of, I guess, nicer to be able to, but I don't think it's really fair when you're going back and kind of thinking about that. I don't think you're allowed to like think omniscience. Uh, I, I, I, we, we would have, I mean, I mean, like we would have not gone down the path of using third party stuff because we did a lot of investigation. And I mean, if we, again, if we could be on depression, we can go back and know that this is the wrong path that we have to do this thing. You know, you've got to go down those paths. I mean, I remember the, the, you know, and that was a really tough time when you, um, with, you know, I remember like 2020 and it's the pandemic and everything else. And we're having like these kind of endless calls with prospective partners. And then like, you would have a call that was a disaster. It was like, we definitely don't want to do work with this person ever, this company. And I remember Arian a kind of, because we would do these calls after you remember those calls to do these like debrief calls that you talk about therapy where you'd be on one of these calls. It's like, Oh my God, that was like, I, we had like, okay. Go to meeting is terrible. This is, I, and I would like to say we had someone who had misconfigured go to meeting to be even worse. I love your hot takes LinkedIn. Great. Go to meeting. Terrible. That's right. That's right. Yes, exactly. I feel like these are, these are my hot takes circa 2005. Um, so the, but this is, I don't know if you were on this meeting, but you would go to the only way to unmute yourself was to use the keypad. And so you have to like star eight to unmute yourself. And then it would be like, you are unmuted. It's like, well, I'm also like, okay. But like the person I was going to interrupt or whatever, that's like the time is now passed. So, uh, it was, um, but I remember that like, you'd get off these calls and like, Oh my God, what a waste of time it was. And Arian was, I just remember him vividly saying, you know what, that was important. We had to do that because we had to, like, you could not have said that. Like these folks actually do make products that are kind of viable for us. And we didn't know they were turkeys until we got them on the phone. So it's like, we actually had to do that. We can cross them off the list. We never need to talk to them again, but we had to spend that three hours or two hours, whatever it was. The other one I could say is like, you know, knowing that we absolutely could not build this off a reference design from a PCB. The other thing I would like, that's another one where it's like living that pain of that, of that early start and then having to go kind of start from scratch again, not off a reference design was super informative on the design we did. So, you know, it's another one where it's like, I think that this is actually a really important point you're making Steve in that the, and I'm sorry to say actually there, the, uh, yeah, I don't mean to sound surprised, but just that when you spend time going down, what turns out to be the wrong path. And then you get on the right path. It's hard to lament the time spent on the wrong path because that time gave you conviction about being on the right path. And there are so many of these things where it's like, yeah, we do not actually have a second. I mean, we do not wonder like, boy, should we have used open Titan? Boy, I wonder. It's like, nope. We definitely, you know, we know that we should not have done that. And we, but because we went down that path for long enough to know that that was not going to be viable. Hey, but didn't they just tape that thing out? I mean, come on. That's right. It could almost be shipping. That this is the hardware root of trust that we considered very, very seriously, but we're worried that it might not ship in time. And boy, was that right? Yeah, that's right. Um, what a question in the chat, like, would you still do hardware virtualization? Um, if you're doing it over again, absolutely positively. No question. Yeah. There's, I mean, the hardware virtualization, you have to be just in a multi-tenant cloud. And obviously I think, and there was like some people I think feel crestfallen because like, look, I've got some talks from back in the day, talking about container-based virtualization and lamenting this kind of the fact that we are virtualizing twice in the stack. I still believe that I still believe all that, but I also, uh, the, that hardware virtualized interface has been made, first of all, it's made so fast by the microprocessors and that's the interface that we've all settled on, um, for cloud computing. And it's, um, that's just because I think the part of what you said too is really important though, which is like multi-tenant, which you may be like, wait, this isn't a public cloud. This is a private cloud. But like with our abilities to scope like silos between different parts of your organization, like you actually do need to treat your internal stuff as though it is multi-tenant because like it is, even if your organization does own it, it's like only things that are run by your company, but that doesn't mean your company is not like 12 companies of trench coat. Right. So like it is important to treat it that way, even if like you may not otherwise think so. That's it. And I think that, that on hardware bird in particular, the reason that that is required is because it does allow for it's, it's this very well understood interface where you are allowing for a lot of flexibility at the side of that interface. So it's not just, uh, the, it's not just Linux. It's so you can run windows, so you can run your own variant of Linux. We've got like lots of variants of Linux out there. I'm definitely learning way more about old distros of, of Linux than I, than I thought I would. So, um, it's hardware bird is important. So, um, the, uh, and in terms of the overhead, um, yeah, I mean, yeah, I think that the overhead there's still, um, there are still challenges certainly in terms of things like we do not have a provision DRAM, we don't have a provision CPU, but, um, the, uh, yeah, block storage performance, happy to do that. People are asking about block storage performance. We can definitely with, and we, in general, we need to talk a lot more about what we've done from a storage perspective because that's, um, that feels like one of the followup deep dives, followup deep dives for sure. We spent a lot of time on it. It's super important. Um, and so we've got, um, a lot that we want to, um, yeah, of the ones that folks are interested in one, we already talked about, I'm not going to drag us back to fans, but just energy efficiency generally, right. That is one that has, uh, it requires its own kind of deep dive. And then I think there is a networking one, folks are pretty interested in both the hardware and the software side of networking needs to control it end to end and, uh, storage storage right up there. Uh, and then another one that, that came up a bunch in the hacker news comments, um, and just in general, um, is, uh, you know, Hey, what about a GPU? Uh, and we talked about this a bunch last time too. Um, the, uh, and we know there's a lot of energy around GPGP use for sure right now. Um, at the, uh, at the moment, I would say that we don't believe, and if, by the way, I know we've got some folks at video that follow the company. It is our belief that we cannot build oxide value on Nvidia. Um, as it presently stands, as it presently stands, we would love to be wrong. We would love that. It would be great for Nvidia to say like, no, no, no, we would love to do something where, and by oxide value, I mean real transparency and the ability to kind of to, to support arbitrary customer problems, to get visibility into power consumption, into firmware, into security. So they have attestation from the lowest level, you know, first initial instructions all the way up through firmware and operating system, et cetera. Yep. And we've got to be consistent on that value because it is security. That's another good one that we need to go deep on. Um, cause there's so many different elements of, of the system where that pulls through, but it, it would be wonderful. It'd be wonderful if there was an opportunity to, to, to build in the same way with the same openness, but today that's not possible. That's right. So, um, I think that we are looking to the future in a couple of different ways. We talked about, um, that we're, we're very bullish on what AMD is doing. Um, but we also know that like, and you know, we've talked to plenty of folks and maybe you in the chat as well, uh, you listener, uh, maybe of the same belief of like, look, it's interesting, but there's a software gap right now between the software, the, um, you know, and I think that that's very real. So, um, and then I think the other thing we're very curious about is like, there are other things we can go do. AMD and Nvidia are not the only two companies on the planet. And there are a bunch of interesting companies that, that can do Silicon that we can do in some interesting ways, um, that are, uh, that we would be able to partner with and be able to get real oxide value and kind of in an open source stack. So, um, on that one, um, I can't say contact sales on that. Um, but I guess contact engineering, what do we do? Contact us. Exactly. Contact us. Um, Oh, another question was, do you have any regrets about the LPC35 S69 given that the number of vulnerabilities that Laura has found? Um, better than the ones you haven't found. And this is the chip that we use for our hardware root of trust. Hardware root of trust. Um, and I mean, regrets is a really strong word. I don't know. I don't think so. I think that we, I think secure Silicon is really, really hard. And, uh, we, um, I, I do think that we have spent a lot of time with this part and I think we know it well and we have been able to build a secure infrastructure on top of it. Um, but it has, um, you know, it is probably a dimension of the product that we are interested to know what else is out there and we're constantly keeping it near to the rail. I'm not mad, just disappointed. I am. And it's, it is also, it's just, it's very challenging technically, and there is so much temptation. in the industry to have this retreat to security through obscurity and I just cannot emphasize this sharply enough. We need completely open stacks for the secure silicon. And so the fact that the bootloader is not open is a real problem. And I mean Laura would be the first to tell you that like actually if it had been open source, I might not have found this vulnerability. Because I went to look for this vulnerability because I popped up Ghidra on this thing because I didn't have the source code. So this is the second vulnerability she found, not the first. So I would like to see a lot more transparency from our vendors there and a lot more openness. So no regrets, but yeah, as you say, Steve, I'm just disappointed. I'm not mad. Someone's asking about potential Cerberus Oxide collaboration. Definitely, that would be tantalizing. Cerberus is a sibling company, wafer-level silicon, really interesting company and definitely tantalizing there. I would say no concrete plans, but that's something that folks are interested in. Well, I think, I mean broadly and it comes back to a question that of course came up in some of the Hacker News discussions and certainly with reporters, which is like, oh, what are you doing about AI? Because no piece can get written today without talking about AI. Right. And the, I mean, our perspective continuing to form is that first of all, there's this massive general-purpose computing market that is in dire need of a solution, a better solution that brings the benefits of cloud computing on-premises. And that still represents the vast majority of infrastructure that is being deployed and run everywhere outside of the public cloud. And so start there first. And we had customers continually say like, please, please, please, please, please go solve that first. Right. And actually wait until this like AI wave crests and then deliver follow-on products that will help support that. And I think one of the things that we anticipate is that this rush to smash a bunch of GPUs into systems right now to serve these like short-term needs are going to evolve into some real, real inefficiency problems around power and cooling and just data center density where you're going to have these, you know, quarter-filled racks and eighth-filled racks. And so I think as we are thinking about it, it is from a rack level. Yes. Thinking about the right balance of hardware acceleration and general and just compute and then the power and the thermals. And so we, and you know, same for a question of like, you know, partnering with any of these other companies. It's like when you start thinking at the rack level, there are some pretty interesting opportunities. There are. And there's some interesting opportunities, but there are also some interesting constraints on working together. And that's what, and we, I mean, honestly, the way we see it right now is the battle lines are kind of being drawn because NVIDIA at the same time, and again, we'd love to be proven wrong on this, but NVIDIA is also like, actually, I'm eyeing that general purpose CPU and I'm thinking, why don't I just take the whole thing? And instead of sitting out here as a peripheral, like maybe I'm just the computer. And so I think, you know, the old, like, I'm the captain now meme with the GPU. And I think that that's a proprietary world that we're not so into. I mean, I totally admire NVIDIA's execution and wish they were a much more transparent company, make it much easier to interoperate. And in the meantime, I think we really will want to take a different tack and one that is very much, as Steve was just saying, taking that rack level approach. I did love, and Adam had quoted the, Adam, you quoted kind of the comments in the chat where someone's like, I really like the fact they didn't mention AI. Someone else is like, yeah, that's because they don't have a GPU. They don't want to mention AI. We're hoping you don't mention AI, pal, which is not wrong. Not wrong, but again, like there is more computing happening in the universe than just AI, although it is consuming most of the power. Absolutely. And we think that obviously this stuff is super important, but it's also, I mean, I think it's important to get this stuff on package that right now it should not be a peripheral. It should be, you should have a chiplet that is an accelerated chiplet and that should live side by side with a chiplet that is a general purpose chiplet. And that is, you know, the company, and I know that a couple folks see that. NVIDIA also sees that as the right model, but, you know, that's kind of what we see. Another question in the chat about, and yeah, Wes, exactly, the MI300. What about ARM and RISC-V? So RISC-V, you know, I love, honor RISC-V, and there's a lot that's great about RISC-V. RISC-V really needs to figure out who it wants to kind of go after, and are you, because there's a degree to which they kind of make whatever argument is convenient. And it's like, if you're going to go after Cortex-M, you really need to go after Cortex-M, and you really need to provide the debugging support and complete transparency, please, the kind of these proprietary firmware in RISC-V is a real problem. So I want RISC-V to not kind of repeat some of the mistakes that we've seen. RISC-V, we do not need UEFI, please don't even contemplate it. In terms of ARM, also interesting, but same kind of comment for Ampere. It's like Ampere's slides look a lot less interesting when you compare them to AMD than you do when you compare them to Intel. So x86 is not just Intel, it's Intel and it's AMD, and obviously we're very long. AMD and something, are you talking about RISC-V or SiFive? And that's part of the problem is that SiFive is, SiFive has got a lot of proprietary elements. It's been really problematic. And RISC-V is kind of allowed for some of those proprietary elements. So RISC-V is interesting. I believe it is Laura's, Adam, what was Laura's prediction about when we're going to get a data center caliber RISC-V part? I think we're two years away now. Yeah, we're getting close. And I think the real thing is we're going to listen to customers on that. And there are lots and lots and lots of ways where Oxide is weird, too weird. We want to be normal in some small number of ways and choosing the x86-64 ISA is one of those small ways. You sound like Pinocchio who wants to be a real boy. I just want to be normal. Oxide wants to be normal. We actually don't want to be a puppet. We want to be just a boy, just a little boy. So the launch press was great. I'm sure you must have loved reading all of it. I mean, it seems like broadly very positive and great milestone. But Steve and Brian, as you kind of think towards the future, are there milestones that you're looking forward to? And I know that this one was kind of both a starting line, more than a finish line. But as you look over the horizon, are there points that you're excited about getting to in the future? I think it isn't a particular date per se, but the thing that I'm excited about is just in these first deployments, we've been able to validate some of the promise for what it's like to take delivery and stand it up and get users going and being able to hear from customers that this has been a real step function change in terms of how quickly they can go from something arriving to having developers productive has been great. The next thing I'm very much looking forward to is some of the other promise benefits that customers want to go validate. And that is, once I have moved off of the traditional rack and stack approach onto Oxide, it wasn't really the case that I could collapse two racks down to one. And is it the case that now product teams across these different divisions are much more productive or just happier, or we can recruit and retain folks more? Just some of those longer-term benefits that I think these customers were excited to be part of why Oxide, having those come to fruition and then hearing them tell that story. I think that getting on the other side of that is something that I'm looking forward. Yeah, and I think that also kind of in the same vein, we've got such a great foundation, but it is a foundation. And we've got a lot of stuff now that we can go uniquely do. I mean, I know one of the things that I'm super stoked about is the ability to get unprecedented network visibility. And there's so much stuff we can go build in terms of network observability because we control both sides of this. And that can deliver just really eye-popping value. And that's going to be, I think, really... And I feel like in every part of the stack, there is now something we can go do that was not really possible before. So I think that we are able to do things that really, really demonstrate the kind of the integrated nature of this system. And that's going to be really exciting. And I think that it's going to be... The journey is also going to be long on all this stuff. We did have... There was, at some point, there was a suggestion, maybe from someone not at Oxide, but like, well, you need like an Our Incredible Journey blog post. And it's like, okay, maybe I'm too online, but no, Our Incredible Journey... That's a human cheat. I'm sorry. There's like an Our Incredible Journey Tumblr that is a collection of companies announcing that they're going out of business. Our journey is not an incredible journey. Our magnificent track, I don't know. It's an incredibly incredible, very incredible journey. Very incredible journey, Our Incredible Journey. It's kind of funny because I've had the same thing, when you see that you've got these things that are in that kind of the distant horizon, and it takes so long to work there that sometimes you can forget like how... You don't feel necessarily the rush at the end and you need to like... Because you're kind of looking to the next horizon now and you do need to take a moment and be like, okay, this is pretty great and now let's get excited about the next horizon. But I remember, I mean, Steve, how long ago was it me sitting in your office at Joyent just really thinking like, man, what's it going to feel like when we close that first customer, get that first PO? Lifetime ago and not long ago. Lifetime ago and not long ago. And you think that like now that like that milestone now, which felt like it was so indefinitely in the future, pretty far in the rearview mirror at this point, that first PO, and that's pretty great. So pretty exciting, but a lot to go build. And a lot to go build, a lot to go do, for sure. So Adam, is that... This is great. I mean, last week was so wild and great to kind of put a bookend on it, but then lots of work to do and look into the future. But worth taking the time to really savor this one because it's been a long journey and we got a lot ahead, but this is great and it's great to see people responding to it and excited about what we've built. Yeah, I think that's a great note to end on, Adam, because I agree with you. I think the one thing, it was really surprising that this is now like whatever it is, the 231st most popular story in the history of Hacker News in the 34 million articles in Hacker News. And you think that this is... The things that are ahead of us are all involved death or scandal. And like that's... You mean in terms of stories, not the future of the company. Yes, agreed. Okay, sorry. No, no, you're not getting what I'm laying down. So we need... Sorry, we need a scandal involving death. Come on, don't be thick. We can best it. We can best 231. But I think that that's amazing that there's that kind of enthusiasm because you don't generate that enthusiasm. That enthusiasm is like... That comes from a deeper spot. And we feel just really lucky, lucky that folks find inspiration in what we're doing. But we're honestly... We're the ones that are really excited by the amount of enthusiasm that's out there. So all of you, the folks that are... I know there's not a home lab buried in oxide, but we really appreciate all of your support and enthusiasm for the company and what we're doing. And we're excited to be a model for other folks who are willing to take on big, hard problems. Awesome stuff. All right, on that note, thank you very much, everyone. Really appreciate it. We're going to have, again, we'll do a couple more of these for sure. I know there's some questions in the chat that we didn't answer. I'll kind of hang out a bit in the chat and answer them. But thank you very much. Adam, thank you. Steve, thank you for... Thank you for combat duty in the Hacker News comments. It was definitely... It was a wild one. It is, but I do echo what you said about being really appreciative. As much as it's fun to complain about the bad comments, just the fact that there's so many people that are so enthusiastic about what we're doing is just like very... It's very nice. I appreciate it quite a bit. It really is. And when we first raised, we said we're going to have the internet rooting for us. When we first raised, we said we're going to have the internet rooting for us. And that's been great. Really, really, really appreciate it. All right. So, Steve, on to the next. The next. All right. Thank you very much, everybody. And thanks again for all the terrific vibes. And we promise to never ask you to contact sales. Also, please contact sales. "
  },
  "3c3e8005-4a7d-43c1-9aa1-ad87f44491a4": {
   "Title": "Shipping the first Oxide rack: Your questions answered!",
   "Description": "\u003cp\u003eOn this week's show, \u003ca href=\"https://mastodon.social/@ahl\"\u003eAdam Leventhal\u003c/a\u003e posed questions from Hacker News (mostly) to Oxide founders \u003ca href=\"https://mastodon.social/@bcantrill\"\u003eBryan Cantrill\u003c/a\u003e and \u003ca href=\"https://hachyderm.io/@sdtuck\"\u003eSteve Tuck\u003c/a\u003e. Stick around until the end to hear about the \u003cstrong\u003ehardest\u003c/strong\u003e parts of building Oxide--great, surprising answers from both Bryan and Steve.\u003c/p\u003e\u003cp\u003eThey were also joined by \u003ca href=\"https://twitter.com/steveklabnik\"\u003eSteve Klabnik\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eQuestions for Steve and Bryan:\u003c/p\u003e\u003cp\u003e[@6:38] Q:\u003c/p\u003eCongrats to the team, but after hearing about Oxide for literal years since the beginning of the company and repeatedly reading different iterations of their landing page, I still don't know what their product actually is. It's a hypervisor host? Maybe? So I can host VMs on it? And a network switch? So I can....switch stuff? (\u003ca href=\"https://news.ycombinator.com/item?id=36552400\"\u003e*\u003c/a\u003e)\u003cp\u003eA:\u003c/p\u003eSteve: A rack-scale computer; \"A product that allows the rest of the market that runs on-premises IT access to cloud computing.\"Bryan: \u003cem\u003eagrees\u003c/em\u003e\u003cp\u003e[@8:46] Q:\u003c/p\u003eIt's like an on prem AWS for devs. I don't understand the use case but the hardware is cool. (\u003ca href=\"https://news.ycombinator.com/item?id=36552534\"\u003e*\u003c/a\u003e)I didn’t understand the business opportunity of Oxide at all. Didn’t make sense to me.However if they’re aiming at the companies parachuting out of the cloud back to data centers and on prem then it makes a lot of sense.It’s possible that the price comparison is not with comparable computing devices, but simply with the 9 cents per gigabyte egress fee from major clouds. (\u003ca href=\"https://news.ycombinator.com/item?id=36552561\"\u003e*\u003c/a\u003e)\u003cp\u003eA:\u003c/p\u003eBryan: \"Elastic infrastructure is great and shouldn't be cloistered to the public cloud\"; Good reasons to run on-prem: compliance, security, risk management, latency, economics; \"Once you get to a certain size, it really makes sense to own\"Steve: As more things move onto the internet, need for on-prem is going to grow; you should have the freedom to own\u003cp\u003e[@13:31] Q:\u003c/p\u003eSomebody help me understand the business value. All the tech is cool but I don't get the business model, it seems deeply impractical.\u003cp\u003e\u003c/p\u003e\u003cul\u003e\n\u003cli\u003eYou buy your own servers instead of renting, which is what most people are doing now. They argue there's a case for this, but it seems like a shrinking market. Everything has gone cloud.\u003c/li\u003e\n\u003cli\u003eEven if there are lots of people who want to leave the cloud, all their data is there. That's how they get you -- it costs nothing to bring data in and a lot to transfer it out. So high cost to switch.\u003c/li\u003e\n\u003cli\u003eAWS and others provide tons of other services in their clouds, which if you depend on you'll have to build out on top of Oxide. So even higher cost to switch.\u003c/li\u003e\n\u003cli\u003eEven though you bought your own servers, you still have to run everything inside VMs, which introduce the sort of issues you would hope to avoid by buying your own servers! Why is this? Because they're building everything on Illumos (Solaris) which is for all practical purposes is dead outside Oxide and delivering questionable value here.\u003c/li\u003e\n\u003cli\u003eBased on blogs/twitter/mastodon they have put a lot of effort into perfecting these weird EE side quests, but they're not making real new hardware (no new CPU, no new fabric, etc). I am skeptical any customers will notice or care and would have not noticed had they used off the shelf hardware/power setups.\u003c/li\u003e\n\u003c/ul\u003eSo you have to be this ultra-bizarre customer, somebody who wants their own servers, but doesn't mind VMs, doesn't need to migrate out of the cloud but wants this instead of whatever hardware they manage themselves now, who will buy a rack at a time, who doesn't need any custom hardware, and is willing to put up with whatever off-the-beaten path difficulties are going to occur because of the custom stuff they've done that's AFAICT is very low value for the customer. Who is this? Even the poster child for needing on prem, the CIA is on AWS now.I don't get it, it just seems like a bunch of geeks playing with VC money?(\u003ca href=\"https://news.ycombinator.com/item?id=36553698\"\u003e*\u003c/a\u003e)\u003cp\u003eA:\u003c/p\u003eBryan: \"EE side quests\" rant; you can't build robust, elastic infrastructure on commodity hardware at scale; \"The minimum viable product is really, really big\"; Example: monitoring fan power draw, tweaking reference desgins doesn't cut it Example: eliminating redundant AC power suppliesSteve: \u003ca href=\"https://www.tiktok.com/@sysengineer/video/7058748787623349551\"\u003e\"Feels like I’m dealing with my divorced parents\"\u003c/a\u003e post\u003cp\u003e[@32:24] Q (Chat):\u003c/p\u003eIt would be nice to see what this thing is like before having to write a big checkSteve: We are striving to have lab infrastructure available for test drives\u003cp\u003e[@32:56] Q (Chat):\u003c/p\u003eI want to know about shipping insurance, logistics, who does the install, ...Bryan: \"Next week we'll be joined by the operations team\" we want to have an indepth conversation about those topics\u003cp\u003e[@34:40] Q:\u003c/p\u003eSeems like Oxide is aiming to be the Apple of the enterprise hardware (which isn't too surprising given the background of the people involved - Sun used to be something like that as were other fully-integrated providers, though granted that Sun didn't write Unix from scratch). Almost like coming to a full circle from the days where the hardware and the software was all done in an integrated fashion before Linux turned-up and started to run on your toaster. (\u003ca href=\"https://news.ycombinator.com/item?id=36553044\"\u003e*\u003c/a\u003e)\u003cp\u003eA:\u003c/p\u003eBryan: We find things to emulate in both Apple and Sun, e.g., integrated hard- and software; \u003ca href=\"https://en.wikipedia.org/wiki/IBM_AS/400\"\u003eAS/400\u003c/a\u003eSteve: \"It's not hardware and software together for integration sake\", it's required to deliver what the customer wants; \"You can't control that experience when you only do half the equation\"\u003cp\u003e[@42:38] Q:\u003c/p\u003eI truly and honestly hope you succeed. I know for certain that the market for on-prem will remain large for certain sectors for the forseeable future. However. The kind of customer who spends this type of money can be conservative. They already have to go with on an unknown vendor, and rely on unknown hardware. Then they end up with a hypervisor virtually no one else in the same market segment uses.Would you say that KVM or ESXi would be an easier or harder sell here?Innovation budget can be a useful concept. And I'm afraid it's being stretched a lot. (\u003ca href=\"https://news.ycombinator.com/item?id=36555250\"\u003e*\u003c/a\u003e)\u003cp\u003eA:\u003c/p\u003eBryan: We can deliver more value with our own hypervisor; we've had a lot of experience in that domain from Joyent. There are a lot of reasons that VMware et al. are not popular with their own customers; \u003ca href=\"https://www.theregister.com/2023/01/12/intel_sapphire_rapids/\"\u003eIntel vs. AMD\u003c/a\u003eSteve: \"We think it's super important that we're very transparent with what we're building\"\u003cp\u003e[@56:05] Q:\u003c/p\u003ewhat is the interface I get when I turn this $$$ computer on? What is the zero to first value when I buy this hardware? (\u003ca href=\"https://discord.com/channels/1042492311080288306/1125464736893513869/1125590097300049991\"\u003e*\u003c/a\u003e)\u003cp\u003eA:\u003c/p\u003eSteve: \"You roll the rack in, you have to give it power, and you have give it networking [...] and you are then off on starting the software experience\"; Large pool of infrastructure reosources for customers/devs/SREs/... in a day or less; Similar experience to public cloud providers\u003cp\u003e[@01:02:06] Q:\u003c/p\u003eOne of my concerns when buying a complete solution like an iPhone (or an Oxide rack 😉) is how much ownership I actually have over the device. Where does Oxide draw the line on \"ownership\" of the rack? (\u003ca href=\"https://discord.com/channels/1042492311080288306/1125464736893513869/1125592711865573426\"\u003e*\u003c/a\u003e)\u003cp\u003eA:\u003c/p\u003eBryan: \"You bought the computer, it belongs to you\"; it is important to us to enable that ownershipSteve: operator level and developer level; \"Anything that we are injected ourselves into is [...] in the interest of making sure that the customer is getting a highly available and efficient system\"\u003cp\u003e[@01:05:03] Q (Chat):\u003c/p\u003eDo you sell support contracts?\u003cp\u003eA:\u003c/p\u003eSteve: Yes, comes with a support subscription (typically three years, flexible)\u003cp\u003e[@01:05:37] Q (Chat):\u003c/p\u003eIs the rack dependent on any Oxide cloud services?\u003cp\u003eA:\u003c/p\u003eBryan: \"Emphatically not\" The customer has total agency over data I/OAdam: Updates will be fetches from a web server\u003cp\u003eInterlude\u003c/p\u003e\u003cp\u003e[@01:07:49]\u003c/p\u003eThis is super cool. I realize a lot of HN folks might not see the point of this, but it literally saves an entire team of people for companies. (\u003ca href=\"https://news.ycombinator.com/item?id=36554036\"\u003e*\u003c/a\u003e)\u003cp\u003e[@01:08:00]\u003c/p\u003eOxide is such an ambitious project, I am such a fan of the aesthetic and design and of course transparency of all of the cool people that work there. (\u003ca href=\"https://news.ycombinator.com/item?id=36552390\"\u003e*\u003c/a\u003e)\u003cp\u003e[@01:09:44]\u003c/p\u003eFYI for language pedants like me: It’s “on-premises” or “on-prem”. A “premise” is something assumed to be true. (\u003ca href=\"https://news.ycombinator.com/item?id=36552245\"\u003e*\u003c/a\u003e)\u003cp\u003e\u003c/p\u003e\u003cp\u003e[@01:11:43] Q (Chat):\u003c/p\u003eWhen is oxide gonna make a smaller rack?\u003cp\u003eA:\u003c/p\u003eBryan: Probably no product for the homelab; \"Architecturally, there is nothing here that won't scale down'; ear to the marketSteve: can be scaled down from a power perspective\u003cp\u003e[@01:15:38] Bryan discusses how to deliver \"Oxide value\" with a GPU product.\u003c/p\u003e\u003cp\u003e[@01:21:53] Q:\u003c/p\u003eAre you shipping Milan racks and if so what does the moving to Genoa entail for Oxide? (\u003ca href=\"https://news.ycombinator.com/item?id=36569371\"\u003e*\u003c/a\u003e)The listed items are for last gen CPUs and 2 gen old nics (100 Gb/s). Also zfs rather than ceph. It's hard to consider under those constraints. Any plans for upgrades beyond single rack deployments and newer gen hardware? And what is the sell case over kube, mesos, or VMware, especially since the hardware and software appear tightly coupled? (\u003ca href=\"https://news.ycombinator.com/item?id=36569136\"\u003e*\u003c/a\u003e)\u003cp\u003eA:\u003c/p\u003eBryan: Keeping a close ear to the market; \"You will see a Genoa-based product\"Steve: You can add next-gen sleds to the rack, you have modularity\u003cp\u003e[@01:26:10] Q:\u003c/p\u003eDo you have any liquid cooling solutions collaborators? (\u003ca href=\"https://news.ycombinator.com/item?id=36560169\"\u003e*\u003c/a\u003e)\u003cp\u003eA:\u003c/p\u003eSteve: Collaboration with \u003ca href=\"https://www.motivaircorp.com/products/chilleddoor/\"\u003eMotivair\u003c/a\u003e; The product is conventionally cooled right now. Looking at what makes sense in future architecturesBryan: Rack power budget is a challenge\u003cp\u003e[@01:28:41] Q:\u003c/p\u003eWhy do you use Illumos? (\u003ca href=\"https://news.ycombinator.com/item?id=36552630\"\u003e*\u003c/a\u003e)\u003cp\u003eA:\u003c/p\u003eBryan: \"We need to be able to control our fate\"; \u003ca href=\"https://en.wikipedia.org/wiki/DTrace\"\u003edtrace\u003c/a\u003e;\u003cp\u003eAdam: \"It was our fastest path to market (both development and support) with our team, expertise, and experience.\"\u003c/p\u003e\u003cp\u003e[@01:41:20] Q:\u003c/p\u003eCongrats! This seems to be a cool product! How does this work with software updates? Are they subscription-based, or are they for free forever? In case the company goes bankrupt, will the software still work, and is the source code open? (\u003ca href=\"https://twitter.com/ISibboI/status/1675058910250643457\"\u003e*\u003c/a\u003e)\u003cp\u003eA:\u003c/p\u003eBryan: \"In many ways we viewed the ability to upgrade as the most important feature\" The software is open by default, and we're reviewing instances where we're constrained by IP we don't own.\u003cp\u003e[@01:46:15] Q:\u003c/p\u003eWhat part of this journey was hardest? E.g., the scope increase when you couldn’t use reference designs? 😉 Dealing with the supply chain? Raising money for this kind of startup? (\u003ca href=\"https://discord.com/channels/1042492311080288306/1125464736893513869/1125583229689270302\"\u003e*\u003c/a\u003e)\u003cp\u003eA:\u003c/p\u003eBryan: \"when we got funding\" When you have a blank sheet of paper, where do you start?Steve: SVB collapse and associated banking crisis\u003cp\u003eIn addition, there was a \u003ca href=\"https://github.com/oxidecomputer/oxide-and-friends/blob/master\"\u003elive chat during the show\u003c/a\u003e where members of the Oxide team answered additional questions and in greater depth.\u003c/p\u003e\u003cp\u003eIf we got something wrong or missed something, please file a PR! Our next show will likely be on Monday at 5p Pacific Time on our Discord server; stay tuned to our Mastodon feeds for details, or \u003ca href=\"https://sesh.fyi/api/calendar/v2/iMdFbuFRupMwuTiwvXswNU.ics\"\u003esubscribe to this calendar\u003c/a\u003e. We'd love to have you join us, as we always love to hear from new speakers!\u003c/p\u003e",
   "Link": "https://share.transistor.fm/s/353e8a06",
   "Filename": "3c3e8005-4a7d-43c1-9aa1-ad87f44491a4.mp3",
   "GUID": "3c3e8005-4a7d-43c1-9aa1-ad87f44491a4",
   "Published": "Mon, 03 Jul 2023 17:00:00 -0700",
   "Transcript": "Well, hello, everyone. First of all, Steve is with me here, Steve. Hello. Hello. I, we will both appear as my voice. Uh, we, so, uh, very exciting because we launched on, on Friday. We got, we are, uh, the, the first oxide rack came off the line and was, was created up, uh, and, uh, it was really exciting, uh, today in the office. In fact, you may hear us, uh, Chewing a little bit here, Adam, because there we go as Steve shakes a, uh, a, a package showed up in the office today from nuts.com. And like, did you, oh my God, we accidentally order something nuts.com and size box, pretty heavy, a good size box. Uh, how heavy would you say it was? It was on the order of about five pounds. It was actually seven pounds. According to this invoice, how many gift cards is that? That's the question. Exactly right. Like Christmas morning. Right. Uh, and inside, uh, and this is, you know, what we have, we've said from the beginning that, uh, one of the. Uh, terrific things that we have enjoyed as a company is the number of folks out there who've been really supportive of what we've been doing. Uh, and it's really meant a lot to us. Even those folks that we know that are for whatever reason, aren't going to be, aren't necessarily oxide customers, but they've been supporting us from afar. Uh, and that's been really meaningful for us. And indeed this package from nuts.com was from one such supporter with the gift message. Way to go. Congrats to you all. This is for everyone who thought you were nuts. So thank you very much. You know who you are. We really appreciate it. Is that end of message? Uh, it did say, uh, this is not end of message. Uh, if you'd like me to, I will read the end of the message. Just curious. Okay. It's a little more barbed. This is for everyone who thought you were nuts. M dash. Fuck them. I guess that's what you really wanted me to get to them. But no, no, uh, yeah, right. Um, no, thank you very much. Uh, and, uh, yeah, we did definitely, definitely some people who thought we were, uh, a little bonkers, but, um, we are very, very excited to hit this milestone. Um, of course we've got, um, a long way to go from our perspective in terms of all the things that we want to go build out on top of this and we're super excited. And, um, you know, I, I was even, I guess it was kind of debating whether we were going to tweet something out on Friday, I guess we, you and I were kind of, um, I don't know, maybe he was never a debate in your mind, whether we should tweet something out as a company, but yeah, I mean, it felt like yeah, after, after this long of a road and it, it, it was a bit surreal on Friday to go from where we knew we were going to be, but to actually have that system loading on a truck and shipping out, it was surreal. And in part, because we've been working so hard for so long and I really did liken it to, uh, to a summit, uh, when you're, when you're climbing a mountain and you have so many false summits and you just get to the point where you're just like grinding and then all of a sudden you'd be surprised, but like, Oh God, like that's, that's the summit. We've actually got this thing, uh, got this thing done. So it was been, um, of course, again, we've got a lot of, a lot of work to do and a lot of, uh, A lot of software that we will continue to evolve, but, uh, but the, but the hardware is, uh, is done. Um, there were a lot of people out there that were waiting and waiting and waiting and waiting. And so I think just as a way to, to note that we had begun shipping commercial systems, it was worth a quick mention and there were some naysayers out there. There were some naysayers. Um, I, you know, I, I don't think I'm going to, this person deleted their tweets, so I'm not going to name them, but there is someone who said they were going to eat their shoe if, if oxide ever shipped anything. I mean, we've been holding onto that, I mean, three years ago, two years ago, I mean, we've been holding onto it like a tweet. Yeah. They may have deleted it. It's true. Yeah. I know Adam, we have, we've kind of like put it up in the locker room, you know, as the, uh, do their credit. They came back forward and had noted it and, and is, are now offering up a case of beer. Yeah. And like, not to us, they were talking about like, Hey, I know at this conference, I was saying these guys weren't going to ship. Barely they were saying, a lot of checks were written, but, uh, that was fun. So, um, I think Adam, we were talking about spending today going through that. So the hacker news thread, um, was, uh, filled with a lot of delightful support, um, also some questions. And then also just because, because I called out hacker news for what a supportive community is, of course, hacker news has got to bring, has got to be the most orange site. And, uh, there were definitely some comments that were a little bit trollish we'll try not to spend too much time on those, but we also can't get out of here without getting some of those. So yeah, I thought go through some of the questions in an order that seemed reasonable to me. Um, I do want to pause and then just say, you know, I know, congratulations to us all. Congratulations to the oxide team. But I feel like I'd be remiss to not saying congratulations in particular, Brian and Steve. Cause like you started the thing, you had the vision, you raised the money. You assembled the team. So, um, I just don't want it to go unsaid that you guys should feel a tremendous amount of pride in what we, the whole team have put together. But, um, but thanks to you guys. I think that, you know, yeah, I appreciate that. But I think you can speak on behalf of Steve that like, it feels, it is such a comprehensive team effort, but it's almost like, I mean, just saying today, it feels like we have a colleague who started in January and it's felt like she's been here for the whole, the whole journey, the whole journey. I feel, yeah, it's hard to remember for most folks on the team, like that they weren't there from the very beginning, which right in part, because we needed every single one of them to ship this thing because we would have been completely screwed without every single one of them. So, uh, yeah, so yeah, no, thank you. But thank you. And, uh, it's, it's been, it really been exhilarating. It's a lot of fun. So, um, there's a general category of kind of what is Oxide. And I don't know if you guys have been to a Seder, but one of the traditions in a Seder is, or one of the parts of a Seder is talking about the story of the four children. Uh, one of the children is the one who doesn't know how to ask the question. So I'm going to ignore that child, but there are, there are three other children. There's the simple child who asks the question in a simple way. There's the wise child who asked the question about, you know, what is this in a more sophisticated way? And then there is the wicked child. So we're going to start with the simple child. Uh, cause we got a comment, um, saying congrats to the team after hearing about Oxide for years, since the beginning of the company and repeatedly reading different iterations of the landing page, I still don't know what the product actually is. It's a hypervisor host maybe so I can host VMs on it and a network switch so I can switch stuff. So why don't we start there? What is this thing anyway? Yeah. Yeah. What do we build? So it, it, it's a question we've definitely gotten a lot because for a while we had a couple of pictures on a website that were all hardware centric and folks had a sense that we were building some sort of a computer, but that was about it. Or we're a firmware company. That's the other thing that you get a lot of. It's like, are you just doing firmware? It's like, well, yes. And yeah. Or I think a particular VC that was like, you know, if you're doing firmware, you might want to invest. Um, and the difficulty is that we're doing, we're doing probably eight different kinds of products, uh, designed together into one, but, but fundamentally what we're aiming to go build is, uh, a product that allows. The rest of the market that runs on premises, it access to cloud computing. And that's what we're, that's what we're aiming for from the beginning is we are big believers in cloud computing. We think about cloud computing, not as renting someone else's computers, but as having abstractions that allow you to consume large pools of infrastructure resources to deploy and run software. And the, the kinds of systems that cloud hyperscalers have in their own data centers look nothing like the hardware and software that folks that are running on-prem IT have access to. And so we are building a computer. This computer is at rack scale and it comes complete with the innovations that the hardware hyperscalers have built for themselves and a complete software set that allows you to expose cloud computing services to your users on-prem. You know, that's a great segue to what I'll, what I'll describe as the wise child. I got a couple of these. One says it's like on-prem AWS for devs. I don't understand the use case, but the hardware school says one. The other says I don't understand the business opportunity for Oxide at all, doesn't make sense to me. However, if they're aiming at companies parachuting out of the cloud back to data centers and on-prem, then it makes a lot of sense. It's possible that the price comparison is not comparable with computing devices, simply anyway, and so on. So I think a lot of the premise there being isn't everyone in the cloud? Yeah. Why would anyone run anything outside of the public cloud? Isn't Jeff Bezos going to own and operate every computer on the planet? And our belief of course is no, is that elastic infrastructure is great. And just as Steve said, that shouldn't be cloistered to the public clouds. And there are lots of good reasons to run on-prem. And in fact, we're so deep into the public cloud revolution that most of the bad reasons to run on-prem have evaporated. And if you are, you know, there's something kind of Lindy to use an overly trendy term about those that are on-prem, that if you're running on-prem in 2023, there are probably some good reasons for it. And those good reasons are around regulatory compliance, or they're around security, or they're around risk management, or they're around latency, or, and this is kind of what the comment was getting to, they're around economics. And as it turns out, if you're going to run a lot of compute, you may want to own some of it, as opposed to renting it all the time. And, you know, being in the, in the public cloud is kind of in an Airbnb and, you know, there, there can be some upsides in Airbnb, but, or you're renting an apartment and, you know, maybe the Airbnb, maybe the Airbnb is like, is that Lambda or is that the hotel room? So we got the, yeah, right. Room service with, with Lambda. And then you're kind of, but ultimately, you know, you're renting. It can make a lot of sense. But once you get to a certain size it really makes sense to own. And that's, that's our big belief. Yeah. And to Steve's point earlier, the, the cost of owning is, you know, it's explodes with all the operational costs that the developers then have to onboard where they don't get to just provision VMs with an API, they have to like file tickets and so forth. That's right. Exactly. Yeah. And I think, I mean, just to drive the point home, you've got, I think it was Andy Jassy who at the time was running AWS was on stage at reInvent in 2021. And he was describing the opportunity for AWS, which in 2021, I think everyone certainly just ask any VC, everyone was running in the public cloud or was going to be running in the public cloud shortly. And Andy had said that 95% of IT infrastructure was running outside of the public cloud to underscore the opportunity for AWS. I think what it highlights is just how big the on-premises IT infrastructure footprint is and that public cloud is going to grow very, very large, continue to grow very, very large. The, the need for on-premises IT infrastructure is going to remain very big and as more things move onto the internet, continue to get larger itself. And, you know, and Trenik has got a good comment in the chat here, Adam saying, Hey, the way my colleague is asking, so does this mean that we can actually have access to this kind of compute in Eastern Europe or Asia? And we absolutely, I mean, I think that's the, you know, whether you want to put that as kind of regulatory compliance, because certainly there are a lot of in country regulations around data movement and so on, or often just latency. It's like, actually, you know what, I'd rather not hit US East from, from, from, you know, when I, from across an ocean or what have you, or so there are a lot of reasons why one wants to have your own local compute in country. And we absolutely see that. And again, we, our belief is purely that you shouldn't have to make these trade-off decisions. If, if cloud, if the benefits of cloud computing, namely faster, easier access for developers to get their jobs done and lower overhead for operators to run highly available infrastructure, like if, if those are benefits that are shared, which we have come across kind of everyone, big companies, a small company do share those, the desire for those benefits, then you should have the freedom to choose, do I want to rent it? Or do I want to own it? Do I want to run it in someone else's data center or run it in my own data center? And it's kind of a dichotomy right now that, that, that you have to make this trade-off. So that takes us to what I'm going to characterize as the wicked child here. So another comment, and it's pretty long, so I'm not going to read it. In its entirety, but there's lots to unpack is this. He says, somebody helped me understand the business value. All the tech is cool, but I don't get the business model. It seems deeply impractical. Based on blogs and Twitter and Mastodon, they've put a lot of effort into perfecting these weird EE side quests. They're not making real new hardware, no new CPU, no new fabric, et cetera. I am skeptical any customers will notice or care and would have not noticed had they used off the shelf hardware power setups, so you have this ultra bizarre customer, someone who wants their own servers, but doesn't mind VMs, doesn't need to migrate out of the cloud, but wants this instead of whatever hardware they manage themselves now, who will buy a rack at a time who doesn't need any custom hardware and willing to put up with whatever off the beaten path difficulties are going to occur. Who is this? Even the poster child of meeting on-prem, the CIA is on AWS now. I don't get it. It just seems like a bunch of geeks playing with VC money. Oh boy. I even said like, am I going to read this whole thing? And how long was it? Yeah, I feel like you, it was longer. It was longer. It was longer than that. Okay. So I mean, boy, where do you want to start? I, the first one, just because yeah, sorry. The funniest thing I think to me about this, I, I appreciate skepticism, but when people come at it from a, like, therefore I know that no one will buy this is very different than like, I don't understand this cause I'm not in this space. Like, I think a lot of people are skeptical about the business model because they've just never dealt with this area before. And so, you know, they naturally are like confused, but I think the funniest thing about this comment is it's on a picture of someone who bought a rack from us. So being like no one, no customers could possibly exist in response to like a photo of a customer having purchased a thing is just kind of like inherently a little funny to me. Yeah, right. But so there's that there is the, and you know, I, I did kind of blow a gasket on EE side quests, Adam. No, you can't. We, you gotta, I, and you know, I think the double E's maybe had a better sense of humor about this than I did. I definitely, we all as a team have worked really, really hard, but the double E's have been, I mean, have been extraordinarily. So, I mean, again, everyone has worked really hard on this, but boy, if there's any team to accuse of going on side quests, like there've been no, what are we talking? And I did have like, I did have a follow up comment. I did like, it was funny because in the internal chat, I'm like, I really have to reply to this comment and immediately people feel it's like their responsibility to be like, why don't you say the comment in here where it's safe as opposed to like, I don't know what people think I'm going to say, right? Right. Exactly. I feel like this is to me before you say it out loud, right? Exactly. And I'm like, look, I just, and I did try to, you know, I, I tried to write the shortest possible reply to that, which is really just like, what a double E side quest are we talking about? There'd be no double E side quests. I do think that, uh, it is really, really hard to go build all of this. And we have been talking about all of the, and we have believed strongly in being transparent about all of the details in building this thing. I think, I think there are extraordinarily technically interesting. I think that they are broadly hidden. People don't talk about them. And that's a part of the reason we've talked. And so it's like, no, sorry. The EEs are not on a side quest. You yourself to your listener may be on a side quest. When you listen to us talk about them, it may be for you a side quest. Um, and it may be for you interesting to hear about something just has been interesting for me and Steve for you and Adam for you to, to learn about these aspects of the system that we just really hadn't thought about before, but all of it has been actually essential for delivering the artifact. I just really want to be unequivocal about that. Well, and, and it's for a bunch of these, it's like, oh, we'll just go pose that same question to a hyperscaler. It's like oxide. Why'd you build your own switch? It's right. Well, that double E side quest, that double E side quest. Right. And then you go, you know, and, and, and folks from AWS, we'll talk about, you know, building their own switch, being seminal to them, actually kind of turning the corner for running through cloud infrastructure services. That's maddening. Yeah. And I think that, you know, and this also gets Adam to, you know, part of the origin for a bunch of us here, especially coming from the software side in terms of like, why, and maybe one way to kind of phrase the wicked child's question in the most generous possible way is why can't you just do this on commodity hardware and trust us, we tried. I mean, that's what we did. That's our life before oxide is trying really, really hard actually to do it on commodity hardware. And, and, you know, Adam, you, you and I were at sun back in the day and we, you know, where we really believed in this kind of full hardware software integration. And then we kind of, you know, if you talk about a side quest, I spent, you know, 10 years, nine years at a public cloud computing company, attempting to build reliable, robust, elastic infrastructure on commodity hardware. And you can kind of do it a little bit, but you can't do it at scale. And then there are a whole bunch of things that you just cannot do. And you actually, and the belief kind of the, the fundamental technical belief that we came to was we actually need to have both hardware and software together. To fully deliver true elastic infrastructure, the end user. And I got to say now three and a half years into this, having built this thing, I feel absolutely unequivocal on that. I mean, that was, I would say we had a pretty strong hunch going in pretty strong belief going in, but, um, believe that more strongly than ever, that you need both hardware and software together to deliver the infrastructure. Yeah. Brian, I I've been at arm's length from a lot of this stuff and exposed a lot of it on this show, but. Is it fair to say a lot of it was kind of all or nothing. That is to say we couldn't sort of have a root of trust and an A-speed, uh, BMC or something like that, that, uh, you know, there wasn't sort of a way to split the baby on this one. There was no way to split the baby. And then this is like actually a big challenge that we have had just as a company is what is the minimum viable product? I mean, we're a startup, you want to. have you want to have the minimum viable product that's a good idea the problem with this is that the minimum viable product is really really big and it's Adam you're exactly right there's no way to and I mean there have been companies that have tried to deliver just a slice and it's really hard to succeed for reasons that are because you only delivered a slice of what you need and no one wants to buy the slice they want to buy the full solution so it is you really need to do the whole thing and I think you know one of the things one of the big lessons that we had early on is you kind of had this idea that we'd be able to and I can I hate bringing this up again because I just so hate the number of times I said this aloud that we were going to quote-unquote tweak reference designs and you did say that kind of a lot okay you really did not need to back me up on that I've been really could have just sat that one out I mean you could have been I just did not need the yeah no I know I said it a lot I said it a lot and I I maybe I was I guess I was hopeful but the once you I mean just the act of getting rid of the BMC reference design is out like every single reference design that that a speed BMC is so entrenched into every reference design that the second you get rid of that thing like yeah you're on your own and you're on your own and you're in by the way nobody does it that way you're in absolute like bonkers territory and but boy again having done it now there is so much I mean we control the system to such a deep level and there are things that are just super natural for us super space natural there's so much supernatural about the way and poltergeists in the system that we have yeah no the there are so many things that are very natural for us so me as an example I had a I was talking to a someone who deploys a lot of infrastructure a lot of physical infrastructure and in particular he was like can you just tell me that you can monitor the power draw on the fans like sure absolutely we know exactly how much I mean for we know that actually in a couple of different dimensions but yes we absolutely know how much the fans are drawings like okay thank God because let me describe this bug I had for you where a a cascade of firmware bugs from HP in this case but it could be easily super micro or Dell but I had a cascade of bugs where the the ILO which is their BMC was mistakenly was using the draw of the CPU to determine what to do with fan speed and and for other bugs basically it had to do that and he had a spiky workload and what would happen is the workload would spike and they would see the current in rush and they would do what feels like the conservative thing which is crank the fans and then they would kind of slowly decay that fan speed and the problem is that the workload would spike with some regularity not enough regularity to actually really seriously warm up the part but enough regularity for afforded the ILO to crank the fans and leave him cranked and what he talked about a side quest what he had gone on was like I just want to determine how much power is going into the fans that's it and he ultimately got to the answer which was galling and he was across his entire infrastructure it was like hundreds of kilowatts that he was burning on this particular bug the arm but it was excruciating to just determine the draw of the fans and this is the kind of example where that decision is made so far away from the system software that actually has insight into what's going on from a workload perspective that there's no way to just like tweak a design to answer that question you really need to kind of start with a clean sheet of paper and that's the kind of thing that we've been able to do that is easy for us I mean it is easy for us to tell you exactly where the draw is going because we at every juncture we have picked components that allow us to write the software that allow us to query it to understand what's going on and ultimately correlate that with what you're actually running in the hypervisor in the control plane we can actually get you to that highest level question which is what workload is inducing this where how it was the question I know Adam you and I have talked about this over the years that it's kind of galling that we as software engineers can answer the question of what is the draw of this workload like how much power is this workload consuming we as a discipline have not been able to answer that question we have not been able to answer that question because of all of these sediment and layers that you can't cut across and so you really do need you can't do that a little bit you need to do the whole thing and because no one can answer those questions then a lot of people don't aren't aware of the fact that you've got you know up to 20% of power and data centers getting hoovered up into fan fan performance and running the cooling systems in these in systems which is galling I mean you should not have that kind of inefficiency for moving air in the data center and that takes away from how much CPU you can get in there DRAM storage and and instrumentation is huge but I think one other question in addition to what that person is asking which is why can't you do this is should you do this because I think that's you know that one of the questions that a lot of the companies we have talked to have asked themselves is like why are we in the business of building a bespoke private cloud right our customers don't know we do it they would be aghast if they realized how much of our team is responsible and fully subscribed for dealing with server vendors and storage vendors and software licensing and integration and maintenance and upkeep and firmware updates and warranty dealing with warranty and part replacement and that's me everything works that's assuming everything works and like what if we could take that 500 person team and point them at doing things that our customers do care about and the that's you know that that's the realization that a lot of folks are having once they have moved a certain set of their workloads to the public cloud is how do we get much much much more efficient on-prem and I think it becomes harder and harder to justify I wanted to go build your own kind of bespoke on-prem private cloud it's interesting because Brian as you were describing it even a single server is really this cacophony of different vendors you know all rolled up into a single piece into a single box but then you know Steve from your perspective you've also got a bunch of vendors in the large software and hardware so if there is some problem get a bunch of vendors and none of whom really is is incentivized to own up to the problem there's a lot of finger pointing oh absolutely and this is true yeah it's certainly true across devices or across a DC it is true within the box and I mean Dell bluntly is infamous for for switching parts underneath the same part number and you know I didn't even know that Toshiba made hard drives until they were in our data center inducing a performance problem and it's like I assume we were running HGST it's like no no no now you're running Toshiba drives it's the inability to kind of control that I mean it's such it's remarkable how I mean what a cacophony it is it is you know you use Timothy Roscoe's term Adam is congealed all of this congealed and that's the problem and it's got to actually we actually want to have it be designed and that's what we have endeavored to do there's actually a great tweet like a year or two ago where someone who had filed a ticket and they had some issue with their Dell VMware install which at the time Dell owned VMware and had said perfect I have an open ticket with VMware and Dell and they have to work together on my support ticket I feel like I'm dealing with my divorce parents exactly and then just like expand that to you know eight vendors instead of two yeah it's brutal and you know there's a Adam there's a good question in the chat about just in terms of that kind of rack scale efficiency I'm not sure at what kind of what order we want to take these things on I'm not sure given part of the goal of rack scale design is power efficiency through fans and backplane power bus bar can tell us about the approximate percentage improvement in power efficiency over a rack full of commodity hardware yeah and I think that and this kind of dovetails into another I think theme on those hacker news questions which is like yeah but like there's nothing left on the table or you're talking about 1 10th of 1% was one of the comments it's like you're definitely not talking about numbers that small and the reason is this when you take a clean sheet of paper from the rack level there are a whole bunch of things that you can go do that are actually not possible at the one you to you and part of it is indeed like the tyranny of that one you closure so when you when every server vendor is trying is is incentivized to deliver you the maximum density in the smallest unit they give you a 1u or a 2u that's kind of loaded with compute the problem is that you actually don't even get to to a full rack before you've tapped your rack out from a power perspective and what you've done is now you got a rack that's like a runt of a rack you've got a rack that's only like a quarter of the way up or a third the way up and it is screaming and I mean that acoustically it is screaming because those small fans struggle to move air so those small fans are operating at 15,000 rpm 20,000 rpm more to move air and as it turns out like fan the air movement is like on the order of the cube of the diameter of the fan and when you get to much larger fans you can actually operate those fans at with at much less rotational speed and move way more air and then when you do that you draw a less power so in part of the way we get that that efficiency is we're not actually doing anything magical with respect to the CPUs we are in fact our goal is to run the CPU at its max TDP and it's thermal design point what it's all of the rest of the draw in the system so it is for example it is that our fans operate at 2k rpm or plus minus they tend to operate at like 2,500 rpm even when that when the machine is cranked and acoustically by the way that is relatively speaking silent and it is striking when you see this in the whole rack on in front of you because it doesn't look like it's on it doesn't sound like it's on because the the fans are so quiet and they kind of go behind the rack and you kind of feel all this heat just dumping out on you so it is it is not about necessarily the what we're trying to do from an efficiency perspective is make sure that that 15k W rack budget we want all of that to go into useful work as much as possible we don't want that to be to be wasted so we want that to go to your compute we want that to go to to your NVMe drives as you need it we want to go to your networking we wanted to drive that to the things that you to go do it and the the multiplier here can actually be pretty significant because when we are exceed the other thing that we've eliminated is we've eliminated the redundant AC power supplies that exist in that those one you to you enclosures where you've got a redundant AC power supplies that are converting from AC to DC and no one running at scale does it that way everyone running at scale runs with a DC bus bar based system where you do your power conversion in one part of the rack and then you run DC up and down a big honking piece of copper and you can't buy that system from Dell or HP or Supermicro and the efficiency gains over there just just that gives you a really appreciable and important efficiency gain but the and and we're gonna have like Google and Facebook and I'll do it yeah sorry I'm good hey just one thing Adam because a couple people that in saw were asking questions around gosh it would be nice to see what this thing is like but before having to write a big check and I mentioned it in there but we are striving to have the availability of kind of lab infrastructure that certainly it's gonna be hard to fulfill a bevy of requests but that we want to give people the opportunity to come in kind of test drive get familiar with and look at the software experience of the system without having to buy a full rack so that's coming soon and another really good question an important question in the chat and I sure I want to use this to tease an episode for next week I'm asking about the questions we love to hear but like hey I want to know about like shipping insurance logistics installation site who does the install like let's get to really brass tacks of this thing just operational questions around how this rack mechanically gets from where it's manufactured to me and area if you don't mind in the chat on that I would love to let's take those questions next week because we're gonna have next week we're gonna be joined by the operations team at oxide that has been absolutely just busting their butts for the last three and a half years to get this thing shipped and there's a whole lot we want to go talk about I want to I want us to talk about the engineering of the crate because Adam have you been to the crate is itself zone like absolute engineering marvel as far as I'm certainly taking like I've reiterated like great yeah like taking a taking I'm racking a rack or I'm creating a rack rather without instructions was great it was like it felt like one of these kind of origami creations that it's intuitive and like the the tools were sort of there it wasn't like hunting for a hex wrench or whatever it was awesome so we want to I think we want to have an in-depth conversation on all that stuff when we got the opposite because they're the the ones that you really want to hear and they are taking a much much much deserved time off so we want to catch up with them next week should go back to some hacker news all right sweet so let's see one says seems like oxide is aiming to be the Apple of enterprise hardware which isn't too surprising given the background of people involved some used to be something like that as were other fully integrated providers though granted some didn't write its own Unix from scratch almost like coming full circle from the days where hardware and software was all done in integrated fashion before Linux turned up and started to run on your toaster yes yeah there's and that indeed hits a big thing we're certainly not that we find things to emulate in both Apple and Sun for sure I think what we see that that both those companies have in common and by the way I have in common with a lot of other companies that people emulate is is this idea of integrated hardware and software in a unified system and you know one of the things that has been was certainly when we were initially raising very frustrating for us is how a kind of classic that idea felt because it doesn't feel kind of classic to us it feels like you know integrated hardware and software there's another company called Nvidia that's pretty good and integrated hardware and software and obviously Apple and you know Sun I Adam you know I would probably be a little more jaundiced about Sun back in the day Sun definitely did it but also didn't do it as well as we wanted them to do it we really tried to be tried to implement that vision certainly at Fishworks and that's part of the reason why when we got to Eclipse it was such a breath of fresh air because finally we were talking I think we talked about this in our episode on hard tech investing that the it was such a breath of fresh air to encounter an investor who was like who was completing our sentences like you know we've done the math and you know whatever it was Steve was it like 19 out of the largest 25 companies ever built have hardware and software together so we it's not hardware and software together for integration sake and for doing both it's because that is required to be able to deliver what the customer wants that's right is this better experience this services based experience and you can't control that experience if you're only doing half of the equation right you've really got to do you've got to take this holistic system approach and that's been really important so I think that that's what we would emulate in both companies Adam I think that the and certainly you know we see that to emulate in Apple we did have a VC at one point that was asking us when we were originally doing our raise you know what's the the best analog for oxide and this is one of those moments where the mouth started moving before the brain was really in gear and before I could really check myself I had already said at the AS 400 which is definitely like and I you know it's one of those things where I like I said the AS 400 you got to get on the you know the rest of your brain to kind of doing the slow clap behind you Adam you're like nice going nice guys you would have known that it was sort of it was meant to be yeah if it had been that one right VC that's right well I've been looking to invest in the AS 400 of 2020 coming at the AS 400 of the future is what I've been telling all my partners we need to find and of course like my brain is like yeah yeah don't say iPhone don't bother don't bother to say the iPhone let's go the AS 400 why not why not yeah give me a history lesson Cantrell you everyone loves history exactly and it's like it's like oh yep he's saying system 38 he's doing it well there you go this is you know why do I bother I the but the AS 400 was another example of really delivering and honestly Adam what you and I did at Fishbrooks was an example of this where what you are delivering is instant value for the customer I mean one thing I meant how Adam I knew you had if you had a chance to run wicket yourself yeah I was oh my god I have not actually run it I've seen only other people running it but we've got our own rack here that we run our that we've been using to run infrastructure on and we know it's been great obviously that just says consuming your own product you learn a lot about it and this week is my turn to actually run it so I was doing the the fresh install on the rack today I was giggling as I was running like I mean did the installation experience it's ridiculous it is so I mean it's it's kind of like unspeakably delightful you know what I want I want to have the first person who has suffered through Dell HPE Supermicro Cisco Arista VMware setting up a cloud and then goes to wheels this rack in and connects to this thing over the technician port and they are configuring the rack again it's just this unbelievably gorgeous experience it's a textual based GUI right it's like takes over the screen and it's just so gorgeous and it's kind of defies my expectations of what one could do in ASCII. It absolutely defies expectations of what one could do in ASCII and you know kudos to Andrew and Ray and John and everyone who's been working on this together but this is amazing and I mean I was giggling when I was doing it it's so incredibly delightful and what I am looking forward to is then the technician the Operator the engineer the SRE that then goes to describe that experience to their peer who wasn't there And it's gonna sound like they were having a fever dream It's just gonna sound like are you listening to yourself? Like this is you you just sound it's like, you know You were in this nirvana. I this it nirvana where things magically happened. It's like the land of chocolate But it was is really and you know, that's the kind of experience That you and I was Frank's I was just talking to raid or today and rains like yeah, you know, I really you know I had her background was coming from Facebook's like I really don't know what the kind of like The state what is the state of the art here? And it's like very bad Very bad. It's the state of the art is you know I PMI and writing down IP addresses in your notebook and then you know suffering through configuration screens trying to hit f1 at the right time and AVM Wait, like trying to network boot one of these servers where you're logged into, you know, the two options are some HTA You know HTML 5 versus Java Virtual console and you have to like figure out how to input the secret keys at the right moment and you know often it works and sometimes it doesn't it's it's lunacy and and as soon as you have to go back to that you realize how How much disrespect maybe the industry has for the people running those commands Totally absolutely putting it really really well because I think we've we've we've seen You know some of the lower level systems access parts of the product that we've shown off to prospective customers are some of the things they've gotten most excited about because these are some of the areas of the systems they have to engage with that are completely overlooked and That haven't been because there's just no empathy for The systems operator network operator person who's got to update firmware And it is I think that's it Just that there's just been no thoughtfulness that has gone into that and it is I'm looking forward to test driving that. Oh It's amazing. That is ignorance and some of it is Just technical obstacles, you know, like the folks like certainly folks like at Google and AWS Value the time of operators at least in the sense of they want An operator to be able to manage as many systems as possible Same thing that that other companies want they just don't have access to the tools that would allow them to do that Totally, that's good point Okay, so maybe a tougher question here. I truly and honestly hope you succeed I Know for certain that the market for on-prem will remain large for a certain sector for the foreseeable future However, okay. Yeah, exactly now even more braced However, right the kind of customer who spends this type of money can be conservative They already have to go with an unknown vendor and rely on unknown hardware Then they end up with a hypervisor virtually no one else in the same market segment uses Would you say that KVM or ESX I would have been an easier sell or harder sell here? Innovation budget can be a useful concept, but I'm afraid it's being stretched a lot So the question just in terms of you know, how does this thing get consumed? Totally and I think it was you know a bit of a an open question wasn't open for very long But we did kind of wonder what do we do about the hypervisor? Definitely and When we had some advisors to the company early we're like you play you really need to be sure you can run ESX on the Exi on this thing. It's like yeah, no, we're not gonna do that In part because we know that we can deliver more value Are we and we had a lot of experience with our own hypervisor at joint? SmartOS beehive and kind of had a lot of experience in that domain So we we knew we could go do that we also felt that there were a lot of reasons why VMware is not really popular with their own customers and you know actually that same early advisor to the company when You know VMware and knows if it's gonna close or not But when when Broadcom announced the acquisition of VMware that same advisors like a boy you guys were so smart to not do yes I have Alright but the And and then began to rattle off a lot of supporting detail about how even in the last three years. I mean, it's to be fair to their perspective because honestly that perspective was Has shifted in part because the company itself has shifted as it has really gone and become very rent-seeking so I think that you know the question like hey, these folks are conservative and That's definitely that is true I mean, I would say that like what they're doing a I would I would phrase it slightly differently In that what they're doing is important and what they're delivering is important and they treat it with with Gravitas they they take their responsibility to their own customers seriously, and they need to know that they're getting a High-quality product that a company stands behind I think part of the frustration that they are currently feeling is I'm frustrated with Dell I'm frustrated HP. I'm frustrated super micro. I'm frustrated with Cisco I'm also really frustrated with VMware and then I have got and by the way Like it VMware being bought by Broadcom does nothing for my frustration So I think that that comment is is correctly identifying some of the natural reticence to just you know Deploy the latest technology or the latest thing simply because it's new but it may be underestimating the level of frustration that people have With VMware in particular and especially as they're looking to go Negotiate a new agreement with VMware. It's like they're they're not feeling necessarily great about it Well, and I think I mean our airlines, right? Like you use the one that screwed you over least recently and then you just move in a circle forever That's right. Yeah, and I mean they're kind of keying in they are keying in on business risk like, you know, can obviously new company So can I trust that the company will be? Viable as long as I'm gonna be making an investment in the technology and this is a big part of being able to find the right partners the right the right investment partners that were signed up to stand behind oxide and and we've been very very fortunate to have a great team of investors around the company that have a Decade plus long vision for for what we're gonna go do and have been Willing to jump on the phone with fortune 500 companies to talk to them about how they view the company and and The longevity it's you know, we think it's super important that we are very transparent Yeah about what we're building because I mean I would you can you can kind of flip it around and you can say You know, is it? is it better to have a Something that someone else has run before that, you know nothing about or to kind of know everything about the thing that you're now adopting and What we've heard from customers the fact that we are opening up the software stack The folk that we the fact that we've been as transparent as we've been about what we're building how we're building it indeed this very Podcast your listener is a part of that transparency and what we've heard from folks that are in this conservative set right this sort of fortune 1000 demographic is It is precisely because of that that they've been able to socialize and build trust internally in the organizations that have allowed them to Take the first step and and I think you as you mentioned earlier it's like, you know that it was in question for a period of time, but not long and Now we are we're shipping to that demographic and it's it It also is going to be very helpful as we get more and more installs there that it will make it more comfortable For the ones coming after absolutely, I mean the proof is is always in the pudding and You know I think that we and indeed, you know three and a half years ago people were wondering about like boy You're looking at AMD versus Intel and making all of the same arguments In fact, we had another different advisor to the companies Like I think you're making a real mistake by going to AMD because no one's gonna adopt AMD and we're like, yeah But if you look at just look at the numbers look at our analysis What hole are you finding in the analysis here and Needless to say we are not at all surprised by what has happened in the the last three and a half years for the relative fates and Not that it you know never one should never discount Intel's ability to compete certainly, but but we knew that like that AMD by delivering a Superior microprocessor product would win people over and you win people over with with a better product and better economics and so on So we we believe that in the in the limit, you know We've got something right compelling here and in the meantime, it is that transparency and trust that is so important to us Yeah, and customers are looking for you know before they're asking. Oh, what's the hypervisor? They're asking like what is the interface that my development teams are gonna operate against? It's like do you will will terraform work? And and they mean they care about the hypervisor in as much as they care In as much as they have up stack third-party software constraints that they want to validate We have not run into those that are disqualified and we're gonna continue, you know being able to support more and more and more as we as we go, but they're they're looking for a Bunch of things that include like when I have an issue with the application that I'm running on this infrastructure How many different companies do I have to call right and indeed? Right now it's like five or six the right now state-of-the-art is it's five or six and it is really asking for permission for Them to tell you to go fuck yourself. I mean because None of those five is gonna actually own the problem even when the problem is indisputably there So this is the thing that is really really really frustrating is the cacophony inside the bomb Adam That's when you really get and we did it we had a brutal problem where we were having machines reset due to a dim failure do it do a dim error and You know, we get the runaround from the single vendor that that sold us the part, but that sold us the unit We're getting the runaround and they're trying to blame. They're trying to blame everybody else They're trying to blame every one of their suppliers. They're trying to blame and then you know, we're the only customer that's seeing this I mean, they're not ultimately and and the kind of the realization was They are not taking responsibility for this problem. Not because they don't want to at some level But because they can't they can't because they didn't actually build the whole thing. They actually don't know how it works and That is a real problem. And one of the things that we believe that is our core differentiators a company Because we do actually understand how the whole thing works top to bottom we can absolutely take responsibility for For any problem within there and as we one of the things you're gonna hear us talk about is delivering oxide value Delivering oxide value is the capacity to to support that for the customer So when we when we look at a component when we look at a part of the system We want to know that we can deliver oxide value with that component and that which is to say we want to know that we Can actually support any problem that that the system might have as a result of this component. Oh My god, it's in training says usually they blame the operating system first Absolutely. Oh god, I mean you should I mean God and and and you know I used to think because you know, we were at joint we were running this a Lumos derivative smart OS and That where I'm getting you of course the second they find out that we're not right. Wait a minute. You're not running Linux Oh, well, then that's the problem. It's like no. No, but wait a minute unsupported configuration the end I was breaking figuration and so literally we had a Dell perk issue where the perk the machine would not boot because the perk had a parody error and you're like it's a smart OS issue the perk is the is the raid controller and They're like it's a smart OS issue. It's like smart OS is seeing through space and time and preventing this machine from booting I don't understand how like Even before we have even executed Yes, that's right, that's right Yeah, it's like reminds me when I was in college, you know, they didn't support Linux on the university network But of course I was trying to do that. And so I'd like email, you know tech desk help with like hey You know, this isn't quite working and they would be like What does it say when you open this control panel and put that in and I'd be like, oh, yeah I definitely opened that control panel You know, it just like completely and then eventually at some point, you know They would like figure out I was actually using Linux and be like, yeah, we just don't support that. I'm like But you could I don't Well in the thing that I have, you know Since or it's obviously like fine like you're on trust me that we get really used to that answer to the point like alright Yeah, I get it fine. Yeah, it's our fault. Somehow. We're preventing you from booting or whatever the But what you learn is that like actually everyone gets that run and it's like oh like which version of Ubuntu You're running I go run a different version of Ubuntu like oh Are you running with all like all the patches like download these patches? I get this got nothing to do with my problem though and and the and you realize that all of that stuff is Actually an excuse for not understanding the problem and it's a terrible customer experience. I don't care what you are a customer of But to be told that I'm not gonna investigate your problem because of something that you're doing It's basically I mean it is quite literally victim blaming It is like you have a problem because it's you I found the problem you dear customer You are the problem and you're like, you know what? Maybe I am the problem. Maybe I you know what? I am the problem. I'm gonna remove myself from this and actually on that perk issue Adam I was so frustrated. This is kind of like back in the day. This is in 2010 and being told in particular the other thing they're telling is like I It had this is the the Dell reasoning why this has to be a smart OS problem Because we're not seeing it from any other customer and you're like, okay I are you are you not seeing it from any other customer or is no other customer telling you means like again? You may be speaking your own truth but I refuse to believe that we are somehow the only customer seeing this and I gave a presentation and There were like 300 people in the room. This is surge 2010. I'm like, hey just before I start my presentation Um, is anyone seeing a parody errors on a Dell perk whatever it was h700 or whatever it was and you see in a room of 300 you see maybe like nine hands shoot up like definitely not zero and You could just see like the nine hands all making eye contact with one another being like, wait a minute okay, I'm not the only one seeing this and the so with very much everyone had been told you're the only one seeing this problem and it is a It's a terrible customer experience And we want to we believe that in order to be able to deliver better you need to be able to system but then importantly You can deliver better and you can deliver a much better customer experience and that's very important just kind of to kind of pull it Back to that original question For those folks that are delivering very important workloads to their customers That level of support is really important and the knowledge that we can actually provide that is really really important to these folks and I mean the commenters right in that these organizations are not there They're not gonna buy the latest thing just because it's the latest thing But they they also are They've got a real problem in front of them and they want to find a way to solve it and oxide actually provides a vector To help solve that it understood the the pain that they're in even though the pain is the status quo Absolutely What is the interface when I turn this computer on what is the zero to first value when I buy this hardware Oh Great question a question. I mean that is just yeah that's the especially given the time to value for for on-prem today is We've heard up to 90 days from the time all the boxes land in the data center to developers getting on and actually being productive So what what the experience that we are delivering for customers is you roll the rack in You have to give it power and you have to give it networking. You have to check the height of your doors you do have check the head of your doors, but Just the it's right a little water bowl and you give it a bed that's and That's right. You don't want you don't want to have Ideally no speed bumps between the loading dock and the data center. Yes but but you and the experience that Brian you were talking about earlier wicked this kind of rack setup service that But but you get it that you get it into the data center get it to its its floor tile give it networking give it power and You are then off on starting the software experience there's a modicum of configuration that you that it needs as a literal kind of bootstrap configuration you provide that and Yeah, then you're but the expectation is within I would say I mean I've been saying a day and then you will scoff and say We'll stop one hour. I will scoff at the yeah Well, cuz you've been saying because a day is so much better than 90 I know you've been saying like a day or a small number of days I'm like look I know that normally you're making a claim and I'm telling you to like cool your jets But in this case like heat your jets up a little bit It's like no, it's I can take a day. I mean, I guess like, you know, maybe but but same day You are opening up a large pool of infrastructure resources to your customers namely software development teams SRE teams platform teams And they are able to interface with an API CLI or a console to go create a project to programmatically like, you know script to deploy instances and configurations for the software they want to go run invite other teammates be able to Integrate into the off system that they use today so the experience should be like going to You know for those that have run in AWS or GCP that you can go to an elastic compute service storage service and set of network and security services and Be productive deploying software in a matter of minutes and that should that that will all take place Well, I guess we're gonna say now with within an hour or two Right. Yeah, there you go rolling the rack which is When we have told folks this it's unbelievable. Yeah, they've definitely Been a disbelief To come to Steve's defense here slightly Brian. I think your last word there is totally accurate like it's Unbelievable, right as a sometimes you have to tell people an answer that's much longer than it actually is Because they just literally will not believe you I I used to work in the payment space and I deal with banks and one of my responsibilities was talking to like the vendors upstream and they used to always laugh at our calls because like I would be like I Would like this tomorrow and they were like, oh we were hoping you'd say two weeks but like the the person with the longest bet was like three months and it's just because those time scales are like so much longer Than they are in like our corner of the world that like yeah People won't believe you if you tell them it's only an hour when 90 days is their norm So even telling them like a couple days like seems hard to believe It's hard to believe no, it totally is and that's actually yeah, it seems like a total stretch and it is So then so they can provision, you know arbitrarily sized Instances run arbitrary operating systems in those instances and be able to kind of carve up the system to meet compute-intensive, memory-intensive, IO-intensive, storage-intensive, like whatever the particular application or set of instances require or software requires, be able to do that and do that programmatically. And so again, for those that have used EC2 and EBS and VPC-like things, very familiar. For those that haven't, it's going to be a pretty remarkable experience. And importantly, and Steve, you said it in there, but I just want to emphasize, you said doing this over console, over CLI, over API, and one of the things that I'm really proud of what the team has done is allow you to use any of those three vectors for more or less anything in the system. I mean, it is really remarkable. It's a huge credit to, I know, work that you personally have done, but it's been, and God, the UI, the console UI, which I feel like maybe we have not emphasized enough, certainly around here, is just, it is so fast. It is really, really nice. And that team has done just a beautiful job on the web console, but then also having those same interfaces available via the CLI, via the API, allows you to pick whatever the right vector is. I got to be told in the chat that you should talk about the UI more than the 80 millimeter fades. All right, listen, I, you know, we don't need to choose between the UI and the 80 millimeter fades. I can love them both. It loves both children equally. Exactly. You know, when Bridget was pregnant with our third, my mom had a great lunch. You find that your love expands, but your time does not. And my love expands, all right, old crow, my time, my love expands, my time may not, and I will give more time to the UI because my love is, I have love for verbatim. I love for both the UI and the 80 millimeter fades. Well, speaking of time not expanding, let's keep it moving. But the 80 millimeter fades did come first. Everyone's got a favorite term. One of my concerns when buying a complete solution, like an iPhone or an Oxide rack when you face, is how much ownership I have over the device. Totally. Where does Oxide draw the line on ownership of the rack? Yeah, that's a great question. And for us, it's actually really important that it's your computer. So you've bought the computer. It belongs to you. And one of our challenges is, and this is, I mean, I would say this is without precedent, but we are shipping you a distributed system with that computer. So there's some special like challenges for, you know, how we support that, how we enable that. But the computer is yours. It's very funny in the abstract, I have to clarify that, right? Like, it sounds like you purchased a thing, you have it. We actually do need to clarify that. But it's just like in the abstract, it sounds totally ridiculous. It is. It is true. Yeah, this is where we live now, where we actually need to clarify that. The thing you bought. The thing you bought is actually not a loss leader so we can sell you more ads. It's actually like a thing you bought. So in terms of like the ownership of the system, it is actually, it is important to us. And it's important to us as an abstract point, I think, and important to us individually as technologists and as employees of Oxide, that it is your computer. And we want to really enable that ownership. And I think that extends in a lot of different dimensions. And we want to be transparent about, so you've got a operator level and a developer level, kind of an end user customer of the system for our customers. And much like them setting up accounts in the public cloud, they will be setting up accounts and provisioning infrastructure and operating at that layer. And you'll have folks in many organizations that are responsible for kind of maintaining and managing the infrastructure that software teams are running on at what would be an SRE or platform team kind of layer. And then you've got the operations team, traditionally, that are responsible for kind of care and upkeep management of the lower level systems infrastructure. And so we will have a set of operator interfaces that allow them to understand what the system is doing and make sure that they can kind of manage and maintain and set expectations internally. And then anything that we are kind of injecting ourselves into as a way of kind of support and updates, etc., is, to Brian, your point, just making sure that this complicated distributed system is running well. It's in the interest of making sure that the customer is getting, you know, a highly available and efficient system that is running. So if there are places where customers trying to go into the lowest layers of the system could put that at risk, you know, we're going to be upfront and transparent around that. So just to sharpen that point, Ian is asking, do we sell support contracts? And does it come with a certain number of years of updates? So we do. It comes with a subscription that allows one to get all software updates and, again, all hardware warrantied. And those come typically in three years. But we have folks that are going to be getting them longer than that and shorter than that. So there are some folks that can do it only annually, and that is fine. We're very flexible on the timing of that. Another great question just to follow up to that is, is the rack dependent on any Oxide cloud services or is it entirely standalone? I don't mean to laugh because I just laugh at Josh's suffering every time I think of physical infrastructure that relies on – we got a bunch of ubiquity here that was maybe a debatable decision. What's that? Mistake. Yeah, and that thing has an AWS console that apparently, like, works 9 to 5. That console is not extremely frustrating. So this is a long way of saying emphatically not. In fact, it's very important to us that the Oxide rack is entirely standalone, that it is not going to Oxide for any cloud services. So very, very important. However, for updates, it will fetch it from what is arguably a cloud service, that is to say, like, a web server running somewhere. And, you know, there are – Yeah. But, I mean, your broader point is the most important one, which is, like, this is not, like, AWS Outposts. This is not some, you know, Vassal, some piece of a larger cloud. This is your cloud running independently. I just think they should rename it Outposts to Vassals. Like, oh, okay. Outposts has kind of that sort of connotation. It does have a connotation. Like, let's go all the way. Let's just call them Vassals. Totally, Adam, that's a very good point that, like, ultimately, in order to get updates in, and then the other thing is, like, okay, well, what if I want to get support data out? Those would be – and that's ultimately – but the customer has total agency over that data in and over that data out. That's not happening with kind of an implicit cloud service. There was another – yeah. Please go ahead, Brian. Go ahead, Adam. Yeah, yeah. Well, I was going to change it back to some of the comments in Hacker News, just because we've been – there were some acerbic ones, but I did want to read a couple of the nice ones. Someone says, this is super cool. I realize a lot of HN folks might not see the point of this, but it literally saves an entire team of people for companies. Another one says, Oxide is such an ambitious project. I'm such a fan of the aesthetic and design and, of course, transparency of all the people who work there. I'd love to have a rack or two someday. Call us. Not to cut you off, mentioning the good comments, but just to reinforce one of those points, there's a demographic of folks, the large cloud SaaS companies, that we don't talk a lot about, but we've had conversations with some of the biggest, most well-known, and their ambitions don't lie in this online conversation about cloud repatriation and cutting costs. That is of interest to these firms, but they're more interested in, how do we grow our business over the next 10 years, and how do we capture more data that sits outside of the public cloud? For those companies, they're thinking about, how do we extend our infrastructure beyond just running on top of one of the big three cloud providers? I can tell you, there is no path that includes, let me go compile six or seven vendors' worth of infrastructure to build that team, Adam, that you just mentioned, which is saving someone building an entire team. I think that just, again, speaks to, yes, there's a need for operational efficiency in classic on-prem enterprises. The cloud SaaS folks are trying to figure that out too, because they can't go build this antiquated team or this team for legacy solutions to go extend beyond the public cloud. One comment that I had to read just for me, because I had to read through all these Hacker News comments, which you know is not my favorite. This person writes, FYI, for language pedants like me, it's on-premises or on-prem. A premise is something assumed to be true. So I have that as a GSA that I endorse. Hey, Adam, I can only assume that this is one of your alts. Yeah, well, whoever wrote that, what a genius. What a genius. Clearly, this is – have we put your supercut in the Oxide channel yet? We definitely need – I know we've talked about the supercut before. The supercuts – could you describe the supercut again? Because it's just – Well, so I was watching reInvent, and I was there, but someone told me whenever you go to reInvent, you just watch the keynote from your hotel room. So I was following that sage wisdom. And Andy Jassy got on stage with Pat Gelsinger, then the CEO of VMware. And Andy Jassy kept on talking about outposts, on-premises, doing work on-premises, having VMware on-premises. And then Pat Gelsinger comes out and starts saying on-premise infrastructure, on-premise compute. And it was almost as though Jassy was overemphasizing it to try to correct him and pull him back. Are we talking about on-premises infrastructure? Yes, I'm talking about on-premise infrastructure. We are at an impasse then, friend. Oh, I see what you're saying. The premise is that the infrastructure is in your data center. So you did a supercut. Yes. Yes, it took a very long time. I'm not very good at video editing. I'm only slightly better at audio editing. But it was – it really is delightful. The supercut – I would like to believe that the supercut has paid dividends because it was really very delightful. Gelsinger and Jassy, of course. Jassy being correct in this case. It is on-premises. Please. Adam, a question that came up in the chat that has also come up a bunch, did come up in the Hacker News threads, has come up in the past, and is one that I definitely want to tackle. It's a reasonable question. It's like, hey, how about something smaller? When is Oxide going to make a smaller rack? Like, I like this, but I want it for my home lab. Or I like this, but I want it for the community college where I'm an IT administrator. I could really use this. And I just want to speak to that a little bit because we definitely – well, the home lab probably – like, home lab – sorry. Love you, home lab. Probably not going to be for the home lab. Come on. You love to tinker. That's part of the home lab. And for the home lab, good news. It's all open source and you should go play around with a Nucleo board. There's a bunch of stuff you can go do in the home lab. For that, though, that kind of small enterprise user, we definitely see you. And our belief, and I think it remains, that we wanted to tackle the whole rack problem because this is a problem that is easier to scale down than up. And I think one of our concerns when we started the company is if you start small, it can be really, really hard to get to the size that you actually need to get to for these large multi-rack enterprise customers. So we are focused on those large multi-rack enterprise customers right now. But we have done so with a deliberate eye towards an architecture because we absolutely see those small to medium-sized businesses, the car dealerships, the community colleges, the retail establishments, the retailers, the amusement parks, the attractions. We see those use cases, and we know that a nine-foot rack drawing 15kW is not necessarily the right fit for all those. But we have built this rack, which is not to say, I would love to tell you we've got something immediately forthcoming. We definitely don't. But we've also, architecturally, there is nothing here that won't scale down to a point. It's not going to go. Ultimately, it is not going to go to the home lab. Ultimately, there are limits to where it's going. It's not going under the desk. It's not going under the desk. A bunch of us do have gimlets at home. But I think the questions have come in a couple of different dimensions. One has been, hey, can you scale this down from a power perspective? And the answer to that is yes. So we've got folks that are interested in the nine feet is not a constraint. And they have room for that, but not for power. And so you actually can deploy it as is with fewer sleds. For sure. Which would bring that power requirement down quite a bit. The other thing that's great is that as we think about a future where there's different form factors, a big part of this was getting the software right first. That's right. And so not having to go build a different set of software to go support a smaller footprint. I think we've done a lot of the heavy lifting to be able to support those form factors. We just have to figure out what the broadest ask for the market is going to be once we're out of or beyond the core data center or rack size kind of edge deployment use case. And I would say this is one where we're definitely keeping our ear to the market. So if you've got a particular use case where it's like, hey, should you hear about my use case? We would love to hear from you because we really, this is one of those that we're going to want to be really paying close attention to because it is something that is just, it requires so little from us architecturally. And then I think the other one that we probably want to tackle, and sorry, I know Tom is here. Tom Lyon is here. It's great to see you, Tom, in the chat. And Tom's like, God, I'm so relieved that no one has said AI or edge. So of course, Tom, by just saying that, you've summoned me saying at least those AI workloads. It's another question that comes up. Actually, surprisingly, I don't think it did come up in the Hacker News thread, which is kind of interesting. No, it didn't. People didn't seem to latch onto GPU or in particular our lack of support for GPU. Which is kind of surprising. But actually maybe that just reflects that we are, people actually understand the need for general purpose compute in addition to, obviously, that high performance compute on the GPGPU, we obviously understand the need for. I talked earlier about delivering oxide value. It is hard for us to see how we deliver oxide value with NVIDIA. NVIDIA is a very proprietary company. And one of the things that's very important to us is that end customer has a problem. We need to be able to support them all the way through. And with NVIDIA, when you've got a problem, it's really hard when your version of open source software is a trampoline into your proprietary firmware, really, really hard to actually go support that end to end. So I don't think it's impossible to see how we do with NVIDIA, but it's really hard. It's a strain. And NVIDIA is not exactly, I think NVIDIA is, I don't necessarily know that they care about oxide. So I probably don't care about our opinion on that one anyway. So as we are looking to those workloads, again, want to move very, very carefully, really listening to the market, but we are definitely seeing some interesting things out there. So we're paying attention to some of those things that are not necessarily NVIDIA. We obviously know that KUDO barrier is a huge one. Again, NVIDIA has, they're very proprietary, but they have properly invested in hardware and software together, and it really shows in the depth of their mode. So someone in the chat is talking about AMD GPUs. Obviously, we've got a very close relationship with AMD. We love what they're doing there. That's something to pay really close attention to. And just in the abstract, we are paying attention to the space, but that's not something. Right now, our product is really focused on that compute storage networking. Like our product, if you compare to AWS, is like four or five of their services at best, and their service menu stretches across many, many screens. For any given sector, there's five different services they could bring to bear. So there's lots of opportunity for us to fill out that roadmap. That's right. Another good question was around, sorry, Adam, go ahead. No, please. I was going to, a question about Firecracker, and could you compare Firecracker to your hypervisor? We actually looked at Firecracker. We took a pretty deep look at Firecracker. There are things we like about it. It's in Rust, which is great. It's kind of a de novo implementation, which is nice. Ultimately concluded that it just didn't have the same use case. We are really focused on that, for lack of a better word, industrial VM use case, where, as Dan's pointing out in the chat, that Firecracker is based on cross VM. We are really more focused on, it's very important to us that we can run Windows as a guest, that we can run arbitrary Linux guests, that we can run, yes, SCO open server as a guest. I know it's super important. Heard. Heard needs to run, or else nobody would buy it. I am actually trolling one of our number. Years ago, we had a customer who was e-mailing us this back in joint days and really needed SCO to be running. So Clue did some absolutely heroic work to get SCO running. I know we can do it again. We'll do it again, Josh. We did it before. We'll do it again. SCO will be... But it's important to us that we can run effectively arbitrary guests. And Firecracker just doesn't have that same ambition, which is fine. The other thing that's really important for us, and Jordan, I saw mentioned it in the chat, something that we have not spoken a huge amount about, we definitely need to have an episode dedicated to it at some point, is live migration. So another thing that we saw, and this comes from some hard wisdom that we had learned at Joann, that if you don't allow for transparent workload migration... Adam, do you remember when VMware did vMotion? I think there was a certain degree. Really? That seems like, is that a toy? Is that real? And I don't know, maybe, Adam, you didn't have that same experience. I didn't understand the use case, and it felt like black magic, like terrifying, awesome, amazing. But it turns out vMotion is really, really important, and the ability to live migrate a workload is really important, because if you can't do that, you end up with these islands of compute that you can't do anything with. And so when people talk about the inability to maximize the utilization of a DC or of a rack, it is often because it's like, no, no, I can't go, and yeah, I know, that machine looks like it's 80% available. It's actually not. I've got one workload on there that I'm not allowed to turn off, and I can't migrate it, and that machine is out of warranty. So as soon as that workload is turned off, that thing's being deracked. So, and we had this problem a lot, where it was very hard to do lifecycle management if you can't live migrate. So one of the things that was important to us as we're looking at the hypervisor and the use of a machine model was the ability to build live migration, which the team has done just an extraordinary job of doing. And a demo for the ages was Greg and James in a shared Minecraft server that was being furiously migrated around the rack, which was great. That's awesome. But so that was another very important dimension as we were looking at a hypervisor is the ability to go to exactly that, and another reason why Firecracker was not a great fit for us. There are a couple of simple questions on Hacker News, some of which I think have simple answers, some of which have complicated answers. One is, are you shipping Milan racks? And if so, what does moving to Genoa entail for Oxide? I'd also note that there was another comment, which I won't bother reading, that said, that listed... Read it, read it, quote me. The listed items are for last-gen CPUs and two-gen old NICs. You want the rest of it too? Also ZFS rather than SAV, it's hard, blah, blah, blah. Anyway. Yeah, there you go. Yeah, I mean, I do think it's kind of ridiculous to be like, these are old-generation CPUs. It's like Genoa was literally... I mean, the release of Genoa was in November of last year. If we were on Genoa, we would not have a product for another 18 months. That is the reality. No one's using two-by-100 NICs anymore. No one's using two-by-100 NICs. Exactly. I don't think I could saturate 10% of that. Right, I know. Oh, God. Just ridiculous. But we are based on Milan. So 7713P, single socket, great part. Genoa, obviously, AMD has been a terrific partner, and we absolutely will have a Genoa-based sled. There are some challenges with Genoa. Genoa, the GDP is higher in a way that's pretty challenging, and we are going to want to, again, keep a very close ear to the market in terms of what the market needs and for compute density. I mean, we know that from a compute density perspective, the 7713P crushes it. It's a great part if you look at the cores per watt. It's really terrific. And I think as we're looking at the Genoa SKU stack, we're figuring out exactly where we're going to tack in there. And we spend so much time on the AMD roadmap, I can't remember what's NDA and what's not, so I'm just not going to speak to it, but we're also looking at what comes next from Genoa. There's a bunch of stuff interesting there. We are certainly going, we will do a design around their next-gen socket for sure. So that's, I mean, the big lift is the next-gen socket, and we are absolutely, you will see a Genoa-based product from us, but that is... And importantly, architecturally, the rack-level design is such that you deploy a rack, a set of racks in your data center. You then have the opportunity to go add sleds that are the next-generation sled in that same rack or set of racks, kind of mix and match. So you have modularity in terms of what you need, and it's not going to require ripping out an oxide rack, putting in a new one. Because the rack itself was designed for you to sustain several generations. That's right. Yep. Yeah, absolutely. I mean, we view the rack as being really, I mean, that's the platform under which we're going to go build. And so people are asking about the actual throughput of the rack. So yeah, it is two by 100 dropped in to each sled. So we've actually got 6.4 terabits of networking that faces the rack, and then another 32 ports on the other side that faces the network, so that faces the customers' network. And Aurean made a terrific observation kind of early on that like, hey, wait a minute, we can actually just use some of these front-linking ports to directly connect racks together and actually be able to grow to some number of racks without having to actually add additional core networking at all, which is really kind of neat. So we've got, I think, ample networking. I would also direct folks to our episode on a measurement two years in the making where we talked about all of the challenges of actually getting to 28-gig NRZ and then trying to get to 56-gig PAM4 and all the kind of the SI challenges there. But I think we've got ample, despite your Hacker News comment, Adam, I believe that we have got ample throughput on our cable backplane and our switch. Another question. Do you have liquid cooling solution collaborators? So our first collaborator in the kind of augmented cooling space is with a company that designs chiller doors, a company called Motiver, and we do not do liquid cooling in the system. So our first product does not have liquid cooling as part of the architecture, but where we are deploying, where folks have additional considerations where they need to pull hot air out, we have worked with companies that are building chiller doors to be able to capture that air and then convert that to room temperature air. And we're looking at what makes sense in future architectures, but not today. So how easy is controlling the RGB lights that are all over the rack? I think that's the real question people want to know the answer to. Exactly. Well, I think the challenge that we see in front of us more directly than moving to liquid cooling is just the power budget for the rack. I mean, one of the big, and this is actually a bit of a misunderstanding too in that Hacker News thread about kind of what our target is. We are targeting the enterprise DC, not the hyperscaler DC. And what is the difference there? The difference there is that in the enterprise DC, kind of lucky to get to 15 kW per rack, which is where we are targeted at 15 kW per rack. There are plenty of enterprise DCs that are at 10 kW, 12 kW, or less, you know, 8 kW or even less. Versus you go to the hyperscalers and they're like, no, no, no, we are at 35 kW or 40 kW. I think the big challenge on, as we begin to look at alternate cooling, the first problem we're actually going to have is power budget in the DC and power budget per rack and kind of how we spend that. So as we go to look, and even going to partner with Motivair and Chiller Doors, as we go to look at this, we're going to look at it systemically and make sure that we're not, you don't want to have a liquid-cooled solution that can only be a quarter of a rack. That doesn't actually solve any problem. This is maybe a little bit of a can of worms, but I think it's important to address. Why do you use Elumos? Yeah, sure. Yeah, that's a great question. And that came up in the chat as well. And there are a bunch of different answers to that. We very deliberately did not, I think people would think that it's like, well, of course you're using Elumos. Like you're a bunch of joint people and ex-son people. Like, you know, what else do you know? It's like, well, no, no, no. Actually, we were very deliberate about that decision. Wanted to be very deliberate about that decision and really wanted to kind of look at things afresh. And, you know, one of the things that on, and there are a bunch of different angles for this. I mean, the answer is there are a bunch of different reasons. Not least, we need to be able to control our fate. And this is a foundation that allows us to completely control our fate. Yes, there are features that we need. Yes, one of the features is Atom, the one that you and I implemented. And I mean, and it is true that like, look, I mean, we spent a really significant portion of our career solving a really important problem and it would be gutting to actually lose that solution. And Atom, you know, you and I have been talking about this as we get more and more into production, but the work that you and Ben Nacker did to support USGT probes in Rust, which we knew at the time, like, this is important. And, yeah, people are asking, wait, what did you turkeys do? So we developed this thing called DTRACE, which allows you to immigrant instrument the system. And it's been ported to a couple other systems. It's actually been ported to Linux, but it hasn't really been, but has not been accepted to say the least. Linux has got like four different solutions, each of which does kind of somewhere between 60 to 80% of what DTRACE does. And we, you know, the ability, again, Atom, you and Ben added that kind of early. And I remember Patrick, who's working on Propolis, is like, when is that thing done? Because I need it like yesterday. But boy, and again, we knew this, it's not a surprise, but as we have rolled that out, I mean, looking at Allen and Crucible, which is our storage subsystem and the use that we, I mean, we are using DTRACE all the time on this thing in production to understand what it's doing. And the hell if I'm going to live without that, the hell if I'm going to live without that. Now, even said, I don't think I've ever gone with more of an open mind into BPF trace and eBPF, as I did when we were kind of doing that process. And it's a mess. It just doesn't solve the problem we need to solve. Like, you know, I'm not trying to disparage it, but the reality is it doesn't actually solve the problem we need to solve. It's on a totally different disposition. It's not focused on production systems. And I need the ability to support a customer at our shared darkest hour. And I need the stuff that we built to do exactly that. So the, I mean, that's kind of maybe a personal reason, but there were a bunch of other reasons. It wasn't just that, it wasn't just CFS. And, you know, one of our colleagues, Laura Abbott, who I know is kind of here in the chat, and, you know, Laura had a really, Laura formerly of Red Hat, had a really important observation that like, hey, just so you know, like, if you're signing up to do Linux, you're actually signing up to do a distro. And I kind of like intellectually understood that, but over the, over time, I have come to appreciate that much more viscerally, where the, because Linux ultimately is an operating system kernel. It is not, it is not- Waiting for it. I was waiting for you to say it. Was that the Simpsons meme? Where it's like, say the line, Bart, say the line. Say the line, say the line, say the line. If I may, I'd like to interject. The, and so, it is, you have to go make not one decision, but all these other decisions, because things like the debugger is not, they're not integrated. libc is not integrated, you've got to make a libc decision. And now you're having a, now you're a glibc maintainer. And the, you know, kind of as time went on, I kind of, and looking back on it, I'm like, that, boy, that, you know, Laura is really, I think that's kind of coming from her own kiln of pain. And those others who have come from AWS and so on have pointed out like, no, it is, it is really, really tough. It's burdensome on a team to go do. And with, we have so much more in the system. And yeah, I mean, obviously we are responsible for all the components and yes, we know we've got to, there is an element to which we are always going to have to figure out where we are with respect to our rust version and our open SSL version and so on. So, you know, yes, we have a certain amount of that we have to sign up for, but what we don't have to sign up for is picking which libc we maintain. And we ultimately, because it's a community we know well and we're able to participate in, you know, Jordan had made this point earlier that everything we do, we upstream. And that's really important to us, to be able to not diverge from what the community is doing. And you may have heard me say this over the years, but the, you know, we really believe in that there's a great power to small communities. People in small communities always assume that the larger communities are in, but large communities, and Steve, I know you know this very viscerally, large communities have different challenges and, you know, not really concerned about, you know, in a Lumos foundation feud, or, you know, there are certain things that we're just don't have to worry about because it is a small community, which we have like a terrific overlap in values. We also knew, I think just to, and maybe we're going to post the already dead, he's already dead from the Simpsons, but I also think that, and I talked about this when we talked about holistic boot, we knew we were going to have a very, very, very different model for booting the system. And the booting the system, this holistic boot and bringing up this kind of lowest layer of platform enablement was going to require some really serious surgery. And you want to have a community that's going to be receptive to that surgery. And, you know, one of the things we hear over and over again is folks that end up doing a bunch of important Linux work and then can't get it back. And indeed we saw that, right? We saw that with Chris at Oracle, Adam and Detroit, where Oracle actually ported Detroit to Linux and it is done and it worked and it was great. And the Linux community had zero interest in it. And this is like a decade ago, right? And even just now, like, you know, y'all put Rust in the Lumos kernel or deeper down in the stack before Linux kept their support, which is still pretty nascent, right? So like also with the amount of Rust we're using and the stuff we're kind of doing like that, that's an example of a move that we could make that we couldn't have if we went with Linux. Or at least it would be much harder at the whim of someone else, like at the whim of upstream. Yeah, and you know, I think that the, and you know, I think that in the point that's being raised in the chat is that the, and honestly, actually it's funny because Jason King is raising this point about the kind of the sabotaging of CFS in Linux, which actually Jason, what was funny is that was happening exactly as we're doing the deliberation. And the funny thing is it is happening at this moment that my mind had never been more open to running Linux. And as that's happening, Torvalds is issuing these absolute screeds against CFS that are not well-founded and I'm like, yeah, okay, this is, thank you. This is a, and then I think ultimately the kicker, Adam, was me talking to one of our former colleagues who had gone through a replatforming exercise. Because I think one of the challenges, it's actually hard to find people in the Linux community who have had a lot of experience with E-Trace. You just don't tend to find it. But people who've got a lot of experience with E-Trace in particular tend to stick with platforms that have it. And there's an important truth in there. And so this is, I don't think I'm betraying his confidence to say I was talking to George Wilson, who's a former colleague of ours, Adam, and the one that you and I behold in highest regard and asking George about this replatforming exercise he's gotten, I'm like, but don't you miss E-Trace? He just says, every day, man, every day. And the thing is, George, unlike I think perhaps some people, George was, he needed eBPF to work. So he was going deep on eBPF and going at length about the challenges he was having. So it was not like, oh, this person is just more comfortable with E-Trace and doesn't want to use eBPF. It's like, no, wrong. This person actually has a customer problem to solve and he will do absolutely anything that needs to be done to solve it. And he's being crushed by the inability to solve it. So that's probably too long an answer to that question. You raised another great point in there of the, we had a problem to solve and our problem was not an OS problem, but rather how do we deliver this platform that can provision virtual machines? And the operating system we choose, I mean, the customers are welcome to ask that question, but if they need to know the answer, we've done something wrong. They should be insulated from that decision. And with the timeline that we had, I think unequivocally, we chose the thing that would let us go fastest. It might help other teams, but certainly for the team that we had and the team that we could build, it was not even close. We would not be where we are today. That is actually a very important point, Adam, I think is that, and I think that, and Steve, I think this goes to like, I know you had a reply on that thread about like, hey, this is like, this is something that the team was really familiar with. And this is where the familiarity is not like a fear of change or fear of something different. No, like this is what we're actually fast with. And I think, Adam, you're absolutely right that we would be, it's just, as with many of the decisions we've made, the alternative is too terrible to contemplate. Yeah, I mean, look, it's something we were biased. I mean, even if there was some bias, it's also like, well, do we take what we know and the experience of the team and write that down to zero? It's like, no, we want to leverage that as best we can. Yeah, and there's also just another question, and I'm really, I'm sorry to do this. It's like, here we have arrived at open source licensing. How do we get to open source licensing from AWAP? All roads lead here. All roads lead here, but I do want to make just one point that's got nothing to do with Oxide. And that is this kind of argument that is made by the Linux community about ZFS because of mistrust of Oracle. And to be clear, like you are under, no one is claiming that anyone is violating the CDDL by bundling ZFS with Linux. The only complaint would be, the only question would be around the GPL compatibility. So you're actually, because Emily in the chat is saying, like, I think if anyone had a mistrust of Oracle, it would be me. And it would, it's like, absolutely. Like, I know exactly, I have got zero trust of Oracle. Again, it's like, it's in part because to trust Oracle or even to. mistrust Oracle is to anthropomorphize Larry Ellison. So it's like, I actually, do I mistrust the lawnmower? Do I trust the lawnmower? It's like, no, it's a lawnmower. And in particular, there you go. Now I really said the thing. Now you can really post it. But in particular, there is in no way does Oracle have, in fact, what Oracle would, the real question would be around patent enforcement and this is the reason that it is not under the GPL is because we wanted a license. One of the reasons, one of the very important reasons is we wanted a license that was very explicit with respect to patents. And if you are a user of CFS, you have a license to the patents on CFS. And if you are a user of D-Trace, you have a license to those patents. It's extremely important, so. Yeah, thanks Adam, sorry. Or just like, it can just be blank space too. You can just like actually like, you don't really listen to that thing. I swear, I'm looking at the chat. He said, what line am I seeing? Well, what are we talking about? Why is there a drop of blood dripping from my nose? Like my ears are ringing, what happened? So there were a couple of great like product usage type questions that came up on Twitter and Hacker News and other places. Someone says, seems like a cool product. How does this work with software updates? Are they subscription-based, are they free forever? If the company goes bankrupt, will the software still work? Is the source code open? Yeah, I mean, a bunch of good questions in there. I mean, I would just say on upgrades, I know Emily in the chat had asked this question a little while ago. Emily, I think you got some good answers on that, but I just want to elaborate a little bit that the asking just about upgrading the abstract, like how upgradable is this system designed to be? And in many ways, we viewed the ability to upgrade as the most important feature. In fact, arguably the only important feature. And in fact, if you hear anyone at Oxide refer to Mupdate, Mupdate is the minimum upgradable product, is Mup. And it is very important for us that we are able to upgrade this. And a lot of effort has been spent on exactly that. In terms of the economic model around, I mean, it's certainly, it's all open for sure. And it's all out there. I think that we would, it would certainly be our intention to empower those customers. And I think that we've always believed that you can cleanly differentiate support from, which is to say the act of calling up an engineer at Oxide and getting support on an infrastructure problem versus availability of updates. But I don't know. Steve, you're not kicking me out of the table yet. So I feel like- Not yet. He's pretty far away. I'm getting further and further away here. So it's- No, I think I would- No, that was accurate. Are there plans to open the web console or will it be kept closed? We're not keeping it closed for any particular reason. We just, we're going to look at, I mean, our intent is to open up all the software that is running on the rack. Is the console currently closed? Yeah, sorry. Yes, it is. Yeah, and it's closed, I think, based on basically historical reasons. I mean, the reason why lots of software stays closed just because of historical reasons and not really being sure what's in the history. But we should just burn down the history and be sure of what's in the content. Yeah, exactly. I forget saying the thing. I should just do the thing. We're going to like, yeah, it'd be just, you know, Keeter's suggesting I just open up the console right now. We will. Our main focus has been just recently that we've getting our products to market, getting them in the hands of the first customers, getting them successful. And it is only if we are focused elsewhere that we have not gotten to opening up all the software. And I would just say that anecdotally, you know, we do have this, we do intend and usually do open source our repos immediately, open up the repos immediately. Sometimes we keep them closed as they're kind of sketches and we're not really sure what they look like yet. And amusingly, one of the precipitating factors to open sourcing these repos has been just inter-repo, like GitHub Actions. Like, oh man, like linking to a private repo is kind of a pain. We'll open source it. Yeah, we'll just open source it. I know. Well, this is actually one of my more viral tweets, which was totally true at the time was like, the truth is that we open sourced our software because it was easier to search the internet than our internal wiki, which, so yeah, there are a bunch of reasons to open source software. Developer velocity is definitely among them. So yeah, look for us to get all that software out and open. And I guess we should do a sweep to see what else. I unfortunately, I think like Omicron, for the reason you mentioned, I think that all of that has been biased towards being open because it's so hard to build if it's kind of half private. Yeah, some folks in chat have noticed that a couple of networking repos are not open and we do kind of weird things in order to build Omicron. And some of that's due to both real and perceived concerns around IP from some of our networking hardware vendors. But I think that we may be able to move past that. Some of it's just fear about what's in the GitHub history or in the Git history. Yeah, for sure. And do you build your own repos on your own hardware? We will, Eliana with the answer in the chat, we will real soon now. No, the reality is that our own hardware has been, it has really only been in the last couple of months that we've been able to get full racks together. Just because, I mean, you go listen to our compliance episode if you want to know that whole adventure. But we are, that is absolutely where we're going. So it will be real soon now. And yeah, exactly. We need to get the CI times down. So we're very excited to go to that. So I know there are lots and lots of additional questions and we'll stick around to answer them. But I did have one question from chat that I thought would be a great one to end on, which is what part of this journey was hardest? The scope increase when you couldn't use reference designs, dealing with supply chain, raising money for this kind of startup. I thought that was a great one to hear from both of you, Steve and Brian, about what's been hardest about this journey. Mm. Mm. Write it down and turn it over? Write it down and turn it over? Yeah, baby. I've, yeah, I mean, I've, you know what? If I've got the truth lasso on me, I will describe something. I'm not even sure Steve has heard. This is, I know that I've been, so yeah, I will describe the hardest moment. Do it. All right. The hardest moment was when we got funding, when we got the term sheet. Which is gonna, this is gonna be, it's gonna sound like absolutely unhinged. And I was not ready for this at all. I just did not, I was shocked by this. We got the term sheet, which is great. Like, we've been focused exclusively on this. We've been working so hard. We've got the term sheet. We're doing it. We're done. You know, it's like, how would you, like, that seems like great news. And for honestly, like the, I was, and I guess I was like not braced for this, but all of a sudden there's this moment. I was the, it was the dog that caught the car. There's like, oh shit. And, but it wasn't even like, it was like worse than verbal. I mean, I was like, I was like paralyzed for like a weekend. I was paralyzed. And I was actually, were you paralyzed as well? I mean, not in the same level of paralysis, but you were definitely, I recall that vividly. Totally. And in part because I knew who he just signed up for. I knew that like all these VCs are like, oh, we don't see there's technical risk here. It's like, there's nothing but technical risk. And it's like, oh, we know you can do this. Like, I don't know that I can do this. And I'm like, I could do this. We need a team to go do this. You know, it's like, there is no way. We have so much to go do. And this is before we had our first employee, our first employees, we knew we were going to get, and, you know, God bless you. But, you know, and like, they were like pretty interested in potentially coming to Oxide, but like they weren't at Oxide. Like they had other jobs. And like I was, and yeah, Robert was, Robert was the first employee and the, there was a great moment with Robert. And Robert is kind of like inching over the line and Robert's like, I guess I work here now. And Steve and I were both like, you do, I guess you do, I guess you do. It's like a little bit of like, okay, I guess I do. Lock the door. Lock the door. And I actually remember like that. I have never felt as paralyzed by work to be done. And I remember I was, I spoke with my mom and, you know, God bless my mom, super supportive. And my mom kind of told me what I needed to hear at that moment. Because I actually, and I remember Steve, I did this, like you and I have confided basically everything in one another. But this was a moment where I'm like, I really, you don't want your like, you know, I just felt like it would be contagious if I went to you and I was like, hey, look, so I'm terrified. You'd be like, what? I was not expecting, right? I assumed we weren't going to get the money. And now I don't know how to build it. Steve, I don't know how to build it. You'd be like- Do you know how to build a computer? Yeah, do you know how to build a computer? Because I don't know how to build a computer. You'd be like, what did I just do? Are you kidding me? And so I was a little bit like, I cannot, there's a degree to which I, and I clearly, I didn't totally keep the straight face because it was obviously- Not to that degree though. But it got a little bit dark. And my mom was like, you know, you did it before. I'm like, lies, definitely lies. And she's like, well, think about what you did at Fishworks. But you think about what we did at Fishworks when we were a startup inside of Sun Microsystems, where it's like, no, not the same. And she's like, well, just think about, like, you can do it. I'm like, mom, and I remember thinking like, mom does not know what she's talking about because she has got no idea of how much needs to be done here. And, you know, Adam, you had said this when I was trying to convince you to come to Oxide. And, you know, the way you characterized it was, this is Fishworks without a net. And that is what it was. It felt like Fishworks without a net. And I was really focusing on the absence of the net at that moment. I'm like- You're looking down. Yeah, I'm looking down. And I think that what I had not done is the thing that I had learned early on to do at Joyent. And I would advise anyone to do going to a startup. When you go to a startup, success is not assured. And you'd like, you kind of need to mentally come to grips with the death of the company. And the, which is important, like, if the company capsizes, it's going to be okay. And like, I found it coming to Joyent where we learned that very early on. I kind of came in and be like, this is a stable company. And then like on day two, you're like, this, the wings are on fire. And the ground is coming up really quickly. There's no pilots. Exactly. The pilots are in a slap fight with one another. And, you know, it's like, one of the pilots is drunk. Oh my God, they're actually both drunk. The, and so like being able to come to grips with the fact that like, okay, actually Joyent, it would be okay. And that actually allowed me to focus on what I needed to focus on, which is go build the team and go do what we need to go do. And as a result, like we didn't like hit the ground. Like we actually did and success welcomed. And I kind of feel like I ultimately, it's like, that wasn't the case here. It wasn't like, oh my God, Oxide's going to die. It's more like, oh my God, there's so much to go do. And I don't, where do I start? You know, where do I start? And I think that, you know, for those of you who have come to Oxide, I think that like, there's been a variant on this problem that lots of people at Oxide have had is that everyone kind of romanticizes the green field, the clean sheet of paper. And it's like, for good reason. Like it's, there's elements of which it's like pretty great. It's also terrifying as hell. And when you are looking at a blank sheet of paper, you're like, where do I start actually? And, you know, ultimately, you obviously got over it and got my legs underneath me. And in part, because we, you know, thank you, Robert, as employee number one, but also thank you to all of the, you know, I think Aaron Levy had this line about, you know, before we had 10 employees, like every employee was this, I mean, it was so hard to get every employee. And then when you get that 10th employee, and all of a sudden it feels like, oh, this is like, this is not a suicide mission. This is like actually like, okay, this is like actually like a real company. And it has this feeling of stability. And at 20, you're like, you're 20, you're like, you're huge. I bet, yeah. So the, I think it becomes a lot easier to get new employees in the door. But then I, but I think that that challenge of the daunting challenge of the clean sheet of paper is not one that really goes away. And I know that for a bunch of folks that came to Oxide and would have this moment of like, I'm at my dream job. Like, why am I feeling like so overwhelmed by this freedom that I have always wanted? And I'm like, I have been right there with you. I know exactly what you're going through and it's going to pass. And it's like you, because I think that that's the feeling you've got is like, it's not going to pass. I've forgotten how to fly. I don't know how to fly an airplane. We're taxing down the runway. I don't know what the dials do. I'm just like, we're all going to die. It's like, oh, that's not the gas light. It's the intercom light. I was like, okay. And so I think that that for me, so Adam, long answer, but that was the lowest moment. I think every other, there have been plenty of bullets over the year, for sure. And plenty of crises, but we have endured so many of them together that it's just like, I'm just ready for anything at this point. I'm just like not, this is why part of like my anxiety level has actually gone down over time. Even as like sometimes like the stakes have gone way, way up because of the team working together. So there you go, Steve. That's my long answer. It's good, it's good. I'll try and make this one a little shorter, but I think the, I mean, raising for a company that also builds hardware in the cloud SaaS era was certainly difficult. That was a challenge. I think the, I'll give it, I'll give two answers. One is sort of the overall, what has been one of the more difficult things in the past three and a half years. And I think my answer to that would be getting buy-in from the companies that we would need to rely on to build the system we were going to go build. So like AMD comes, you know, AMD is an obvious one, but you know, when we start out, we are that exact startup, that half paralyzed startup that you just described. And we are trying to not only get the attention of, but like punch way above our weight, which was, you know, two ounces at the time. Like we, to be able to get access to the resources that we would need to be able to build this system. And, you know, one of the things we talk about is that the riskiest, one of the riskiest parts of what we were going to go set off and do was to do our own firmwares, to rip the BIOS out of the system and go write our own kind of bespoke systems layer of software. And we needed documentation. We needed, you know, we needed a lot from, you know, folks in the industry that don't always document things the best way. And so being able to get the level of resources we needed from a number of companies that we couldn't build the system without was stressful. But singular moment, just back to you using a singular moment, that was the hardest. For me was relatively recent. It was actually this year. And it was around the banking crisis. It was the SVB failure. And it was when the bank that we banked with failed. And it wasn't, it was not that I was afraid or over, I mean, this is not to say I was not stressed out over the midterm, the medium term impact to Oxide. I had absolute conviction in the longer term Oxide because we had our, you know, terrific investors that were coming in saying like, we're going to make sure that you all can endure and that we're gonna make it through this. I think it was the hardest thing was all of her, all the folks at Oxide that had all of these very important questions that they wanted to get answered around what's happening. What's gonna happen with our money? What does this mean for payroll? Does it mean for, you know, the next three days, three weeks, three months, and them getting all those same questions from their family members and their friends. So was my very low anxiety over this, was that just, was that exacerbating or was that actually helpful or not helpful? I mean, I don't know. So I mean, I have said at the time, but I still believe that like the Silicon Valley bank failure is just like, just doesn't feel like, I was saying top 15, I'm saying top 50 existential threats to Oxide. It wasn't the failure itself. It was just, again, not being able to help folks at Oxide be able to answer these questions and their levels of stress that was hard to reduce. And being in that situation over the course of four days, that was toughest. It was actually the team itself, more than the, like, you have got your own confidence that like, yeah, we're gonna figure, like, we are gonna navigate. But knowing that everyone on the team was- Was dealing with their same anxiety. That's interesting. High, high levels of anxiety. Not, no way to really diffuse that. Over that period of time in which everything hung in the balance, Thursday, Friday, Saturday, when like, is SBB gonna survive? Are they gonna get bailed out? And the outcome of that was gonna have sort of a pretty different set of paths for us over the next six to 12 months. But again, with conviction, we were gonna make it through and we were not gonna be overly affected. That inability to kind of help our team deal with their anxiety. So part of it is my anxiety was so low. I know I've said this before, but it's like Janet Yellen does not care about any of our other problems. Janet Yellen will gladly like, have like a Chelsea O'Nick that can't actually like come out of reset. Janet Yellen does not care. We will die in the wilderness alone. And I'm like, hey, SBB, like Janet Yellen's dialed in on this, it's great. Like, you know, we've got so many people care about our problems. This is really terrific and refreshing. I'm so used to being like, totally alone in the wilderness. But I, yeah, that point about like, actually the problem is not that. Like you've got confidence, like we're gonna get it the other side there. The problem is you've got a lot of employees who are like, hey, like, you know, my mom just asked me who we banked with. My dad just asked me who we banked with. And I'm like, we don't bank with SBB, do we? It's like, no, we, no, we 100% do. But like, but we've got some stuff elsewhere. It's like, we sure don't. That's right. Okay, well, what's the good news now? What's the insight? We're paying attention to it. And it's also, we've got actually, on the one good news, Janet Yellen cares. Bad news, we ourselves had very little agency in that moment. That's right. So we're on the other side of that. We're, you know, financially in great straights for years to come and all's well on that front. But it was, that was particularly. Low moment. Low moment. But I think, you know, on the partner front, potential investors that treated us shabbily, you have all gotten off easy. That's right. Great answer, and in particular, coming full circle from when deflecting kind of praise to the team to, Bri, you talk about some of the anxiety of building the team and Steve taking care of the team. I just, I love that. And I would say as part of the team that we really feel that every day. Well, it is ultimately, emphatically, it is the team that has done this. And that's part of the reason I think that, you know, I said the jump. Adam, Steve and I are kind of squirming uncomfortably in our chairs when you're talking about us having done this, because we really view it as it is the broader us have done it. And I think the only thing that we can really claim credit for is for the initial raise and bringing in the initial folks. And the rest has been a terrific, glorious flywheel. And it is very much included those who are fans of Oxide. You know, I think early on, one of the things we did is we asked people, hey, like, if you want a sticker, fill out this Google form. If you want a sticker, we'll mail you a sticker. And Adam, do you remember that? We had like, this is like before the pandemic. And all of a sudden we had like, we got stuff like 500 envelopes full of stickers. And we ended up, you know, my kids, my mom, my mom was stuffing envelopes. And we were at the time thinking like, man, how great is it to have a broader set of folks who are rooting for us? So it has really meant a lot for us, for us collectively, us all. And so thank you for all of you who've been supportive of us. And didn't think we were nuts. And didn't think we were nuts. Absolutely. And maybe just the supportive one. We all thought you were nuts. It's true. I know. And next week from, Brian, you want to tee up? Yeah, next week is going to be amazing. So we're going to have the operations team on here. In particular, and we're going to have a bunch of folks from operations. In particular, Eric Anderson is going to be here. Eric has been more or less on site, on our facility in Rochester. And Eric has got some just terrific insight into all of the gritty details to manufacture this thing. And all of the terrific collaborative work with our contract manufacturing, Benchmark Electronics has been terrific. And really, I'm really looking forward to having Eric and team. CJ is going to walk us through. I'm hoping we get CJ or Kirsten to walk us through the crate. Kate's going to be here. It's going to be really terrific. So I'm really looking forward to having the ops team in next week. Thanks, guys. Thanks, everyone in the chat. This is fantastic. It's so much fun. Awesome. Thank you, Adam. And thank you especially to all of your alts. "
  },
  "3fb777e8-7f6d-469c-9b5d-9fc06a305b57": {
   "Title": "Tales from Manufacturing: Shipping Rack 1",
   "Description": "\u003cp\u003eBryan and Adam were joined by members of the Oxide operations team to discuss the logistics of actually assembling the first Oxide Rack, crating it, shipping it... and all the false starts, blind alleys, and failed tests along the way.\u003c/p\u003e\u003cp\u003eWe've been hosting a live show weekly on Mondays at 5p for about an hour, and recording them all; here is \u003ca href=\"https://youtu.be/L4YF8QJkKqM\"\u003ethe recording from July 10th, 2023\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn addition to \u003ca href=\"https://mastodon.social/@bcantrill\"\u003eBryan Cantrill\u003c/a\u003e and \u003ca href=\"https://mastodon.social/@ahl\"\u003eAdam Leventhal\u003c/a\u003e, we were joined by Oxide colleagues, Kate Hicks, Kirstin Neira, CJ Mendez, Erik Anderson, \u003ca href=\"https://m.unix.house/@jmc\"\u003eJosh Clulow\u003c/a\u003e, \u003ca href=\"https://hachyderm.io/@SyntheticGate\"\u003eNathanael Huffman\u003c/a\u003e and \u003ca href=\"https://twitter.com/AaronHartwig1\"\u003eAaron Hartwig\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIf we got something wrong or missed something, please file a PR! Our next show will likely be on Monday at 5p Pacific Time on our Discord server; stay tuned to our Mastodon feeds for details, or \u003ca href=\"https://sesh.fyi/api/calendar/v2/iMdFbuFRupMwuTiwvXswNU.ics\"\u003esubscribe to this calendar\u003c/a\u003e. We'd love to have you join us, as we always love to hear from new speakers!\u003c/p\u003e",
   "Link": "https://share.transistor.fm/s/d4da0196",
   "Filename": "3fb777e8-7f6d-469c-9b5d-9fc06a305b57.mp3",
   "GUID": "3fb777e8-7f6d-469c-9b5d-9fc06a305b57",
   "Published": "Mon, 10 Jul 2023 17:00:00 -0700",
   "Transcript": "I will confess that I had a terrifying nightmare about artificial intelligence run amok and taking revenge for my naysayerisms. Okay, well, this is a good segue. Is it? Okay. It is, it is a good segue. So I was going to, I was going to apologize for, hold on just a moment. Discord is making me fill out another form before I, it's waving at me saying you have to do these things before you can talk. Okay, I agree to the rules. Yes, fine. I'm just- Power of attorney. Yes. Power of attorney. Right, exactly. Okay, something about putting discord in my will. I don't know. Whatever, I got it notarized. Fine. I was going to apologize to you before, I was going to say that what I'm about to say is a lead up for our topic tonight, but you would be right to not believe it, which is namely, I was going back to the AI doomerism. And I made the mistake of doing some research after our episode on AI doomerism. I'm like, and that mistake was, surely it can't be this bad. Surely like we have created a caricature of these people. And the answer is we have not created a caricature. They have created a caricature of themselves. And it is truly, these fears of AI taking over the planet are so ill-founded. And one of the, and I know, I'm sorry, Adam, I know I've dragged you into some of these, sending you links to podcasts and so on that you have not listened to under any condition. And the thing that I find so frustrating that we were hitting on a bit in that episode, but it's actually kind of the theme of our conversation tonight, is I feel like people don't, we're so accustomed to being in the virtual world that they actually don't understand how the physical one works in some really basic ways. And all of these fears are of these large language models spilling into the physical world. And it's like, actually the physical world is really fickle and hard. And lots of stuff goes wrong all of the time. And for essentially every single thing in your life, physical thing in your life, there are a bunch of people that have worked behind the scenes to get that thing to you, to get that thing mined, farmed, manufactured, transported. It's like there's so much that's involved. And I feel like we've lost our curiosity for that at some level, you know what I mean? Certainly, and our appreciation for that, just because it happens so magically, absolutely. It happens so magically. And these folks have done at so many different layers of the supply chain, have done such a terrific job. And I think that the only disservice that we've done is we don't talk about it enough. And then you get these supply chain disruptions and so on, where people begin to appreciate it. But I think, so for us at Oxide, we talk about building the hardware, building the software, and that's all true, but there's actually another thing that we've also been building, a third thing. We are building the process by which we create this thing. We are building the manufacturing, the supply chain, the logistics. And a lot of that stuff is not seen because it doesn't, the very fact that the artifact has showed up and powers on and is present, it's like that job is done. So it's very easy to not appreciate it, but it is absolutely essential. I mean, you cannot overstate how important this is, all of this is, to get the thing that we've got. So I'm really excited that we've got a bunch of those folks today that are with us who have, and we heard from Kate last time on supply chain issues, Kate and Kirsten, and we've got the extended operations team here in the form of CJ and Eric, and in addition to Kate and Kirsten. And so I'm really, first of all, welcome to all of you. It's so great to have you here. Thank you very much. I think actually, if we don't mind, I think we might actually start with a question that came up online when we posted the rack. So we tweeted the photo of the rack, of kind of the first little rack coming off the line and shipping, and someone out there on the internet was like, oh my God, don't tell me, is that how you're gonna ship this thing? Please tell me you've thought about how you're gonna ship it. You're like, oh my God, have we thought about how we're gonna ship? So I wonder if we might start there because the crate is its own act of engineering. It's the, and exactly, I mean, you've seen the crate out here. Yeah. I'm not sure what. I've even uncrated some of our racks and didn't get run over by it or crushed by it or anything like that. And the crate is really pretty amazing. So Kate, is that a reasonable place to start in terms of like starting with the crate? Yeah. There's obviously a lot to talk about. That's kind of the final mile, and there's a couple of things we wanna talk about, but I think we can start there. It's a fun story, but mainly I wanna highlight, it's really the team, the operations team has been phenomenal to work with. And we come from a breadth of different backgrounds and experiences. And the main point is that we've now built one rack and that's awesome. We've built one of one that are exactly the same. And so now it's, how do we go scale that? How do we repeat it? What does that mean in terms of lessons learned through this first build and then process improvements and scalability that we're gonna go work on as a team. And so we've brainstormed as an operations team. Some of the topics we wanna hit on today, and you hit the nail on the head, crate and packaging is actually a huge portion of work that we have done to date that was a surprising portion of work. And so I'll let CJ and Kirsten jump in on that cause I kind of owned that piece of the puzzle. Yeah, so I can start on the initial part of the crate design. And then CJ helped and has been doing a lot with some of the shock and vibe and things like that with the crate out in California. So, we initially reached out to three crate vendors. These were vendors who have done crates for other large rack manufacturers. So we wanted someone that has done this in the past and does this consistently. And we had some specific requirements. Our rack is of course quite sizable. It's very tall. So we're pushing the 102 inch limit that we can do in order to go into a truck. And then if we were to fly these as well. So between the size, the height and the weight, we had some very specific requirements. We also wanted to ship the doors and the side panels in the crate, but not attached to the rack. So we needed storage spaces for those as well. We had some concerns with the ramp and making sure that that was gonna be sturdy enough for say 3,000 or so pounds of brute force being pushed up it. So did an initial PowerPoint actually design of what I kind of wanted the crate to look like. And then sent that to the vendors and said, hey, can you build something like this? Needs to meet certain standards, shipping standards, be able to withstand shipping and shock and those kinds of things. So we went ahead, we got three prototypes from three different vendors. Knowing the first round wasn't gonna be perfect. Nobody had actually seen the rack before. It was just kind of telling them what requirements would be and they did well. So kind of put those three through the test, narrowed it down to two manufacturers to go forward with and do another round of edits to it. Some things we didn't think of beforehand, looking for input from them as well. And then over time, just from working with the two vendors, ease of working with them, response time, other things that they could do for us, suggestions to add. We've kind of been focusing in just more or less on one right now for the time being. It is closest to where we're doing some of the packaging testing as well. So that's how that crate design came about. And then I know CJ has been working with our current crate vendor on even additional updates and changes and tweaks here and there. And so Kirsten, the crate that we had out in Austin when we did that first pre-compliance run 15 years ago, whatever that was, it feels like, I think it was, was that only a year ago? I don't even know if it's a year, honestly, I don't even think it was a year ago. It feels like five. How is that possible? It was in December, I feel like. No, no, no, we did a pre-compliance run in Austin. CJ, when was that? Was that? That was July of last year. That was a year ago. Which is wild. Okay, but you, I mean, that feels like it was five years ago. I mean, it might've been five years ago, right? Totally. I'm not 100% sure it was a year ago. It could be two years ago. Or five. So the crate that we had, because that was kind of my first exposure to the crate. I mean, it's the first time we had our first initial proto rack together. And I remember being like, and this is an example of one of the many problems that I just had not thought about at all. And of course, you all had spent a lot of time thinking about this. So I was like, oh, right, of course. We have to, you can't just put it in a box, dummy. You actually need it to have a properly engineered crate. And I just remember looking at that crate, I'm like, wow, this thing's amazing. And you're like, no, we've got a lot of issues with this. And I'm like, oh, okay, nevermind. This is not amazing. We've got a lot of work to do, a lot of room for improvement. But yeah, I mean, just the sheer mass of our, what we're putting in there, some of these crate vendors are used to maybe just nailing it and not nailing and screwing. So, we had suggested some things, but they sent what they thought we needed. So there were nails popping out and wooden boards and dividers on the inside that would show up. So that first rack crate, there was a lot of editing that was done to it. That's where we actually used a lot of time and extra wooden screws in that first crate and the one after it. Yeah, and then so, because that one we iterated on quite a bit. I mean, I think we kind of stuck with that initial design, I guess, CJ, but I know we improved it a lot. Yeah, more like, I mean, I guess that's what I would say generally about packaging is like, it is a whole thing. Like, it is a universe. Like, I mean, people get degrees in it. And, you know, frankly, in my supply chain experience, it's not something I've dealt with directly a lot, but where I picked it up was just on some of the shock and bypassing to make sure that, you know, when we ship a product that it arrives intact and usable. And so we actually ended up switching crate vendors from that initial crate that we had way back when. So now we're with Larson Packaging is who we shipped with for the first customer shipment. And that crate's come a long way. I mean, and, you know, as we get experience pushing a crate, a rack in and out of a crate, there's usability, there's ergonomic improvements. And so it's definitely come a long way, but that's certainly something that we put in the things we did right was Kirsten going out and getting, you know, multiple bids, multiple designs from multiple vendors. So it was very, very well. Well, one thing I definitely appreciated is when we were loading the rack in here in Emeryville to go to compliance, that little, that the ramp was not totally flush with the floor. There was that little lip. And Josh, I feel like we, cause you and Josh and Steve, and we definitely had like a bunch of folks. It took a bunch of us to get that thing over the lip, if I recall correctly. Aaron, I think you were out as well. Oh yeah. I mean, it's, I feel like I'm always afraid that the next thing where I have to get smart on is OSHA. Cause like, you know, the initial crate, like pushing, you know, 2,400 pounds of steel up that wooden ramp was trying to say the least. I am looking forward to the email in my inbox, RE July 11th podcast. Like, oh, oh. But now it's got metal, it's got metal runners to help us, you know, get it up the ramp. So it's, you know, the flip side of that, the door ramp is now super heavy, like a two person lift for sure. But, but it's much better now. Well, and so there's an important thing in there too, in terms of, because one of the things that we were hoping to do was be able to ship the sleds in the rack, which like that is, I mean, we've been able to pull that off, which to me is terrific because if you can't ship the sleds in the rack, then you've got a whole bunch of other logistic challenges you've got to go deal with. Yeah, we had not done that. And that was the focus of some of the early shock and vibe testing was, cause we'd always shipped the rack separate from the sleds, even the sidecars, we shipped those separately. If you recall, in boxes on pallets. And so some of the focus of the early shock and vibe testing was does this thing survive, you know, crate fully loaded into the crate? And it did, it actually held up really well. The crate did not, but the rack was fine. So that was, that was good. And this is one of those things where this has a real tangible effect on the, one of the things we want to optimize for is the latency from that rack arriving to being able to provision VMs and have developers productive. And if you've got to de-box everything, that adds a huge latency. I mean, there's a, and there's so many challenges with de-boxing. Huge physically as well. I mean, do you recall when we received the first one in pieces, in boxes, like it took up half of the warehouse floor. Right. Cause you can't really stack them very high when they're in individual cardboard things. It's like 32 weirdly shaped servers and two giant switches. In addition to the crate with the rack, it was a lot of floor space. And so CJ, you said that this is like this kind of logistics at this size was something that was new for you. And then it's just like entire discipline behind it. I feel like that's happening all the time. I mean, that happens all the time for all of us, but I especially feel on the operations team, you all are constantly vectoring into like, okay, well, I'm going to learn a lot about this today. I'm going into yet another aspect of getting this thing manufactured or developed or shipped. Yeah, totally. I would say packaging specifically is just one of those things where you just sort of take it for granted. I mean, there's companies out there that really put a lot of effort into packaging, but you order something from Amazon, whatever just shows up in a brown box with some air packets or whatever. You don't really think about it, but when it's a very expensive computer, like there's just a lot to consider and you definitely want to test it first. Yeah, Brian, there's that moment in Soul of the New Machine when the boss says, well, I guess I better design the power cable. It does sort of, it's reminiscent of that, like this extremely important piece of logistics that goes unseen. Totally, and I feel like a big part of it was actually seeing, I mean, on the one hand, you can kind of spec the stuff out, but boy, seeing is really believing in terms of understanding where these pain points are and being able to iterate on that. You know, one of the things that I think has been really clutch for us, and Kate, I know that you feel strongly about this as well, that we have been able to do so much of this in person and the fact that our contract manufacturer, Benchmark Electronics, is onshore, is actually in Minnesota, and the fact that we've been able to be physically with the crate and be physically on the manufacturing line has been really, really important. Do you wanna maybe speak to the importance of that a bit? Yeah, definitely. Being US-based and having that close time zone has been hands down one of the best decisions we made at Oxide when we were selecting a CM to go through the engineering build phases and into production with. That really, it's not just that alone. I think hiring Eric to be onsite in Minnesota right there, able to go to Rochester throughout the build phases and especially throughout this final stretch, going through the PVT build and getting ready to ship has been absolutely crucial to our success. It's the right person onsite during the launch. It's not just a warm body there. Eric has done a phenomenal job building that relationship with Benchmark and knowing the right people to go to when we hit an issue, when we need rework accomplished, or when we need some heroic effort at quarter end. Like having Eric there has been such a big part of that success story. Well, so maybe this is, Eric, this is a great segue to you. First of all, I have been told that Oxide, you and I have not been in Rochester together, but I have been told that like, Eric, you are like the mayor of Rochester known in every establishment that you've got to. Yeah, yeah, I guess so. I guess that's a nice compliment. They've been a great team to work with, I think. So CJ mentioned something earlier. I mean, it's not just packaging, but everything we're doing, every aspect, just to pull this back a little bit. I mean, everything we're doing at Oxide is learning as we go. I think a lot of the hardware team probably gets frustrated with me. They probably know my battle cry of like requirements and documentation, and we want to do that. But as soon as I say that, I'm being the biggest hypocrite because we've been lacking a lot of that documentation even on the operation side too, which makes it hard to build something and makes it hard to make it repeatable. So like Kate said, we have one in a row, but to be able to build something like that when you don't have the documentation, you don't know what you're doing, you know the direction you want to go, but you can't tell them, do this. That can be challenging. And so we're lucky to have, like with Benchmark, it's been a joy to work with them. And they've welcomed us in, I think, across the board, not just me, but all the hardware team that's been there, all the software team that's come in to bring up over the past almost two years, I think has really helped create that relationship and that partnership, build a process together. Like you said early on, Brian, at the opening of the podcast here is being able to define and document what we are building and build that process to make something, not just one time, but make it, try to make it twice. Well, yeah, and I mean, and that's the challenge when you're doing this new product introduction NBI, which honestly is not what most manufacturers do, right? I mean, it is its own, I've got like total new appreciation for why you need a manufacturer who really understands what NBI entails, because it entails a lot of figuring it out and fine tuning and finding things that are massively wrong and fixing them. And Erica, I mean, that give and take with them has been really, really important. Do you wanna maybe talk about some of the things that you were able to, just being there with the manufacturer and you were able to kind of discover and as we were building this thing, there's so many of them. Yeah, I think one of the first things is, so I'm new to electronics manufacturing. So a lot of the hardware teams helped kind of get me up to speed there, but being on site, just trying to be an asset for Oxide and then I have a manufacturing background, but in metals manufacturing and other areas. Not electronics manufacturing. It's been absolutely eyeopening. It's in the, it's a really cool area to be in. But, um, I think some of the, I'd say some of the challenges, um, or some of the benefits of being on site is, um, just having some continuity, especially during that NPI to production phase. Um, the NPI to production handoff is always challenging. I don't care what company you're at, um, can be a challenging time. So we went through that in November. Uh, well, October, November is when we kind of forced that function. And, um, when we talked earlier today, we said, man, that was one of the best things I think we did as a company is to try to do dbt with a production mindset. Um, so we were able to transition all of our, um, like engineering documentation, at least over to production, um, Aaron Hartwig and Nathaniel, and a lot of the team have been critical and pushing ECOs. So our engineering change orders over to document, start that initial documentation and foundation of our system. So being there to when, where there isn't a process, that's been helpful. I remember during dbt, we didn't have, we'd never built a sidecar really. I mean, I think even the NPI team had put like a half of one together or one together, we'd never built a rack. So we're just looking at assembly drawings and like the next day we were creating a documentation, creating like word documents and saying, here's how we think this goes together. I mean, we're not building the spaceship. Um, I mean, not to take, it's not that complicated, but you can look into assembly drawing and a higher level drawing and say, this is the stuff, how it should go together. And then we pushed it to the floor and that was our documentation for like the next day. And we kind of lived hand to mouth to that, like that during dbt. Um, so being on site for that was really helpful. I don't see how that could have been accomplished remotely. It could have been done. It just would have been much more slow. So, uh, and much more airborne, right. We're doing a lot of more, we just would have had a lot and you know, one of the challenges you've got as a startup building a physical thing is that we're trying to move quickly, but also with rigor. I mean, it's, it's our classic urgency and rigor trade off, which I mean, you all were, were right at the intersection of that. It feels like every day, like how do we build the right, rigorous, scalable process? And also how do we do it right now? It's like, well, okay, something's going to have to give. And, but it feels like something different had to give every day. It's really, uh, kind of a constant balance that you were having to hit. I think, you know, I told Kate, I said, you know, even if you're down there for five minutes and you're able to push something forward, that would have saved like two days. Um, even if you're down there, so you're not always engaged, there's not always something going on, but if you're down there where you can push something forward and be there involved for five minutes, it's definitely worth the trip, that beautiful drive down 52. Um, um, but you know, just another, another, and just to just one quick highlight of that. So, you know, Josh has been, you know, instrumental in the manufacturing side on the software side, which has been great. He's extremely patient with me, but one of those things, like I remember telling Josh, I said, if I can just be down there and if you just need me to press a button and I didn't do that from here, it's like, well, oh, that's how computers work. Oh, okay. I see. But he w but he was, if there's just anything we can do, if it's just making sure a cable's plugged in or something like that, just even that having that onsite presence is I think helpful. Um, and again, the goal is really, I think, Brian, like with anyone in operations, at least my ML is make sure we're not blocking anything. If there's anything keeping our engineers in the way from doing their job, um, that's, that's what we need to do in operations. I think if we had a mission statement. So hopefully we're doing, hopefully we're doing that. Totally. Oh, Oh God. Absolutely. What I mean, I think to me, what has been so exciting about this is it is such a tight collaboration between the operations, uh, our hardware engineering team and our software engineers, like we get everyone and, you know, the manufacturing software, Eric is a great example where everything comes together. And Nathaniel, you and, and Eric were kind of constantly, you know, fine tuning this in terms of the, of the, of the process onsite, as you were doing some production engineering and, you know, then getting that feedback back to Josh. So when you mentioned this in previous episodes, but we wrote all of our own manufacturing software and which is one of those decisions that may seem, uh, ill-advised, but it's one of those that was, boy, was that the right decision? I mean, can you imagine? I just, I don't know. I, the alternative is unfathomable. I think at this point, I think we, we, we have had so I've appreciated so many gains from controlling that entire stack, um, to actually like programming the, at the programming station, being able to do the rack level testing and being able to have all that software. But it does require a contract manufacturer. That's really going to be willing to be amenable to that. Cause I mean, Eric, I haven't dealt with, uh, I mean, we've been, I think very lucky with this relationship with benchmark. I got to imagine this as someone unusual to, uh, where we have a manufacturer that allows us to have such a close relationship with them. Definitely. I've been in their shoes. I've been the, you know, I've been on the supplier side and then that's the last thing I wanted was a customer hanging out out there. So I've tried to been, I've tried to be cognizant of that and try to be a good neighbor. I'm like from afar. I think we'd be a lot more aggressive because it's a more transactional relationship, you know, if we're just doing it over email, but when you have to kind of, you live where you eat a little bit, um, I want to, you want to make sure you're doing well by them. And I think CJ, you had a, a phrase that you were, that you used somewhere. I'm trying to think from your long-term relationship here. Um, I'm going to think of your nugget of wisdom. Um, that one, it doesn't matter how I'll figure. Well, no, no, no. That one was good, but it wasn't. Why are you? I'll find it anyways, but no, CJ had a good one. Um, just kind of long-term don't, Oh, you can't surge relationships. Yeah. Quote CDN now. And you can't have, you can't search relations. You can't, you know, take advantage of, you have no foundational. You can't insert it. And so yeah, documentation CDN vendors. So I think that's, that's so true. So we tried to build that foundation again, and that's not, that's not one person. That's all of oxide. That's what I'm really proud to work with. This team is everybody that comes on site. It's kind of like you're, you know, when you're, your kids go somewhere, you want them to behave well without you telling them and then not that there's maybe a weird relationship there, but like everyone in oxide, it's like our family, everyone in our family speaks and holds, makes a very good example for, for oxide, wherever we go. And I'm, I'm really happy with that. And I think that really gets a lot of equity when we ask for stuff. Um, and we try to, cause there has been a lot of surging. There's been a lot of fits and starts. Again, that equity has allowed us to, I think, get us over the bubble and say, all right, well, we're good on the good times, but we're good in the bad times as well. I think we got a strong relationship there. Yeah, that is really interesting. And that actually, I have to say a very, it makes me very proud to hear that. That, um, I mean, certainly I feel the same way that we, uh, all said from the beginning that this, the team that is bonded by mutual trust and the fact that we can all kind of trust one another to be on the point of that relationship and represent one another well. Um, and that's really interesting here. And Eric, tell me about this. Um, somewhere along the line, you gave a speech that became the stuff of legend. Aaron, I feel you were there reporting the, can you, I obviously, you know, we're not going to be able to really recapture it, but, uh, can you give us the gist of this is when you were, I think, speaking to some of the benchmark folks, um, and, uh, keeping their spirits high. I don't, I don't, it was nothing special. It was a, an opportune moment is to say thank you to the team. So I didn't, I think Aaron was maybe a little bit hyperbole there. Um, or maybe he was just, uh, chiding, but no, I think it was just an opportunity to say thank you to the team. They had an informal photo op out in front of the rack and, uh, it was just a good time. We hadn't had everyone together like that. So it was, again, it was just a time for us to, you know, I think Eric was there. I think, uh, I think Aaron was there. Um, and I think RFK, it might've been during the Sam, the Sam tech cable. Um, if I'm not mistaken, but when I think it was like getting an entire, when you are manufacturing something, getting everybody, cause we, it's very important to us that everybody is bought into this and that everyone feels like that because they are, everyone is an important step of the process. And if we've got someone in manufacturing who is observing that something is not being done correctly, we want to empower them to say, Hey, wait a minute. This could be, why are you doing it this way? Like this could be done a lot better. And I think Eric, you really have to have that piece, that strong relationship. In order to, I mean, I'm aware, I'm not going to mention any names on the benchmark side, but I'm aware of at least a handful of people like that. We now talk about by name that are just like even just line technicians or whatever that are, uh, perhaps more observant than we expected. Someone would be that didn't work here, you know, like taking it all very seriously and, uh, you know, raising process issues and concerns and doing a really good job that's been, uh, I mean, I haven't actually physically been to benchmark, but it's been very fulfilling even remotely to, to see people getting so involved. Well, yeah, we were, we were putting together. I mean, the, the rack to ship a couple of weeks ago and like each, as we were doing the final, like assembly and testing and the operators are like cheering as we're, you know, going, Oh, we got another good one. We have another good one, you know, as we're kind of doing our final assembly of everything and it's like, they're invested, which is pretty sweet. That is terrific, which is good because we have, we together have had all sorts of hurdles. So, uh, I feel like we, we got to talk about some of the, the, the, the bullets over the ear that I know we've, we've spent, we certainly talked about some of them in the past, but I think there's some that we've not taught. I feel like we, I don't think we have talked about the sidecar heat sink issue before here, have we Adam? I don't think so. Uh, I know we've chatted about it offline, but not, I don't think I'm the show. I did Kirsten. Do you want to, or Kate? We had that, that near death experience and there've been so many of them, but we, this is kind of a, a concrete embodiment of the low level details that we have to deal with. So they kind of, the, the, the backstory is that we had heat sinks, CJ, just to your point about like logistics being its own entire discipline, we had heat sinks that were showing up slightly warped and these are, these heat sinks. Are big. They, they're, these are the heat sinks for the sidecar. They're really big. The sidecar is the, is the rack switch powered by Tofino too. And, and w I mean, they're really big. I mean, how much does that heat sink way? It actually does not weigh very much at all. Oh, really? Yeah. That is the, the, it looks like it's, in fact, it is so large that you would think to yourself that way. And it's a piece of aluminum foil in a funny shape. Yeah. And I, I'm sure Kate, I'm sure you know, the exact, I mean, that's actually a big part of it. Actually, Adam was reducing the weight of that thing. This was the moment arm crisis to you or the moment arm crisis when you were among many other crises with the, that heat sink was going to be so large that if we shipped with a heat sink on. There was a concern that the moment arm would be so long and heavy that it would require a very small amount of force at the outside of the heat sink to crack the PCB that they know my, in my describing that problem adequately enough. Yeah, I think so. I'm, I'm, you know, I only pretend to be an elect or a mechanical engineer, but yes, that sounds right. Sorry. Okay. So do you mean because it extends, I missed this because it extends out. So like it's anchored in the center and then it's effectively a lever hanging out the side, like a diving board. Yeah. So it would lie in that, you know, this is a fourth, four or 5,000 BGA part. So like there are four or 5,000 balls underneath that thing. So this is a big part, right? It's like all of which have to stay connected. And so if you, if you put a lever and attach it and then like start cranking on it, you're likely to break some of the balls, especially out at the corner. But getting, so this is a big thing and then, okay, great. We problem solved. It's like, well, you've solved one problem, but now we've got, actually got to make it, it's actually important that, that this heat sink show up and not be damaged. And Kirsten, do you want to talk about some of the issues that we had with that thing? Yeah, I can just, I can start with a few. I know Kate, we were kind of tag teaming this issue with the team in China. So it wasn't just a flatness issue. They were also being received with a lot of bent fins. So we had the two issues that we were dealing with. They were warped, much out of spec. And then the fins on the, mostly on the edges were all bent in. So it was two things. It was if it's flat enough, or can we get it flat enough? And then can we manipulate these fins back to being straight or good enough to use? And we, we honestly were having some issues getting in touch with the China team and getting the responses that we needed. So we ended up getting in touch with their, one of their US based manufacturing plants. And that manufacturing plant manager took on our case, got everything set up. And there were a lot of late night calls for us because we had to make sure everybody, you know, we had people in China, people in California, people on the East coast. So just getting everybody aligned and going through these issues one by one, we were looking at, I can't remember the exact number of bent heat sinks, but, you know, we were short to what we needed. We did not have the time to manufacture new ones. We didn't have a solution at the time for what was actually wrong with them. Was it a shipping issue? Was it happening in shipping? The fins definitely were. The flatness issue, was it a design issue or was that happening in shipping as well? And if I remember correctly, the US based manufacturing plant did fix some of them for us. It was like five years ago as well, but I think it was like December. Yeah, I know, it goes back, oh my God, this feels like it was so long ago. But yeah, there was a lot of teamwork between their US based manufacturing plant who really had nothing to do with the issue. These were coming out of China, but they stepped in and helped us until that issue was fixed until we had what we needed to get through the next phase of manufacturing. And then we've had follow-up calls since. The packaging that these are shipping in now is crazy. I saw a picture of it the other day. It's so ironic, this comes back to packaging design again, the whole engineering aspect that I think was maybe overlooked by our supplier on the original shipment for the size of these. They've created some really robust packaging with like a metal plate that it sits on. And in parallel, we're working on more permanent design changes that would address the flatness and warping issue in transit. But it just speaks to the criticality of shock and vibe testing and packaging design and all of that that goes with the end stage logistics of shipping a product. Well, and this is one of those too, like when you have something like this that is showing up damaged, it's, you know, you can't even imagine what it's going to look like. It's kind of natural for a manufacturer to be like, I don't know, it was good when it left here. So it's like, I think you should be talking to your logistics provider, your shipper. And, you know, that can be a, it's a real challenge because you've got kind of this third party in between figuring out like, all right, well, what did go? And, you know, what do you expect to, certain things you have to expect to go wrong in shipping and what do you kind of accommodate there? And then who's responsible for that? And then, you know, what do you expect to go wrong? Accommodate there. And then whose responsibility is it? And with something like this, it's like, and I feel like they can, this is true for many, many components in the oxide rack, but it's like, we actually need this to work. Like we don't have, this is the supplier for this. We got to get this figured out. And yes, I'm just saying in the chat, it's like, this is like, it worked on my laptop for manufacturing. Absolutely. It was in good shape when it left the factory. And then you're left being like, the thing that did this, like, we know what FedEx and UPS, we know that they're awesome powers for the destruction of things. And it seems to be outside of that. So we need to figure out a better way. Us being a startup and defining every process, even operation processes from the ground up. So piece of this is our quality control. So we now do a hundred percent IQC inspection, incoming quality control to check for flatness on the ones that went into our first rack for the customer. And it speaks to the processes we're building out about quality in our four walls or benchmarks, four walls at RCM and then upstream manufacturing quality control and the processes we want to put in place to kind of enhance that robustness and the incoming quality we receive of components. Totally. And with the eye at every level of like, we're trying to ship a quality product here. We're not trying to like blame people. We're trying to actually ship a quality product. And that's kind of the challenge up and down here as getting all these different kind of layers in there. Maybe, and CJ, I know we have talked about this before, but not, I think, with you here. You know, definitely a wrench that got thrown into the works was this issue with the part being misstuffed on the Sharkfin Rev-D. And then you ended up with a new challenge thrown in your lap of like, we've got to get how many did we get reworked? I want to say 1,200. I think we got to give a little more context on Sharkfin and Rev-A and sort of in part stuffing. Sure. So we have a Sharkfin, which is the PCB that connects all of the U.2 SSDs to the main board. So we have 10 of those per server. And so we were doing bring up and wasn't working so well. And we troubleshot that down. You know, we didn't mess with the design that much. And so we ended up figuring out the W's, figured out there's a part that is mismarked because it's the wrong part. It's not the right part for this RAF DES. We use that part elsewhere on the design, but not in this specific RAF. Was this when I was there in the office at two in the morning and the light came on funny and then the computer wouldn't boot? Is that? No, that was. Yeah, no, I think you were the harbinger. Yes. You were the Josh has been the harbinger for so much that it's hard to keep track. I couldn't get it to work and I wanted to go to bed. I think I wrote a few short messages about that into chat. And then when I woke up at like 11 in the morning the next day, it's like, well, company over very yes. Like, yeah, yeah, right. I do remember that. Right. Hey, Josh, it was not just you. The good news is it was not just you. The bad news is. Which in fact, not you. Just not you. Not just you. That's. Yeah, I forgot you hit that the night before. And yeah, that was a wild morning as we realized that we had this thing just didn't work. And everyone is afraid that it's them. And it turns out Nathaniel began to do an actual optical inspection of the board. And Nathaniel, I think, as I recall, like you've. Fortunately, I did get lucky in terms of one of the first parts you started on is like, well, that one is not the right one. Yeah, I was playing which one of these is not like the others with the parts just quick. And it happened to be in the first three that I looked at. And I had a current gen shark fin and a last gen shark fin. And so it was kind of easy to hop back and forth under the microscope and read the markings. But these parts are small. And the markings on a SOT-223 or whatever these are aren't super clear. And so you're kind of looking like NEE and NEF and trying to make sure you match. But anyway, we found, I think it was like an inverter instead of an AND gate or something like that, so. Yeah, if memory serves, correct marking would have been EE, like electrical engineering. Incorrect marking would have been CJ, like my name. So that was- Yeah, I was gonna point that out to you, CJ. You are. Yeah, if you see CJ, you have the wrong part. This is a problem. This is a problem. So, I mean, that was a wild weekend. Of course, just to kind of bring back the importance of the relationships, Eric, it was a weekend that he had Air Force Reserves duty. But he had built up the strength of the relationships such that anyone could have stepped into his boots, gone up to Rochester and helped push that through. And just to kind of clarify the, you can't surge relationships, Eric and I kind of went through a list of military aphorisms that apply just as much in a startup. You can't surge relationships is definitely one of them. Because Eric was there on site, becoming the mayor, winning the darts league at Roosters, et cetera. I did not, the darts league, I did not. That makes a lot of sense. I would not play darts against Eric, certainly not for money. That might be apocryphal. But regardless. Don't try to walk it back on, it's not me. If he's DMing you furiously being like, Campbell's never gonna play me for, I'm never gonna play him for money anyway. So no, there's no way. He strikes me as a good darts player. Exactly, I feel like I'm being totally hustled. So speaking of, when you say you can't surge a relationship, could you elaborate on what you mean by that? Because I think that's a really important point. I think it just means like, you have to pay attention to the relationship and invest it all the time. Because when the bad times come, that's a bad time. That's not a great time to start suddenly. To build it. And so, Eric, there's a guy, Bruce Wessels, he's, I think he's the Minnesota Division General Manager there. You know, Eric's built up a great relationship with him at Benchmark. And when we had this moment of need, because I mean, as you well remember, this was like super critical timing-wise for us to get to compliance. Bruce Wessels was onsite on a Saturday, you know, helping expedite and calling people that needed to be called and pushing things through. And so that would not have happened if Eric hadn't been there for the better part of six months, regularly building those relationships. Building those relationships. Yeah, when I think also when we had, you know, we had this order of challenge with the heat sink, one of the challenges was that we didn't have a great, we didn't really have a relationship, right? I mean, it was the, and actually it really should be said that kudos to our investors at Eclipse who have always volunteered to help any way they can. And they actually were like, wait a minute, I actually think we can make an executive introduction over there. And it was really clutch to actually get that issue resolved. But CJ, so I think that was an example where we learned the hard way. It's like, yeah, we actually, we really need to have these relationships in place before things go wrong, before you, yeah. Totally, because they will. There'll be something, right? I mean, in this case, it was literally a couple of reels got received and with the wrong part number marking on them, you know? And that's, it ends up on the SMT machine and that's what gets put on the circuit board. So small things like that, they do happen. And that's when you really need to lean on those. I do have another, we were talking about the sidecar heat sink packaging and just to kind of, it's just amazing to me, like having gone through all of this, the things that we were for sure, like this is going to be a problem, like the M.2s, right? We didn't think those little clips were going to hold up to shock and vibe and like, totally fine. Not a single, not a single M.2 came undone, you know? All the things that we thought were going to be problems in shock and vibe or in packaging testing were totally fine. And I think that just speaks to, you know, the importance of testing, not just on the product itself, but you know, also on the other aspects of delivering it. And those M.2s that you said, that is a custom connector that we've, that's a 3D printed connector, right? So yeah, I'm actually am a little bit surprised that those don't come with shock and vibe. Eric and I were just like, no way. Did you check? How many did you check on? We looked at all of them. They're fine. Yeah, how many did you check? Did you check them all? We did. I looked in every single Gimlet. It was, they were fine. Could you talk maybe a little bit about the drop test? Because I actually did not realize fully what was entailed in that until I saw one of the victim Gimlets back here in Emeryville. It's like, what has happened to this thing? It's alarming, right? So we did two kinds of packaging tests. We did the crate, which was like the foremost concern because you know, we wanted to make sure that we could ship that and have that good customer experience. And that actually was fine. Crate, not so fine, but you know, we're working on that. But then we also did some individual shipper type tests because you know, there may be a day when we need to say, ship an individual Gimlet to a customer. And so we want to make sure that that box withstands the vagaries of distribution, if you will. And so we took six Gimlets, put them in boxes that we had designed and we ran them through a standard ASTM D4169 test procedure. And part of that, you know, they have- Which is the drop from outer space? I mean, not outer space, only like 12 inches. It wasn't a very far drop. And five of the six Gimlets got bent pretty badly out of shape on the front where, you know, the U.2 slide in. And so, you know, we've shipped many, many Gimlets across the country and never encountered that. But in this instance, you know, where you have the standard test profile and you want to have like a higher level of assurance that it won't happen when it shows up at a customer's doorstep, we've actually changed the design of that patching material to account for that. And just, again, to speak to the whole, like, it's a whole universe, the material selection, you know, you can actually choose the foam to dampen certain frequent- I mean, it is like insane what you can do with packaging. But yeah, that's what happened to those Gimlets, unfortunately, but that is why we test. Well, or fortunately, they will live the rest of their lives on a rack, because they don't work. I mean, Gimlets are not functional. They've been a little bit disfigured. I don't think they're going to go back into a rack. Yeah, exactly. They cook good on the desk that we also dropped. Yeah, that's right. But I think before we get too far away from shark fins, I did want to, like, bring up a little story where I think CJ flew into Minnesota and picked up a box of shark fins from a courier on, like, a Sunday night in a parking lot, right? Of a gas station, correct. It was definitely very drug deal-like. Did you switch taxis before? No, I did not. I was not super OPSEC concerned, but Steve had booked a courier through Delta Dash, and it just, like, you know, next flight out of SFO to MSP. Oh, God. Yeah, so I did the handoff here at Emeryville. That was shady. I was like, OK. I mean, it's literally just a text message, like, hey, I'm in a gray Honda Civic. And it's like, OK. That is where I was. Is this just, like, a Uber for people that happen to want to fly to somewhere else in the US and are willing to, like, have the costs defrayed by carrying something expensive? Is that? Yes, that's the whole business model. It's desperate companies, mostly, I would imagine, like, in situations like what we were in. And, you know, like, nothing else is an option. Like, FedEx is just not going to get there. Yeah, it was not. Yes, it's not going to get there. And so you got to go with these these couriers. That was that was pretty wild. That was pretty well. I did like I wanted to take a photo of this just because it felt so casual. And I'm like, if I'm about to hand it to you, like, if I'm just handing the future of the company off to someone who's just like, you did what exactly? I'm like, I don't know. He took the box. Like, this is a stranger on the street. So I took a selfie with him, which was probably, you know, just I think he's like, all right, can I go do my job now? Just like, sorry, you know what you're doing. But it got there and it got there because we had to get all the shark fins there and we had to get them all back. So we had everything had to take a lap, which was a lot of work. Yeah, it was a wild few days. And of course, you know, the call comes on a Friday afternoon, so that's that's always when it comes right. But it was it was a wild few days for sure. I think there's been a lot of those where we had kind of some new crisis to I mean, there's a degree to which you're kind of constantly. I mean, we want to have things structurally in place. So we have fewer crises, obviously. But then there's just these crises. You don't the plan cannot be to have zero crises. Things are going to go wrong, CJ, or your point. Yeah, I think just like working with folks, we talked about the value of partnership and the flexibility that it can give you. I think another place that we've benefited from some good flexibility is Seiko, our logistics partner. They've moved racks across the country for several times. That's also in the bucket of things we did. I think right was reach out to a three PL third party logistics partner early. We were I think Kate and Kirsten were talking to them last summer and we kind of got that relationship established. Brian, I remember standing next to you being like when on the day we shipped to compliance, you know, it was like whatever it was, five or six a.m. Like if this guy doesn't show up and they showed up, it was on time, 9 a.m. And you're like, if this guy doesn't show up in the next minute, I'm going to light him up and his boss. I was like, man, I hope for this guy, like, please show up right now. I just for your own sake, just and he showed up right on time. It was great. Yeah, they've been fantastic. They they were our you know, they delivered the first rack. You know, it's great when you can work with a company that is small. It takes you seriously. You know, I think with some of the larger carriers, it's hard to even break through to a human to talk to sometimes. But Seiko has definitely done a great job and partner with us and being flexible. Yeah, that is that that is awesome. And so in terms of how do you kind of bet a logistics partner like that? I mean, in terms of finding the right does feel like this felt like a problem that you we had to get way ahead of. So how do you how does one bet that? Yeah, I think where you look for first is like industry experience. And so we looked for logistics companies logistics companies that had experience moving data center racks. And that is something that Seiko does quite a bit of. So I think that was a big part of it. And I think from there, it's it's all the standard things we look for in any supplier, you know, partnership as a value, transparency, all of those things. And I think just the ability, the fact that we were able to give, you know, Seiko a trial run there with those early shipments really just build confidence in the and that we'd made the right choice. Yeah, totally. And I think the transparency also, it feels like it isn't necessarily like industry standard. So you're wrong there. But it feels like the way we do things is maybe a little idiosyncratic. I definitely think that's true. I will say in logistics, you know, there's like a smooth veneer in logistics where it's like you have this like tracking portal and you get like a GPS locator and you think it's all like very organized. But logistics and freight brokerage in particular, it is like the wild, wild list. Like it is they are managing a lot below the water surface for us and they keep it super simple, you know, like, yeah. Brian, I think you mentioned the Twitter outage a couple of weekends ago and how the GPS tracking of our first rack was like your entertainment for the weekend. I think it was probably for all of us. Yeah, yeah, absolutely. Yeah, no, I totally appreciate that. That transparency was was was terrific. And I think it also just like looking for, again, that kind of that sense of collaboration up and down the supply chain. So when things do go wrong, we can actually work together to get this thing, get this stuff diagnosed and and fixed. Yeah, I will say. Yeah, sorry. One other thing I wanted to thank Eric Austin and Nathaniel Huffman, because when we were looking at how we're going to move this thing, you know, it's a 3000 pound box with the expensive computer. We tried offloading it off a truck once with a pallet jack, and I think someone literally almost died. So we were like, let's not do that again. And so we were like, OK, well, how do you find a forklift and an operator? And Google search was giving me tons of results for like forklift rental companies, which, despite Ryan RFK's protests, we were like, no, we're going to find an operator. But Eric and Nathaniel, having worked on big equipment before, we're like, hey, the thing you're looking for is a rigging company. And so if you ever need to move something unusually shaped and heavy, a rigging company is the thing you should search for. And we use having company. Yeah. And they're in the Bay Area. They're just down the road. They're always on time and do a great job. Not cheap. I will say that. But they're great. All right. Yeah. Looking for for rigging, I like that. So in terms of some of the other I mean, Eric, you being on site, I know that there was a lot of debugging of the manufacturing line that we've done. Do you want to speak a little bit to that? Because I think some of the things that have been interesting to me anyway, have been where we have seen an opportunity to both debug how we manufacture it a little bit, but then also generate better software. So we don't have some of the problems. Could you elaborate on some of the stuff we've done there? Sure, and I may phone a couple of friends here. I think a lot of it has been like early on, I think, Nathaniel, maybe it was it October with I think it was Josh. We kind of hashed out like, what is the programming station look like? I think from a manufacturing standpoint and I put a bomb together which had computer and then Nathaniel said, maybe I'll flush this out a little bit. And he did and actually created some things that were actually meaningful to programming as well as Josh with the software side. And I think working through that was there was a lot of urgency, at least on my end, to know how this process works. So one, we could communicate that to benchmark so we could at least tell them notionally what we're trying to do here and how we're trying to ship a product and tell them that we know what we are shipping is a good product or it can operate. So I think through that process was just trying to get one through the line. I think the chassis level programming, just to use that as an example, I think was a really good example of trying to debug process that really didn't exist in anyone's mind. And then I think, again, through the great strides of a lot of the software team with like RM and Josh, and we had those meetings on like, what does our test process look like? And just kind of outlining that. And Brian, you were on those meetings. And that was that was extremely helpful to work through something that didn't exist and just put it out there and just try to execute on something and use that as a foundation to figure out what doesn't work and then kind of plow through that. Again, I think there are a lot of points where we reached a standstill, and that's where I was a big help, like the doubly is coming out to benchmark to kind of work through that process a little bit. They have a little bit more software experience that can help. They were able to communicate what they were seeing on the hardware side and then kind of communicate that back to Josh so we could we could do fixes real time. And we really saw an acceleration in that process probably over the last couple of months. So that's just on the software side. But on the on the hardware side or just on the on the mechanicals, we were still, you know, even in the PVT up until two weeks ago, we are we're still on the front edge of freedom to some extent on assembling a rack. We had never fully done that in a production process. So we were finding out as we went through things where parts need to be different, placed differently on a bomb, for example. You know, last year, CJ and I were talking. I said, you know, it's not going to be a frame, you know, a huge weldment. That's not going to keep us from shipping. It's probably going to be like a fastener or something small. And usually that's what bites you in the ass. I hate to say it. It's something small that you can you might be able to replace, but it could be something that's a custom manufactured component. Like I said, things you're not always at the front edge of your mind, like packaging. But those are things that will keep you from shipping a product to a customer or a complete product to a customer. So I think it's just a matter of working through each one of those things deliberately and then knowing what you need to fix. And it's like a better. Yeah. I don't know if that it does. Yeah, there's a bunch of calls. So one term that we we talked about a lot is PBT, DBT, EBT or just say EBT, DBT, PBT. It's in that order. Do you want to kind of talk about what those different phases mean and what we are trying to accomplish each of those different phases of product development? Yeah, sure. So, well, I mean, on the on the EBT with the engineering validation phase, I mean, maybe I don't know if maybe I see just looking at the engineers Nathaniel or Aaron, if you want to talk to that. We're trying not to blow anything up. And what? Yeah, exactly. Yeah. Just making sure we're not seeing smoke. But then we go into our development phase. That's the D there. And that is working on basically, you know, just for lack of a better term or just a simplified kind of dress rehearsal for production. So we're walking through at least have an understanding and a framework of what your manufacturing processes work and the manufacturing processes are and even your test processes. So we still had some, I think, I want to think we still had some low level. Programming in place, Nathaniel, correct? In November, we did. Yeah. Right. Yeah. Right. Yeah. I'm sorry. Just like, yeah, we certainly had stuff for the small boards. I don't remember. Not at the chassis level, though. I don't think we didn't have anything in place. Shark fin fans and stuff like that. But we had sort of validated the programming station pieces and all of that. Josh is now only want to talk about barcode readers and your adventures with barcode readers. Barcode readers, sometimes correct. Yeah, I mean, I think they were fine. They got the good one. I think it was good. Yeah, there is. I was surprised at the extent to which the good one, which was much more expensive, was like it was actually much better than the shit one, which was merely expensive. Yes. Right. Like, yeah, that 200 bucks gets you a lot of a lot of change there. Right. But it's 200 bucks on top of already 200 bucks. It's like double the cost. And but it does actually work then. That which is the basic one is fine. If you're scanning milk bottles, I feel like. Like things that are large and flat and you can angle them correctly and there's no glare. And then the good expensive one, they're all what they're all not like these are all they're all like zebra barcode scanner thingies. The good ones have like lasers in them, I feel like. Instead of just bleak little LEDs. It's a video. It is. Yeah. Yeah. The laser ones are quite good. But you were building all the apparatus to scan the barcode and actually... When we say programmer, by the way, we say programmer stations a lot. We're not talking about a human programmer. We're talking about the loading bits onto the various parts of either a compute sled or a switch. Yes, from my perspective, the manufacturing process has been part software engineering and part IT department, I feel like. Because we look after, I think it's now 10 or 12 desktops that we had to spec out. Yeah, we have 11 or 12 out there now, right? Yeah, so there's like a standard keyboard and mouse and little Dell Optiplex desktop and monitor and a barcode scanner and a USB hub and a handful of programming probes. And they're all connected to a VPN so that we can manage them remotely and so on. Which has been terrific because we can actually watch what's happening remotely. Yeah, I've never been to the manufacturing site myself, which has been... I've been relying on the goodwill of other people to go out there and push buttons. But we've been able to do most of the complex debugging stuff remotely, I think, at this point. Yeah. Which is really cool. So just to speak on that real quick, we've had... I think the litmus test has been, you know, can someone, me, programming. And Josh has created such a seamless interface. That UI is fantastic. And it's in Sun Microsystems font, is what I learned, which is really cool. So, I mean, all of the detail there. And I think I'm really... When we hand this over to the test engineers at Benchmark, they are able to program it with little to no instruction. And, you know, so the debugging piece is next, but that foundational piece of just can it get to a working state? I mean, just... Like I said, the interface is... When also getting that kind of feedback from where the interface is not helping us do the right thing. And if someone does the wrong thing accidentally, kind of our view is like, okay, what could we do systematically and in the software to guide you to do the right thing? Make it harder and harder to do the wrong thing. And Josh, I think you've got software that makes it... It does make it really hard to do the wrong thing. It's pretty great. Yeah, I mean, I think... I feel like it's... Anything where the person is using the computer is really easy, like a user interface, user experience thing. And it's tempting to not think too hard about that. It's like, well, it's just manufacturing, right? The customer is not going to sit in front of this thing. But we didn't treat it that way. We put our back into it organizationally, I think. And so there's a lot of polish. And also there's a lot of logging and telemetry. So we were able to... When we had a couple of times where something... I remember during the shark fin thing, we found that there were a couple of shark fins that had the wrong barcode programmed into the ROM. Only about... Like out of 1,200, it would have only been about five. Pretty good rates already. But we were able to go back through the logs and see which sequence of buttons, pressing and barcode scanning and programming had occurred. And I think we'd figured out that it was basically that the... It was not clear enough to the user that the screen hadn't advanced, that they had forgotten to push some button or something. So we were able to correct that, I think, in the flow and come up with a... Like the system won't silently ignore a valid barcode scan in that screen anymore. Josh, we were seeing two barcodes. That's what it was. Josh, when we were doing the whole send it, fix it, send it back, is this when the alarm would go off on the programming station or the scanning station we had? Yes, the siren. That was... I added the siren for the... Because we had this list of barcodes that we had seen and then, I guess, a list that we had not seen, but which must have existed because they'd been manufactured by Benchmark. And then if one of those showed up when we were getting them out of boxes, the computer would start screeching. Well, to your point, Steve, the CEO, was doing this, scanning it, hearing the alarm and taking some action. I asked him what the alarm meant and he said he had no idea. So clearly... Put the one that you're holding in the quarantine bin. That's right. Well, how about that? I mean, it was simplified enough where without understanding the problem, we could all take the appropriate action. There you go. The big red flashing... Yeah. That was fun. That was a... I feel like that was a last-minute thing we did that weekend when we realized that we were going to have to... Yes. ...disassemble all of the things that had been manufactured and pull the 1,200... Well, I guess it was only 700 or 800 of them had been sent to us in boxes. Yes, and this is where we engaged, I believe, the child labor in particular to do the scanning. Right. Members of your family, though, so legal. Like, that's the... It's like it's a problem. Yeah. Right. As OSHA is poring over this call, wondering whether to forward it on to the Department of Labor, please do not forward this to your colleagues in the Department of Labor. Shark fins weigh less than one-third of a pound, I would think, not 3,000 pounds, so I don't think there were any safety issues. The thing I would add, Josh, when you're talking about putting the effort into building good user experience for our programming stations and our test software, I think that really speaks to the same thread we've been touching on a lot, but the relationship with Benchmark, we've treated them like we kind of were saying in the ops team, selling to your supplier, so inverting the sales relationship. So I think that goes hand-in-hand with good documentation, how do you build this, good user experience for the manufacturing line operators, and it just helps us build goodwill when we have things like yield issues or reworks we need done, we're able to speak to and give clear direction to the manufacturing team at Benchmark on what needs to be done, and I think a lot of that goes to the work we've done in the test and programming stations. Yeah, and I think Kate also points out that like we, just, Josh, your point about like really taking this seriously in the manufacturing software and understanding how we can improve it at every turn, that to me is like having all of us own, ultimately if we have a manufacturing problem, it's all of our responsibilities. And I think, Kate, the moments that I've enjoyed the most is when we've got all of these, everyone across the company working together to solve one of these problems and everyone kind of bringing their own expertise to bear, but it's really, really important that one not views manufacturing as someone else's problem because that to me would be a recipe for total disaster. And you can see how some of these relationships go poorly when people don't own the relationship. They just want someone else to just make it for them. It's really not the way it works. I will say I've been a part of a lot of NPIs with various factories and this team we've built at Oxide is the closest relationship between hardware, software, and operations slash manufacturing that I've seen. Like we all work together. We know who to go to if there's an issue with a certain sub-assembly or a certain thing, we go directly to the software engineer, directly to the EE who worked on that. And that's pretty cool. Yeah, I think it's been outstanding. I think it's been, it's been the only way we've been able to pull this off. I mean, I just cannot imagine having doing it any other way at this point because we've really needed, we've needed that kind of cross connection and it's really, but I would honestly, as though others are kind of contemplating building in the physical world, it's like, this is the approach that we would really recommend taking because if you just go out there and try to find a contract manufacturer, you are, it's going to be a recipe for disaster. You really need to take a more holistic approach and kind of a broad team wide approach. So what, what are some of the other things we wanted to hit on in terms of, I mean, it's been such an odyssey I feel like every day has had its own new challenge ahead of us. So I think we've touched on a lot of the things that we got right, that allowed us to achieve this milestone of shipping the rack and some of the trade-offs along the way. I think we'd be remiss on our value of transparency to not also touch on some of the things we could improve on or do better and reflect back. So one thing that I think of is our first customership schedule. We had a very optimistic schedule in the beginning and we've probably had a series of schedule slips along the way. I recall going out on maternity leave in November of 2021 thinking I was going to miss the first customership while I was gone. I was a year too soon. It turns out. We waited for you. Yeah,  We just felt it would have been rude to do that. Eric said a really great quote, which is actually a general patent quote, a good plan violently executed now is better than a perfect plan next week. So I think we were always operating under information we had at hand and with optimism to make the next right decision. And I think that served us well as we were going through this NPI while also building a startup with every process from the ground up. Yeah. And I kind of feel like on schedule is actually a good, a good point because I, my personal feeling in that it's like you've got to keep the stuff schedules aggressive and then understand that they're going to slip for things that you can't control. And, but if you don't keep, if you don't keep the schedule, you have to keep the schedule aggressive enough to force yourself to hit the issues earlier rather than later, but you don't want to have a schedule that everyone knows is unrealistic or I mean, it's a balance for sure. So we did slip, but you know, a lot of the slips I felt were, you know, you look at how much we achieved in the time we had, it's kind of remarkable. Yes, exactly. And I think at the time we hadn't even gone through compliance testing, which we've, we've done a whole episode talking about that as well, but there's a lot we've learned between November, 2021 and today. And I think it's amazing what we've accomplished. Totally. I mean, yeah, God, we've had a lot of, a lot of, I think I said earlier, a lot of fits and starts. One of the frustrating things, like you try to get other entities to create a schedule. And a lot of the times when we're asking whether it's supplier or any of our supply base or any other external entities for a schedule, we're not asking for it down to the detail. We just want notionally like, what is your estimate? When do you think we're going to be done? And of course there's always caveats and notions of it's going to move, but you got to plan for what you think it is. What is the information that we have today? And we've, we've done that. We've also had to go back to the drawing board a lot of the times with bench. And it's like, we kind of kind of keep to dig, dig into that and not just bench, but other suppliers too. We kind of dig into that well, a bit, you know, and I just want, I want to do take a moment here. And so the oxide team is we're, we're, but, but you know, the ops team is structured, I think also fairly flat. But we got Kate as our fearless leader. One thing that we've noticed, I think as a team, and just to just recognize, you know, a lot of the times when we go other, other suppliers, one, we're a startup. I've worked with other startups, other companies. One like, and sometimes you don't take them maybe as seriously, seriously. Like, where are they? You know, we oxide tries to punch above our weight and sometimes we're successful. And sometimes we, we, we punch ourselves, but I, but I think we were able to do that because, you know, Kate comes across and she's going to toe to toe with people that have been in the industry maybe for 30 or 40 years. And Kate comes across with a great composure, great professionalism and a great communicator, which is something that I'm not able to do. And it really helps to have her voice add some legitimacy. And I think, again, that helps build that equity back up. So we only, you know, we only pull her out, you know, when we need to. And so there's some legitimacy with her involvement. But I think that's been also a big saving grace. And, you know, as she is, like you said, Hey, these are 30 something and going toe to toe with folks that are not toe to toe in a, in a confrontational way, but I'm just able to, again, come across as a great representative for oxide. And I think, again, that's been, that's been a huge, huge reason for our success here. So. Yeah. Huge win. Yeah. Like I said, I think you said on the other, on your oxide and friends, I think last week you were saying we have a lot of new employees, but it seems like everyone's been here since day one, but I don't, Kate's been here since fairly early on and helped build this team. So we mentioned that today and there's a lot of people that we owe success to at oxide and Kate's kind of helped kind of formulate this operations team and this roadmap. And it's, it's really exciting to see where it can go over the, you know, over the next year. Yeah. I think just to kind of pile on here, I think that, that one Kate, something culturally that you set very early was this idea of, of not siloing and people working together on a problem across the company. And I think that we, the culture that we have really reflects that. It was, that was really a very, very important ethos to build within the team. Thank you. I couldn't agree more. I think it's been like a mini EE degree in some regards, I mean, degrees sitting through all of the design meetings, but I think it has made us all stronger as a team to understand the challenges ahead when we go to scale manufacturing. Totally. And then I, I also feel like that some of the things that we saw and I just love it where we kind of saw these opportunities to, I mean, Eric, I was reminded when we had the, the, the, the, the, the, the, the, the, the, the, the, the, the, the, the, the, the, the, the, the, the, the, the, the layers of, you know, the clusters actually, all kinds of stuff. You know, like there's a like, you know, like, like we've actually been able to do this with our ceremony. And, and the kind of thing that we've been able to do somewhat uniquely. Absolutely. I mean, you know, we got a lot of looks. Was it almost, I think it was the end of 21. Gosh, I don't think it was the end of 21 when we met and we talked about, you know, ICT and like they're giving us quotes for ICT said we were so far away from that. And I think I said, we're going to build our own test. And so we're still doing that. It's, but it's been really cool in, in to see how we've built things on the fly. You know, as we came up with issues within two weeks, we just did like the DRAM tests that we did for the early on. We implemented here just within the last couple of weeks. I thought that was pretty amazing. And that was done within, I don't know what the timeline to launch there was, but it was days. I think is by the time we had hardware out that Josh sent out and software set up to be able to test that. So being able to have that flexibility and to push that underline is, is really fantastic. And I know one thing I think Nathaniel's already, he mentioned today, he's going through and starting to define that process for Gimlet. And we're going to do that similarly for, you know, sidecar and make sure that we have at least those blocks filled out within the manufacturing process. So we can say, we know what we want to do here, at least architecturally, but what do we want to fill in here? What is the equipment? What people do we need to make that successful with software? How can we make Josh sleep less? You know, get them down to three hours of sleep. Not possible. But I mean, the two clock, the two clock hands are already pressed together at this point. No, it's not a mustache or whatever, you know? Yeah. I think that's, what's really cool about working with a startup. I mean, coming from other companies where you're stayed by processes and, you know, process can be enabling, but they can also be suffocating at the same time. So I think we're starting to find that. I think that find that balance where we can still move really fast, but know what we did. Cause you don't want to move fast. Like what the hell did we just do to get here? At least we have some understanding of there's some breadcrumbs, at least to know where we, where we, where we came from, which is really cool. Totally. And insisting on control to have lots of the environment has been really helpful. Like the DRM testing that you mentioned, we did get done in just a couple of days, but it didn't actually have to send hardware out for that. We're able to do that with the existing platform. It was just software changes. And like we added a new flow to the menu stuff. And that was pretty much it. And I think we've had a few things like that where we've been able to, because it's like, it's our computer that sits on the, on the bench at the, on the line. And we're able to like control the whole, like the OS and then the, all of the UI software and all of the programming stuff is software that we've written or, or open source stuff that we've imported basically. Like, it's not like where it's not like this is a windows PC that had to have some particular binary blob installed on it from each manufacturer and they all have to compete for USB ports or something. There is no windows PC. There is, there's not even a frame buffer actually right now. There's not a read. That's right. That's right. Yeah. There were, I, Josh, I know there was a moment when you and I were debugging a USB issues. I'm like, we, I mean, USB doesn't have being load bearing for us as a company. Yeah. But it's pretty good now. It is. I mean, yeah, we got a lot. We do. The first commit on, on the manufacturing software was, I think August 9th, last year, last year is 2022. Yeah. It's like less than a year since that got underway, which doesn't feel right, but, uh, is ostensibly correct. We have solved a number of USB bugs in, in, in that intervening 11 months. We have solved it over. Yes. No, it's been, it's been a while since we've solved these, these things. It's like, was a very, it was very tough to do it that way, but then the dividend is, yeah, we need to add a new test and manufacturing because we're, you know, we, I think I mentioned last time that we were seeing, uh, Ben pins on press the connectors and we wanted to be able to add this, this dim testing. Then that actually, we can turn around really, really quickly and add that stuff. We're able to add, uh, control of the bench power supply, which is a GP open just with, uh, with, uh, one of those a different USB, GPO FTDI dongle things just like a couple of dollars and, and a couple of wires. So that was pretty good. Like USB, not the greatest, but flexible and works. Now works. Now touch wood. Don't say, why would you invite the peril? Why would I know? I know. All right. I'm sorry. We're going to be spending the next end months debugging. be problems. But it actually has been great to completely control our own fate in that regard. And I would like to believe that it allows us to, again, as a team, react to that next crisis really quickly and be able to do what we need to go do to ship a high-quality product and to ship it repeatedly and to get that. And also, I think the thing I'm really looking forward to, Kate, is getting all the feedback back into our processes. As inevitably, we discover things that we can improve, and getting all of that improved over time is going to be a lot of fun. Yeah. It's definitely just beginning. Like we mentioned at the top of this call, that we've shipped one of one that are the same rev in terms of the revision of the PCBs. And so it's now about going and making that a repeatable process, taking the lessons learned, doing that postmortem feedback analysis, quality improvement, yield improvement. It's honestly the most exciting part for the Ops team, although the journey here has been very fun as well. Yeah. It's going to be, especially as we scale this out, it's going to be a lot of fun. And we've got definitely the right foundation to do it, and especially the right team to go do it. So I think, Kate, if you had advice for other startups that are contemplating the hardware space, what would be your thoughts for them? Yeah. My number one thing is removing the silos across teams and getting operations as close to engineering as possible. I think that's been the biggest win for us. Building domestic for engineering build cycles has been life-changing compared to... I was in a period where I was doing two weeks on, two weeks off between Asia and the US during an MPI, and this time around has been much, much better. And then the other important thing I think is just the quality of the team. So the breadth of experience from different industries, different backgrounds across the operations team has really served us very, very well. And also I will shout out that we plan to open source our Ops policies and procedures. They're not all polished and ready for that quite yet, but something that I don't think there's enough of in this space. We all leaned on prior experiences and our opinions and best practices that we have from industry knowledge, but I don't think there's a lot of reference material out there for operations, policies, and procedures. Yeah, I think you're right. And I'm excited, Kate, for us to get this out there because again, I think that the service that we can do to other folks, aside from offering our wisdom and I certainly agree with everything that you said there, I think that we can really show what we're doing and show all the kind of the hard work that's involved and hopefully inspire others to do something similar. Because I think it's fair to say that this is a domain that has not had much open source. When you were in, people do not open their manufacturing processes really that much at all, but there's a lot of value in doing it. So we're really looking forward to getting that out there. All right. Well, this has been exciting. Thank you so much to the team for joining us here. This has just been, again, a terrific journey so far. We're really excited to go scale this out and really appreciate all of your wisdom. And again, even though we've got a colleague who says that she's going to puke on me if she ever hears me say that, teamwork makes the dream work. So, sorry, Megan. My four-year-old says that now. That's a good one. Teamwork makes the dream work. I love that one. I love that one. I think that that's great. I don't care how corny it is. Teamwork does make the dream work and we've got a great team here. It's been a lot of fun. All right. Well, thank you very much, everybody. And thanks for the tales from the manufacturing line, as always. And Erica, thank you especially for all the hard work that you've done on site there in Rochester. And don't play darts against Eric or money. All right. Thanks, everybody. "
  },
  "40fa0575-47c7-47aa-9920-23a77d3e2483": {
   "Title": "Open Source and Capitalism with Ashley Williams and Adam Jacob",
   "Description": "\u003cp\u003eAshley Williams and Adam Jacob joined Adam and Bryan to continue their panel discussion with Bryan following up his p99conf talk revisiting open source anti-patterns. Notably, open source has accelerated the distribution of value… without clarity on how contributors can capture that value. Has open source accelerated unequal distribution?\u003c/p\u003e\u003cp\u003eIn addition to \u003ca href=\"https://mastodon.social/@bcantrill\"\u003eBryan Cantrill\u003c/a\u003e and \u003ca href=\"https://mastodon.social/@ahl\"\u003eAdam Leventhal\u003c/a\u003e, we were joined by friends of the show \u003ca href=\"https://mastodon.social/@ag_dubs\"\u003eAshley Williams\u003c/a\u003e and \u003ca href=\"https://mastodon.social/@adamhjk@hachyderm.io\"\u003eAdam Jacob\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eSome of the topics we hit on, in the order that we hit them:\u003c/p\u003e\u003cul\u003e\n\u003cli\u003eBryan's Talk, \u003ca href=\"https://www.youtube.com/watch?v=um5bC20NTQ0\"\u003eCorporate Open Source Anti-Patterns: A Decade Later by Bryan Cantrill, Oxide\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=8yTrGsts00U\"\u003eSubsequent panel with Adam J. and Ashley\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://share.transistor.fm/s/144dd00e\"\u003eOxide and Friends: Open Source Anti-Patterns with Kelsey Hightower\u003c/a\u003e from August 28th, 2023\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://share.transistor.fm/s/ac98148d\"\u003eOxide and Friends: Docker, Inc., an Early Epitaph\u003c/a\u003e from September 13th, 2021\u003c/li\u003e\n\u003c/ul\u003e\u003cp\u003eIf we got something wrong or missed something, please file a PR! Our next show will likely be on Monday at 5p Pacific Time on our Discord server; stay tuned to our Mastodon feeds for details, or \u003ca href=\"https://sesh.fyi/api/calendar/v2/iMdFbuFRupMwuTiwvXswNU.ics\"\u003esubscribe to this calendar\u003c/a\u003e. We'd love to have you join us, as we always love to hear from new speakers!\u003c/p\u003e",
   "Link": "https://share.transistor.fm/s/ca5bb536",
   "Filename": "40fa0575-47c7-47aa-9920-23a77d3e2483.mp3",
   "GUID": "40fa0575-47c7-47aa-9920-23a77d3e2483",
   "Published": "Mon, 23 Oct 2023 17:00:00 -0700",
   "Transcript": "So Brian, loved your talk the other day, really enjoyed the panel, Ashley and Adam. But Ashley and Adam, you know, Brian is a bit of a shrinking violet and you really didn't let him get a word in edgewise on the panel discussion. And I saw her desperately trying to get a word in. She promised us that he was the moderator. I think it was great. No, it was terrific. I mean, obviously the three of us, there is no moderator. That's the reality, the three of us. There's no moderation that could happen. You can't hold us down. Exactly. No, it was great. Thank you very much for, that was a lot of fun. And I do feel though it was short in that like, just as it was getting like super spicy or like, and we're out of time. Oh, come on, now we're getting interesting. But that was a lot of fun. So thank you both for, yeah, where do we want to pick it up, Adam? Do we want to, do you want to give a little bit of context here for? Yeah, do you want to give a little synopsis of your talk perhaps? And then there were actually a couple of topics that kind of tailed off towards the end that I was hoping that we could pick up. Sure, so my talk was a, I revisited a talk that I gave in 2012 on corporate open source anti-patterns. When we learned that Ashley had baby Ashley dreams about what open source was so long ago. Actually, I love that. I love the way you phrased your younger, more optimistic self before we were all jaded. And, but so in that talk, I was really focusing on, I mean, Oracle was the villain of that talk. That's like, let me just like distill it down for you. It was Oracle based villainy and more like, not actually Oracle has so much villainy that you've actually got to be more specific than that. This is more like the companies that large companies that were participating in open source poorly in the kind of the Oracle's extreme, they were making things reproprietary, but a lot of other companies just weren't really abiding by the social contract to open source. They weren't really giving back. And that's kind of what I was, that was the theme in 2012. In 2023, that is not the theme. My, if Oracle was the villain in 2012, then just bluntly HashiCorp was the villain in 2023 in part because they just embody so many anti-patterns. Who saw that one coming though? Seriously. Did not. Did you see that one coming? I did not see that one coming. I didn't see it coming at all. They lost Heroku. The fate of Heroku I feel like was when the direction started going a bit sideways. I had a few people in Twitter. Hashi in itself, like in particular, if we were good to go back into a time machine, even a year ago and tell ourselves that like, Hashi's the villain, you'd be like, what? What happened? Don't, is that what you meant? Yeah, yeah. I just, I wouldn't have predicted it. And there were a few people in my life who are like, who are like smart in the know folks in the open source conversation who dropped like, who dropped hints that they were like, just wait till the big bomb drops, you know? Oh really? And I'd be like, you can't just say that shit to me. Like give me the gossip, you know? Like I'm over here being a friend. You can tell me to keep it a secret. They kept that shit locked down tight. But yeah, there were definitely rumors that I was not privy to or they were briefings, could be briefings. But yeah, I did not, I would not have predicted it. In fact, like two months ago, three months ago, Adam, I would have put them at like last on the list there. I felt they were like, I kind of loved them. And I think that's what made this change all the more galling for me. Yeah. I think you're right, Adam. That's a really good point. That like, cause I mean, God, it was, when we had Kelsey on talking about it, it was so, I mean, and it just, you know, Kelsey talking about like, hey, all the work I did for you back in the day, you know, I didn't have to do any of that. And now like, I'm a chump for doing that work. I mean, I was just very, very evocative. And yeah, it was totally surprising. And I hope, you know, I gotta say, yeah. I just said, who do you think is next? Cause certainly Ashley Corb won't be the last. Adam is now when we announce a, I shouldn't even joke. My product hasn't even made it into the market really yet. I'm going to go business open source license. Okay. So, okay. I'm going to be optimistic. I'm going to be optimistic. I am going to say that this is a turning point. This is just, so I know this may be ridiculous. I think that prior to Hashi, it felt like there were no consequences. And in part that there were no consequences because the bucelling that was happening was actually lower key. It was kind of, it was tighter. I mean, you look at like what, you know, Adam, when you and I were blogging about what was happening in 2018 and Confluent and Cockroach, they look, I mean, we have so moved the Overton window that they seem like completely reasonable by comparison. And so I think that like, so kind of with every act, there was this kind of like implicit escalation, everyone using these other companies as the justification, everybody's doing it. I'm just doing it a little bit more. Everyone's doing it a little bit more. And now I actually really wonder if we haven't hit the, like, actually, this is too far and you're going to lose the whole kit and caboodle and serve as a warning to other, I know this is too optimistic, isn't it? I know, it's like, I'm so glad this is recorded. So that, you know, 20 minutes from now when someone switches their license, we can play it back. I've had more than a few, like, let's call it a handful of conversations with people post HashiCorp's news, being like, our board is asking us this question. Is this what we, is this like what we should do? And not being demanded to switch by their board. Do you know what I mean? Their board's not showing up with a fiat, you know, saying like, do this or you're in trouble or whatever. But just people asking the question, hey, like, this is a clear trend. All the like big versions of what you hope to be someday are doing it. Like, should you be doing it too? Or are you like missing a trick? And like, I don't, for, you know, for every handful that talks to me, there's like many handfuls that aren't, you know? And even the ones who did talk to me, like who knows what they'll do in the end, right? Like, it's not like everybody listens to my advice and is like, oh my God, Adam Jacob, you know? Like, gotta do that. So I don't know. I think it's, I think it's gonna be a word before it gets better. I don't know. Your advice is usually very positive, I think, Adam. So I wouldn't sell yourself for it. I think I give good advice. I'm not saying it's bad advice. I think it's the right advice. I just, but I don't know. Not everyone's smart and not everyone follows it. That's fair. They may not follow it. Yeah. So Brian, terrific talk. Really enjoyed it. And then a great panel that broke out. And I think the organizer was like trying to give everyone the hook and everyone in the audience was asking them not to. This was great. I didn't realize that until after the fact. I don't know if Adam and Ashley realized that. I did not realize that until after the fact. Do you realize that they gave us like, that they were trying to give us the hook earlier and the P99 crowd demanded that they let us run longer. No. Yeah, it was pretty good. I had no idea. That was my one- That's also why the end was so sudden. Cause they were like, no, no, no. Now I'm cutting to a commercial, like right now. I'll admit, I assumed the end was always gonna be sudden because we all knew that 20 minutes was like not enough. Yeah, we weren't gonna be done talking. Well, now we can really stretch out. One of the topics that we ended on that I really want to pick back up is that someone, I really can't remember who it was, sort of pointed to the big co's from 10 years ago and big co's now and saying that their behavior was materially different and better and improved. And I think someone else taking the other side of that. So I don't know if that resonates or sounds familiar, but I'd love to hear like, what do people think of Microsoft, Meta, Amazon in terms of their participation in open source? Now that's changed. I mean, I think Brian was making the point. Go ahead, Ashley. Oh, I think the thing I was gonna say was this word rapaciousness that got repeated way too many times. But I think the thing that's really interesting that I think forks with that question that you were just saying is like, there was an element, I feel like Brian was saying of like that open source can be a guard on like the greediness of corpse. Right, yeah. And I feel like Adam said like, the greediness came from the entrepreneurs in open source. And then I kind of was like, I think everyone who participates in open source has some level of greediness. Yeah, I'm 100% actually on everyone's greediness. Yeah, I'm with you on the greedy side. I actually think, I don't think that, I think there's very little, only like there are individuals who hold I think really deep open source ethics and really like believe in the movement and like what it can do for humanity. I'd like to believe I'm one of those people. And then there's the like reason to participate on an individual level, which tends in some larger way, which I think tends toward greed. And definitely if you look at like Microsoft, like Microsoft didn't have a conversion because of they suddenly caught a case of like morality, like, you know what I mean? Like they just, like what they saw was this potent weapon they could use to make a bunch of money and hurt their competitors and they took it and then it worked and now they're like, oh, we should do that more, you know? Yeah, and I think that my argument would be that, and let's call it for the moment, self-interest, even though we can acknowledge that it might be avarice, but that that self-interest that, and you have entities like Microsoft, that yes, our Microsoft is not engaged in open source because it thinks it's good for humanity. It's because it realizes that it needs to do this for its own self-interest. And I think my argument would be that that presence is very important because if you, the open source acts as a check on these companies and that they behave even worse when they are strictly proprietary because they have not just unlimited pricing power, but they effectively have a natural monopoly under their, over their own customers and they end up in this, just this obscene relationship that even, and so this is my, this was, I think, I, Adam, you and I. Let me add on, let me add on. Yeah. Yeah. Well, no, because I think people don't understand how ugly these, I mean, and Ashley, I guess we're not allowed to use the word rapacious. Do I have to have a synonym for rapacious? You can, I just thought it was very funny that we like got stuck on such a illustrious word. Like, it was just funny to me. Yeah. But the way in which these strictly proprietary companies handle themselves are, is so unspeakably gross, especially now. So it's like, and in particular, so actually, Adam, as I was reflecting on what you were saying and kind of as we were talking about that in that panel, I've got a metric for you. And that is how often do you litigate against your own customers? And I think that this should be like a, this should be featured at like a public company should have to say how frequently they litigate against their own customers. And this is something that Oracle does all the time. This is something that Cadence does all the time. This is something that actually, and then maybe, maybe Red Hat does do it all the time. I'm actually. They do. They do. And I did too, Jeff did. Like I had totally had to, if I didn't go to customers and be like, hey, you owe me more money. They would, it's not like they were volunteering. You know what I mean? And like, yeah, I think I, I'm not sure that the level of litigation against their customers goes down. I think, I think it's, it's tenor changes because you're the, the customer has a, has an option that they maybe didn't otherwise have. Yeah. But the, but the, the pursuit of the dollar, I think is probably roughly the same, you know? Yeah. This puts me into my thought that, like from the open source perspective, it hasn't changed it. It's just sublimated it. And I won't do any more psychoanalysis babble or anything, but the idea is that like, it's taken the same like behavior pattern, but it's like thrown a layer of abstraction on it. So it's slightly harder to point at, which actually kind of makes it more insidious. Like one of the words that you mentioned that really struck with me, and I was thinking about like what I was going to talk on this panel today. And like the thing that's like stuck with me was that like, and maybe this is also my Roman Catholic upbringing, but like open source, like is really what taught me that ambition is a sin, which is that like the, the only way to like get a monopoly now, I think in tech in many ways is to do open source and do what is functionally the standards grab. And so I think in many ways, like I think that's what the CNCF does in many ways, but like that's what I think it is. And I think it's just that it's become slightly more socially acceptable to take that path for now. And then once it isn't, there'll be like a new layer of abstraction that we throw on top of it, but the same underlying motivations will remain. So which is kind of not the baby Ashley. So open source is kind of a way it's a, it's a pallet cleanser for world domination that you are, the world domination is actually acceptable in an open source vehicle. Is that a, is that a fair way? That's right, it's like world domination with like extra carriers. The big coasts have harnessed this to wrap their, otherwise a lot of the same things that they were doing with this morality. Oh, a hundred percent. A competitor comes in. I dropped my price to zero. The SEC is very interested in that. If instead I have this open source product that I'm giving away, it changes the tenor of that completely. Totally. And if you look at like- That was the other thing, monopolies, but also the price fixing, like open source is price fixed against zero. Yeah, totally. There's like a, that Microsoft does this now. They launched a, they launched a thing called Radius, which is like a DevOps infrastructure is Cody platformy tool. I don't think it's particularly interesting as technology, but that they did it, like they launched it as an open source project, right? It clearly competes with a bunch of existing, both open source and proprietary things, including things inside Microsoft's own house, right? And like, and it has like clear and obvious monetization hooks that lead you into Azure or other places. And like, you know, they've figured out that, you know, if that was a proprietary thing that they had launched, they would have looked like they were bullying people around in their own ecosystem. But, you know, slap an open source license on it, say they're going to give it to the CNCF, next thing you know, like we're all, it's all good in the hood, right? Like we're all friends here, right? And like, you know, mm-hmm, sure. Friendly. That's right. And they're pulling up the ladder, you know, from other startups that might want to enter that space. Oh, for sure. Because all of a sudden I can throw a thousand engineers working for zero revenue and just monetize it in these other products. So Adam, is this the 2023 equivalent of the Vaporware announcements from the 90s? I mean, is that, because Microsoft famously would do this. They would announce things that they didn't have to kill startups. I think it's, I don't think it's that bad. I think it's actually, I think it's actually more innocent than that. I think it's literally, Google does this all the time too. Like, you know, there's a good idea and then like there's a Google-y take on that idea. And then they're like, obviously the Google-y take is a better one because it's Google, you know? And I think Microsoft's the same. And then now there's a vehicle for getting those ideas to sort of, to feel like they're wrapped in a giant Careberry hug, you know? Which is, we open sourced them and we gave them to a foundation, you know? And like, it's, the motivations for doing it are, I'm not sure how much they've changed, but they're wrapped in a layer of principle that makes them more palatable to everyone, right? And I'm not sure how principled they actually are most of the time. I didn't know about this vaporware pattern, but I will certainly say that while I haven't seen companies necessarily do this, I have seen open source foundations release functionally nothing under the name of land grabbing it for collaboration so that it doesn't result in competition in the ecosystem. So I've seen that a lot. And that is definitely a way that they try to crush competition. But that has definitely happened. I'm sure people- Okay, so let me ask you this, Ashley, because that's really interesting. I would love to get the details. I would be very curious to know what fraction of them were the OF. I mean, I can sort of gesture at Rust async. Oh, interesting. Okay, well, let's- I'm probably in huge trouble for saying that now, but I mean, there's definitely a big, like this is a pattern- But you're not wrong. In total, like Rust kind of went, I mean, in many ways I think everything is like ebb and flow and so they reacted really hard one way. And the idea of like building something out in the ecosystem and not like fully collaborating all on one thing that's the official thing is kind of seen as bad. And so like early on Rust, like kind of even though it's not in the standard library, the standard library is small or whatever, it did stake out a bunch of things and like sit people as like leads in those places to try and like keep them from being ecosystem driven parts of the project. And do you see foundations doing this with other kind of broader technologies? I mean, is this part of a broader pattern, do you think? Because, and let me, so let me ask this, because the thing that- Multiplier programs and foundations, sometimes the foundations are not operationally efficient enough for me to assume that they're doing it in a strategic way, but sometimes it ends up having that impact anyways. Right, okay, fair. And this is, I think, I mean, it's always a good idea to ascribe things to incompetence that you're tempted to ascribe to malice. So, I mean, it's like, whoops, sorry, we accidentally, like, did I, did I kill this other community over here? Sorry about that. So one thing that is interesting about this kind of hashy thing is that it is increasingly clear that they are drawing a battle line against the LF. And that is going to be a weird narrative to unfold, because that's something we have not seen happen. We have not seen a company go to war with a foundation. And first of all, do you see the same thing? And like, is that, because one question I definitely have for you both is like, what the anti-patterns are gonna be, sort of the, like, what are we gonna come back a decade from now and talk about with respect to the new anti-patterns? Actually, maybe we'll say that to the end. I should not, I don't wanna get too far ahead of ourselves. It's a pretty good question. Look, I'm totally here for, I don't, this is my personal opinion, which I'm sure- is going to get me in trouble in some future point in my life. But I think in general the Linux Foundation and the CNCF more specifically, I don't think that they've always been great actors for the entirety of their ecosystem. I think that they are great actors for the people who pay them the most and they're incredible vehicles for funneling the hopes and dreams of those large organizations into collaboration and software, which is great or whatever. In many ways it's great. But I wouldn't say that they're necessarily positive actors in a lot of cases. And I think if you're HashiCorp, I think the problem with HashiCorp was deeper than HashiCorp talks about. I think the shape of their business and its inefficiency is for real. And I have an anti-pattern that I will declare there that I think that whole model of building open core companies is broken and sort of irretrievably so perhaps. Can we talk about that? Is now the time to talk about that? Because that is something you mentioned in the panel. I think that is a really important point and it kind of gets to this advice. Because Adam, you're talking about people reach out to me for advice and they kind of ignore it. What kind of questions are they asking you? Because I imagine people are asking you, hey, I've got this open source project. It's pretty popular. I'm thinking about this open core model. What do you, Adam Jacob, think about that? Yeah, sure. What I get a lot of is just, we have this thing. How do we think about open source in relationship to our business? What's the right model to think about it? I try not to be a pedant about the fact that open source isn't a business model, yada, yada, yada. So with that out of the way, we'll just call them business models because it's easier. I think what I see and have seen more and more of and becoming more and more convinced of is that we essentially think about open source as a vehicle for setting the acquisition cost of the product to zero, which is basically what open core does. So you give away a ton of value for nothing and then you create some barrier artificially somewhere else upon which some segment of the market will want that value plus some other kind of value you can add into it. And that's where you sort of draw the line for open core. There's other definitions of open core that are, I think, functionally useless. So just go with mine. I like yours. Yours is good. But that model of how do we do it, that was HashiCorp's model. It was MongoDB's. It was Confluence. It was on and on and on, right? Chef-like. And what's wrong with that model is the part from a business point of view, forget about the open source part of you for a second, is that the most valuable thing you do, you set the price at zero. So there's something that the product does that's amazing. Terraform. So cool. Does something awesome. And you've said it's worth nothing, right? And then not only is it worth nothing, you gave away the source code to it, too. And the entire product process, the entire pipeline that brings that product into the world, you gave that away for free, too. And it's the exact same thing that you will receive if you just hang out in open source land. Ubuntu is the perfect example of this. Ubuntu had a strategy. Simon Wardley very famously talks about how he guided this strategy for Ubuntu to take over adoption in the cloud. Ubuntu, far and away the most used operating system in cloud providers by a huge margin. Ubuntu struggling very hard to come anywhere close to the level of monetization that SUSE has in operating systems, right? So number one with a bullet, total utilization, number four, probably in monetization with a bullet, right? And struggling. And that's because Ubuntu took the core of their product, and they gave it away for free. And over the years, they've been tinkering around the edges trying to figure out what else they can convince you to pay for. And the answer is nothing. You want nothing from them, right? There's nothing of value really that you want from that. Oh, contrary, my friend, I would like Juju. You do not want Juju. No one wants Juju, right? And What is Juju? Another configuration management thing. It was the first time I went to Barcelona, actually, it was to try to convince them to use Chef and not build Juju. And it did not work. Anyway, You don't want to rephrase Chef in terms of Juju charms? I did. I didn't. I didn't. I tried. It didn't work. Anyway. So when I say that model is broken, what I mean is that from a business point of view, you create this incredibly difficult problem, which is, you're hanging all of your monetization on this very inefficient, this very inefficient monetization vector. What it's good for is that you open sourced it and it causes this humongous lift. So when you open source it, and you get other people to use it, and they go create value, so they do use Ubuntu. And it gets into their whole environment. And Ubuntu is great. People talk about it, and they share it with each other. And all of a sudden, there's way more people using Ubuntu than you ever could have convinced to use Ubuntu if it wasn't available to them for free. But then you have to convince those people to pay you and you can't. And if you become a public company like HashiCorp, or like MongoDB, then you inevitably look at that sales pipeline, and you look at the number of people who are using your software to get benefit, you look at what you receive from people who contribute back, which is almost nothing. And, and you go, wait a second, if we could convert, let's say we lost 80% of the terraform market, it just evaporated. If that 80% was the open source part, the part where people used it for $0, but they got 20% of that large terraform market to start paying them for terraform enterprise or terraform cloud, that is a fucking good quarter. Yeah. And that might even be the calculus. As much as there is a calculus inside of HashiCorp, that might even be the calculus. Oh, not might, it is the calculus. Absolutely. Adam, to pick up this example, do you think, I mean, let's say, do you think terraform is successful as a non open source product? Like, do you think that they if they can take that route without being open source from the jump? At the size that they are now, I believe that they can be successful at doing that because people already recognize what terraform is. HashiCorp can set the price at whatever they want to and some large number of it'll be zero, right? They'll have slower growth, perhaps than they had before, it opens the door for more Pulumi growth or whatever. But, but, but it'll work. I from the jump, though, I'm not sure they could have, right? I think, I think the size of that open source community, the work that like Kelsey Hightower did, that lift that happens from being open source is so powerful. And I don't know how to replicate it in a way that is proprietary. I know how to replicate the business model of selling enterprise software. That's what Red Hat does. So what Red Hat does is they open source all the software, but under no circumstances, can you get their product for free? Yeah. So you can take the software and do what you want with it, but you can't get it from Red Hat. If you want it from them, you must pay them something. Even if they set that number low, Ansible is zero dollars, for example, but it's like only Red Hat gets to make Ansible, right? And I think the... And so, Adam, is that your answer for like, okay, like, open core is a disaster. So what do I do instead? What I do instead is if I'm, if I'm pure, if software is the vector, I am charging for the product, the product is open source, but it's the rather... The software is open source, the product is absolutely proprietary. Yeah. And yeah, that's, that's what I think we should start shifting people to. And I think the evidence that tells you that that's a more efficient monetization vector is pretty clear. In a bunch of different scenarios, you look at like, Kubernetes monetization, Red Hat's got a billion dollars in ARR. If, in case you don't know, it's really hard to get a billion dollars in recurring revenue. Like, it is really rare. HashiCorp, public company, nowhere close, right? Somewhere, what, they're hovering in the 420s, I think, in ARR? Something like that, yeah. And a lot of added services and support. Across a bunch of different product lines, right? Meanwhile, Red Hat, OpenShift, one billion dollars in ARR and growing rapidly, right? On software they didn't create, that a foundation runs, right? That what they do is curate an enterprise product that they can, you know, produce and support and test and integrate and, like, do all of the Red Hattie things. You can go get that exact product for free from somebody who's not Red Hat. But you won't, because you can't run that product in Morgan Stanley, right? Morgan Stanley doesn't want a product that comes from, like, Bob in France, right? But isn't that another way of what you're paying? So what you're paying for is brand, but you're also paying for services, you're paying for support, you're paying for that someone's going to stand by this thing. Is that what you're ultimately, I feel like supply chain security, you're paying for development time, engineers, expertise, you're paying for the product to be vended to you in the same way that, like, you know, you're the iPhone, I, like, I don't just get the software, right? If they just gave me all the software that runs the iPhone, it doesn't mean shit to me, right? What I want to do is go to a store, buy an iPhone, make a phone call, right? That's not a really fair analogy, is it, Adam? Because, like, there, you're talking about something physical that I couldn't replicate at home. I mean, this is the argument of every software engineer that I've ever had to explain this to instantaneously. They're like, well, but Adam, if I can do whatever I can do it. And the answer is, sure, you can, kind of, except you also do actually want to know, like, who produced that software you're running? Where did it come from? How did how are they going to patch it? Do you know that they're going to do that? What's the what's the agreement you have with them? If there's a problem, and you need to repair it? And there's a priority one issue? Is it just like, and like, on and on and on. So like, software engineers tend to overvalue the shape of the software and the total arc of the product. But there's a ton of evidence that tells you that actual consumers, people who buy software, even in the large enterprise, don't particularly care for the software, they don't want the software, they want a product they can run, they want a problem they can solve. And if you charge them money for that problem, they will buy it. And if you Yeah, so on the terraform example, so you know, we roll back the clock. Yeah, you know, Mitchell, you know, doesn't put it up on GitHub does put it on GitHub. But regardless, the way it's brought to market is not with us freeloaders, but rather, as a packaged product that Oh, by the way, it happens to be open source. But you Morgan Stanley, of course, like you want to buy the product? Yeah, I if if, if it was me, what I would have done what or now what I know to have done, I wouldn't have done it then because I didn't know this then. But like, I think the the answer there is HashiCorp builds terraform terraforms a product that they use their trademark and their distribution terms to set up a proprietary distribution of much in the way that like VS code is a proprietary distribution. The software itself is open source. But if you wanted to take Tara, take that source code, terraform, and not pay for the privilege of using the terraform product that's built by HashiCorp, what you have to do is take that thing and fork it, you got to call it, you know, a gel. And you got to like, have a gel become your proprietary, your version of terraform. And you could decide that that's a, that's a license in license out version, and the and all of those things, and you can collaborate with them in the upstream. But what you can never get is terraform for free. And if they'd done that, they'd have been monetizing all along, at a at a significantly better rate. So my counter to that would be that not everything can be monetized to the same degree, not everything. So in particular, like if you have, if you cannot take bash, and turn that in, but that's not particularly valuable at this point. Right. And I think I would argue that terraform panel, like a hash table, they were like, how can I monetize my hash table? I'm like, you can't, no one gives a fuck about your hash table. But that's not an open source business model problem. That's a this software has no value as a product problem, right? Like, we're just not willing to pay money for that problem. Right. So actually, this, so it's something actually, now we're gonna get really spicy, because you work for another company that was attempting to monetize a space that really wasn't clearly monetizable in terms of NPM. Well, this is very funny, because I wasn't sure if you were about to ask me what my plans are to monetize monetize the tools that I'm currently building that are very good. That would be very good. Frankly, it's certainly certainly something that I'm paying attention to, I think is important. I guess the thing I'll start with is I don't think the package management space is unmonetizable. I just think that the way NPM went about doing it was terrible. Um, these are not our favorite products, but like artifactory exists, Sona type exists, like there, there are people who are taking your packages and are putting them places and then delivering them to you and they are making a lot of money. But yeah, so I guess so that's kind of my question is like, because artifactory is a I mean, it's a smaller business than I think NPM had eyes on being certainly than NPM investors thought they were going to become NPMs investors are done backflips if they could have been artifactory. Yeah, I know way so much. I feel like I've been competing with artifactory my whole life. It's so weird. I'll be like a rom com with artifactory somehow, or this is like, I don't know. But I mean, artifactory has surprisingly large contracts is what I will tell you. I think that you'd be surprised. Like, literally, Apple uses artifactory and Apple doesn't like using third party things very much. So yeah, 2022 fiscal revenue was 280 million 35% year over year increase. That's primarily artifactory. And that would Yeah, you're right. NPM would have killed for that kind of revenue. So absolutely. So actually, you say the space is is monetizable. And then indeed, becoming more so now that like the I mean, Adam already mentioned, like the supply chain, like the supply chain of your supply chain. I mean, I love recursion, right? Anyways, it's becoming very, very profitable, I think, like, where the software comes from, where you're storing it, how you're delivering it, like, is very important. I think there are a couple of problems with with NPMs approach. And I was the little baby communist that I spoke of in the panel when I joined NPM. And so I, I met a lot of like, harsh realities very quickly working there. Is that going to be a drug? Is that like a dramatized series on Hulu at some point, I just really want to go watch that I just have this image of you. This is you know, who plays you, by the way, in dramatization, you already figured that out. But I'll take suggestions. That would be very interesting. But I think that this this kind of dovetails back to what Adam was saying. And I do think was a problem. And I don't think I signed an NDA at NPM. Anyways, it's all water under the bridge now. So, um, but, uh, like one of the biggest problems, I think, if your company has like an open source tool, somewhere in it, I don't know, maybe it's at the core, maybe it's more to the side. I think the key thing is that you can't be building two things. Like you can't be building, like, your product that you're trying to sell people. And then like, also the open source. I think there needs to be like a story about how those are the same. Because if you end up building out two things, and that's what NPM was doing, like NPM Enterprise was like a complete fork of the entire thing. Like, you're really, yeah, you have like a conflict of interest with yourself. Like we were competing internally. Like, it is very awful. Yeah. And I think a lot of companies do this. I don't think this is just NPM. Like, I don't want to throw shade just on them. I think I've seen it in a lot of places. Um, but that's definitely right. I mean, Atlas is still not open source. I don't think right. Was Atlas ever opened? You're talking about MongoDB Atlas? HashiCorp Atlas, right? Everyone's got an Atlas, you know, it's great. The so yeah, so actually elaborate on this. Well, I determined if HashiCorp Atlas is actually a thing or some fever, fever dream that I had a lot of products, and I cannot keep them keep track of them. But like, I don't know. So this is like, potentially really embarrassing. And I can only hope that some VCs that I like, had this anguished conversation with, like, hear this, and like, I somehow become redeemed. But like, for a long time trying to figure out what I was going to do at Axo. The thing that I was really stressed about was I was like, dammit, you can't sell software, the only thing you can sell is infrastructure. Like, so I'm just gonna have to like, take the software, and then I'm gonna have to like, figure out infrastructure that's really hard for people to build, and then like, sell them that and then we'll run our code on it. Um, but actually repeat that you can't sell people software, you can only sell them infrastructure. Am I that correct? That I will say that that is what I said, maybe that's not right. And like the thing I was really and I can't say company names about this, but I had worked for companies that were doing the same kind of plan, ostensibly very high valuation companies. And just like depending on who your infrastructure provider is, like the margins here aren't the margins that people anticipate in software companies, right? Is everybody's developer experience product is an abstraction layer on top of somebody else's abstraction layer. And so we're all just like eking out like pennies on the dollar on top of somebody else's slightly harder to use thing. And I feel like there's like a tragedy there. And that like, can we be building something greater, maybe? It's been a while, like, just I was like, I'm gonna take some calls with VCs. And like, you're not supposed to take calls with VCs that like aren't invested in you and like try and have a brainstorm session. I'm just like a dumb little baby. But I was like, I don't want to sell infrastructure. Is there like any other option? And it's like, no, not really. And it's hard. And like, the trick is that VCs are always attracted, I feel like to software companies, because of these like amazing margins that you can get. But now that we're on this like, developer experience layer on infrastructure on top of layer of infrastructure, like move, like how that turns into a super high margin business. I don't know, there's certainly some some creative work to do there. Probably along the lines of what Adam's talking about with like the productization, and that stuff does absolutely, definitely matter. I mean, we literally haven't really talked about like, as a like, as a community in venture, like the amount of time I spend just educating people on choices, just like, okay, here's this, here's a situation, you know, the situation is that your software is in the Apache Foundation, and you want to build a proprietary thing, what do you do? And how do you think about that? Or what should you what's the move? And like, why? Like, what are the comps? You know, what other companies can you see, like, those conversations don't happen that much, right? And, and mostly, you just follow the herd, which is totally what you're saying. It's like, well, right, the herd would launch on top of a cloud provider, you know, even you see people like, like, I don't know where railway is running right now. But I bet they're running a lot of that stuff. And it is right. And when you imagine a business like that running on AWS, you're like, that cannot last, right? There's no way that they can pay margin on top. There's no way that's going to work with that. I mean, the rental model of compute, you have to own your own. At some point, there were another way. Like this is the thing I always said about Cloudflare. Like the reason Cloudflare I think works so well is everyone's like Cloudflare is like, we're not a DNS company. I'm like, Nope, they're not. They're a hardware company. Like the reason Cloudflare can make a shit ton of money is because they own metal all over the world. Um, yeah. Like the more people who use it, the more money they make. Whereas for everybody else, the more you use it, the more your bills are. But this is the same. This is the same thing with open source monetization, right? It's the exact same problem today. Like I said the other day on Twitter, what I thought was a very unspicy take, which is like DHH, who's not like a great person or whatever, but he like posted how much money he's saving with his elastic search cluster. And I'm like, he's absolutely saving that much money. And the number of people who replied to me like, no, he's not. You don't know how to calculate total cost of ownership. And like, like just going around and around and around with me about how like you couldn't possibly run a search cluster as good as Amazon runs a bad search cluster for you. I'm like that you're insane. It's insane. We've just we've got amnesia. And well, and I mean, also like, can we all please tip the hat to capitalism's apex predator Jeff Bezos for 100%? Like give people this this kind of learned helplessness. Oh, what a move. Oh, what a move. Glorious thing. But like, it's what's happening in open source to when we talk about open source monetization, the same thing's happening. What do you do to opt to monetize an open source company? Poor Ashley, she's gonna go she's going to talk into venture capitalists out and know better. They're like, what other moves do I have? They're like, I don't know. There's the only moves we know only moves we see. So, you know, that's what they told me. They basically were like, and we're saying no. And I wasn't I was like, I wasn't even asking you for money. Oh, I do. Oh, isn't it great? I love it. People on you. You don't even ask. Even ask. Yeah. Baby communist Ashley here. So like, I want there to be a world. And maybe this is because I'm just like, I learned how to write software. And I think it's really cool to write software. And I'd love to like be able to pay for like my cost of living with it. Like, do we all just have to start buying up computers all over the world? Or like, what's what's our answer here? Like software like, and is software like not monetizable? Because open source like did we just price fix it to zero? Like, is this something that it's not just like something that happened? Or is it something that we made happen? We did it to ourselves. Well, we but it was gonna happen. I mean, it was inevitable. So I mean, I don't think it was inevitable. We can fucking undo it tomorrow. Did anyone when open source was like starting to happen? Like, go like, Hey, like, you're about to screw yourself. Was there any time? No, no. So what you had is you had this era of proprietary software companies, and their disposition towards open source varied. And you had people like Microsoft at kind of one extreme that spent a lot of time and spilled a lot of ink talking about how open source is going to be the end of days. And but the folks that were actively disrupting those folks rightfully said like, No, actually, you're sorry, you're delivering an inferior product to people at a price that's too high. And open source actually allows people to get out from underneath the natural monopolies you have in your customer. So it was because kind of demand side, where people that rightfully kind of generated all that energy, it is ironic to me, that you have these then people that are very much born in that open source era, that now then realize, like, wait a minute, like, what about me? What? How do I become a proprietary software company? We didn't like, when we back in that era, we didn't talk about the fact that like the monetization vector for our software, like was, was, like, we all got high on the principles. And so there was like, a group of people who were the lift of open source, and the lift of what it could do for other people is so powerful, that it makes up for bad for a bunch of inefficient bad models. And the that that lift is very unmeasurable, you can't really, you can't put it in a spreadsheet. And so like, I think when we say that open source sort of broke it, I think what happened is it did break it. And what what broke it was, we now know that this open source lift is real, when you build something valuable, and you let other people also create value in their lives with that thing in whatever way they need to, to make their lives better, they do it. And it becomes more, it becomes better than it was before it becomes stronger, it goes wider in the world, all those things happen. But we like, but as soon as we decided that what we were doing was disrupting incumbent players, we cut the price in half, right, like Chef and Puppet did this, we were such dummies. Like Blade Logic was selling at 10 times the price that Chef and Puppet were right. And, and because we were open core companies, we set the price for our products so low, because the alternative was ourselves at $0. And like, it was just, it was dumb. It was bad business. But it was also bad open source strategy, because none of those things are now sort of, I would, I would, I would argue that probably most people aren't happy with how those open source communities are being managed at this point, because they were bought and sold and sent to other people. And right, like, no shade on any of the acquirers. Anyway, it's just so I think, actually, to answer your question about like, how do we do it? What does it mean? So I do think and I made this point in my deck, and they, my my co founder, Steve Docker's here, a point that he we try to make to venture capitalists, but they don't like to listen, is that you are fixated on gross margin, when you should be thinking about net margin. And VCs don't want, they don't want to focus, no one wants to talk about net margin, like the people who want to talk about net margin are people that That's what my conversation with those investors was, was about net margin. And I got like, totally blazed over. And the reason is, like, look, VCs are building to flip. This is the, this is the challenge with this model is that you are ultimately building to flip, you are building the company to sell it. And you are either going to sell it to the public, if things go really well, or you're going to sell it to a private company, if things go well, or you're going to sell it to creditors, things don't go so well. So you but you are ultimately you are not actually and these VCs, you know, all the VCs that have, you know, the Apple placard up on the wall, or the Google placard up on the wall, they actually sold Apple when it was at one 1000th of 1% of its current value. And they had to because they had to actually, they've got a fund with a limited lifetime. And so what they are looking at, so they will, and I think this is where an Adam, you and I strongly agree that is the entrepreneurs ultimately blame all the entrepreneurs have to be responsibility, not the PCs. But then you need to be aware of what the the model is around a venture funded business. And a high growth, high margin, high gross margin business is catnip to the next person you need to sell it to. It is not sustainable. So VCs will have you build HashiCorp, and they will have you IPO it, and you will be now a $5 billion. Well, I guess Adam, I thought we'd be for sub four now. But yeah, or exactly. It's like the scene in airplane. It's like now arriving like going down 13 day 12. Yeah, so the they are at a valuation that that cannot hold in terms of what they're actually in terms of the actual business. If they had focused on net margin earlier, they would have built a smaller business that is sustainable. And I think that we do not focus you let VCs pump a ton of money. And then when they pump a ton of money into you, they want to see growth. I mean, there are new VC firms out there like that are focusing on this. But I also think and I do want to step back because I I don't want us to be bashing on VCs too much or even entrepreneurs. Because I think this ambition is part of open source and everyone who participates in it whether or not they have a company or not. And I like I don't think the ambition is terribly different. No, and I think I was like, I'm pro ambition regardless. Okay, so I'm gonna say all right, I will take the other side of that. I think when you got ambition, but without the kind of the the massive investment, then you then you're like Lua or curl. And great. Good for you. I mean, it's like you just end up being ubiquitous in the substrate as opposed to Brian, I actually don't know this about you, Brian. Have you ever had an open source project? And like, it was very, very popular, and no one would give you money to work on it? No. Because I mean, no, I don't think I don't know. It's not a trap. It's just like, I feel like there, there should be an empathy for that position somewhere in this conversation. And it feels a lot like the ambition of say, like an open source company that doesn't build like a slow, thoughtful business strategy ends up wildly successful with a massive customer base and absolutely no way to fund it. And that's a story that happens in open source all the time all the time. Yeah, like just multiple times. And here's the thing, they will bash you as the maintainer the same way we're bashing the VCs right now. And in a certain way, they're right. Because you're saying was the ambition. And I mean, my ass kicked by this so many times. Yeah, and I think there's a look, we should have I have empathy for everyone involved. Like what Brian was just saying about net margin, like, it's true, in that, like, like, ultimately, you need to become a profitable company, the mark that the actual marker of your of your profit is net profit. But like, the when you when you're playing the venture capital growth game, often, if you're, if you're running net profit, but the growth numbers aren't as high as they could be, that's an that that's a bad way to spend their money. And because you could be growing quicker. And, like, if you want to see what happens when VCs start to care about net profit, get to a place where the growth starts to slow, and your ARR number is creeping up toward $100 million. And next thing you know, every board meeting you're having is about net profit margin. So like, you know, For sure, but only because they want to flip again, like they're trying to flip ultimately, which is fine. I'm not I'm not faulting them for it. But it's like they've got to live with that. But also like as an entrepreneur, you'll want to too, because there's all these people who have stock and you're going to try to get them as much money as you can, right? Because they've put their lives behind this thing you're trying to build. So like, I, I just, like, I very much wind up on the entrepreneur end of that argument. I think venture capitalists are what they are. And we sort of you know, you know what they are, and you know what their business model is. And if you don't, you can find out and they're pretty, they're certainly bad actors who will who will not tell you the truth about what they're looking for. But most of them will, especially if you say like, I know what you are. And I think to Ashley's point about like, you know, if you have a big popular open source project, and that success runs away with you, like, it's difficult to figure out, after the fact, what the right thing to do is to sort of get yours. And you know what I mean? Like, like, if you're like, hey, I've built this massively popular open source project, everybody's using it. They hate me because I'm not like building it fast enough or whatever. I'm having trouble like making ends meet. And it's pretty difficult at that moment to decide like, oh, crap, like now what do I do? Like, how do I how do I get mine? Like, how do I support these people? And like, when when we don't, we wind up in this, like interesting burnout cycle. And when we talk about sort of the complexity of open source, and we talk about open source and capitalism, that angle, I think, is the is the is the one I have the most empathy for, because those people are putting in great work, incredible effort, often very load bearing effort. And we just cannot figure out how to get them paid at all. But really, I mean, okay, I think that we, we say that getting mine, I don't know exactly what that means. But in terms of I mean, if we are actually talking about like putting food on the table, and it'd be kind of interesting to know, it's like, so Postgres is an example where for many, many years, this isn't this isn't true. There was not a there was not a company that was built around Postgres. Ultimately, like Citus was built on Postgres. And but they had a bunch of stuff that that was not part of Postgres. And then ultimately, extended to Microsoft. But like, I mean, Tom Lane and and, and Josh Berkus and all those folks. I mean, like, I don't know, we were they, it maybe they were like struggling to eat. I don't know. I mean, it feels like they I don't think they were buying houses in the Bay Area. Sure. But I mean, I guess that that's kind of the question is, like, what is this? Who's I feel like? Yeah, yeah, definitely. Yeah, for sure. Yeah. I had to like, I had to like go through my my 2011 time machine. For sure. Sorry. Substack is the picture that xkcd that somebody posted here. And like, I mean, I know a lot of folks that have created an immense amount of value, and have not been able to recoup it. And I guess I kind of want to pop the stack a little bit only because like, we talked about open source businesses behavior. And like the goal of the LF and popularizing like open source was like to get companies to use it. I think a real question is, is just like, how do we get more open source companies to like, exist? Or is the idea that like, we don't want that to happen? Because like, I do think we're seeing like a consolidation and open source that is like amplifying the problem that we are talking about. Okay, hot take. I think it's fine. If you have them exist. I think it's actually okay. And I think it might even be good for ball. If you have them exist. And I think that if if Mongo had never been turned into a company, or Redis never been turned into a company, it would have been fine. And I think that that and I kind of look at evidence that it's like, it's not a there's not a company around Python. It's not a company around Pearl. It's not a company around Apache. So Brian, some of those anyways, it's like, like everyone likes to use red hat as their example of successful open source companies. But I remember feeling in the early 2000s, that red hat was almost conjured out of existence because it needed to exist. That is to say, there were all these financial services companies at the time who were deploying Linux, who wanted someone to yell at when it broke. And if it hadn't been, if it hadn't been okay, go for it. I think that that red hat needed spark to exist. And it fully did. Because that's why, yes, of course it did. I mean, like red hat, like, I mean, the greatest lie the devil ever told is that this, this machine, this Linux machine is outperforming the Solaris machine. But our actual sin here with red hat, Adam, is that is that when we talk about red hat as an open source success, we always talk about anything but their business model. We talk about the circuit, the market circumstances, we're always like, well, in these circumstances, they could pull it off. In these circumstances, it was okay. It was because they had IBM. It's because Solaris was overcharged. Sun was overcharging for spark. It's because this is because because this if spark and x86 flip rolls, x86 was just like, it was cheaper and faster and better. Yeah. And all that's real. And also, they also happened to figure out by accident, I think, but but they did figure out the most efficient way to monetize the lift that you get from building massive open source communities. They've done it over and over and over again. And whenever anybody says, well, why don't we do that? The answer is always well, you don't have the market circumstances to let you do it. Now you're just selling support. Now you're doing this. Now you're doing that. Part of why I don't talk about selling support is that like to Brian's point about VC is only loving that margin. Like they also hate it when you say you sell support. Yeah, right. Yeah, they don't like that. They don't like that. But if you say you're selling, you know, ARR for selling SaaS revenue, they love Oh, I like that. No, no, I like that. I like I like the cut of your chip. I like I like the I like that reoccurring SaaS revenue. And so the when we talk about Red Hat, or we talk about those things, I think you have to separate out the dynamics that meant that the software that they produced or the products that they built were competitive in their in their market, which absolutely is true and happened from the business dynamics that allowed them to monetize it at a degree of efficiency. And Red Hat, runaway, it's not just Red Hat, like Red Hat, Sousa. Sousa has been public twice now sold like five times or something over, over and over again. Like, those companies are really efficient in monetizing in a way that like nobody else is. And like Larry Wall, like there was no company around Pearl, but also like, who thinks Larry Wall got enough money for in relative terms to the impact he had on the industry? Because I think Larry Wall probably got the I'd like I'm sure he's a happy person or whatever. I'm actually terrified to meet Larry Wall. So Adam has got Larry ideas. Now when we do our Larry Wall stories, Adam, maybe I need a beer in hand for my Larry Wall meeting story. Suffice to say I had the wrong heroes when I was a high schooler. I'm just I'm so scared of meeting Larry Wall. I can't do it. Justifiably. Let me just be really clear. Adam says honor your fears. Yeah, I don't think Larry Wall, but I don't think Larry Wall probably got enough. Such an interesting concept of like getting yours or getting enough just because you've created value for other people. Like, what entitlement do we have to the value that we've created? You talk about Larry Wall, it's like he's done. He's done great things. And certainly high school, Adam Leventhal, believe that he did great things. But I'm not sure that he like that. I don't know that we owe him anything in particular. And I think that the typical path to monetization for folks like that, or the traditional one is to be hired by Google. And I don't know then what you have to do there. But maybe that's dried up. I mean, I think about I think about like Mark Burgess, Mark Burgess, in configuration management, infrastructures, code automation in general, no one's done more to move that, that, that art forward than Mark. And, like, and, and I'm not saying that he deserves something. Because he doesn't, he made his choices. He knew what he was doing. I'm an American or whatever, you know. But like, but, but at the same time, like, I don't think we've figured out how to how to help folks under who do make who haven't who have put incredible value into the world. They have made it possible for lots of people, lots of companies to be successful and to thrive, and how to make sure that those people are taken care of for their work. And it's not because we owe it to them to be taken care of, but my career wouldn't exist at all without Larry Wald, right? It just wouldn't. If Larry Wald hadn't written Pearl, I don't think I'd have a career. And same with Mark Burgess. If he hadn't written that configuration, those early computer immunology papers, I don't know what my career would have been. It would have been very different at the very least. And I think there's something inside the conversation around open source and capitalism, where because what we're doing is creating software that is limitless, as long as you have the compute to run it, it can go into the world, anyone can take it, you can do what you want with it, you can read it and understand it. It's such a powerful force. And yet, if you build something that's truly fantastic, and you're not very careful about how you want to monetize that, or if you want to, then it can easily run away with you. And suddenly lots of other people have changed their lives materially, and your life is roughly where it was. And that, you know, whether it's right or wrong, it doesn't always feel particularly fair. Yeah. So one of the ways I like to talk about this, especially when I find myself in what I would call mixed company, because again, baby communists actually got very sad about open source, but remained mostly communist, is like, you have to think about an economy like as a technology. And if we were like, think about the free market, the way the people who love the free market think about the free market. They believe that the free market economy is a very efficient technology at distributing resources to the people who can create the most impact with them. And so if that's true, then we have a big problem on our hands with this, like this entire conversation would kind of suggest that the economy is broken, if that is what it is supposed to be doing. And so I loved that we taught, like we're talking about greediness, and then even this kind of like offhanded, like language of like, get yours, get mine. But like, I do think it is valuable to try and think about like, what is this work worth? And certainly, there seems to be some amount of worth to it because people will spend an immense, immense amount of time on it. Like, there's a value here. And there's a value that is incredibly difficult to capture. Which I think is complicated. And probably like, if I if I was smart enough, or like had enough capital, like that, that's the problem that I think I'd like to see solved. I wish I don't know, I could go back to school and do like a PhD in economics on this like, exactly. I really want to do it really badly. This is a call to anybody who would like to fund my PhD. I mean, I think, I think open source, as it was in as as invented, and then as it has played out since it was invented, is essentially utilitarian at its core. And I think it has all of the utilitarian failings that happened there, like that can what is the conception of the good, right? Like, what exactly is it that we mean? What is it we're maximizing when we talk about the utility of something? And why? And then like, what happens when you know, the utility monster comes? And it just like, it gets more good from the same unit of utility than everybody else does. And therefore it deserves all of the yummies, you know? And like, like, we see all of those same philosophical problems inside open source communities and inside open source businesses. And I think, and I think thinking I do believe that there's there's something there in the responses in like political philosophy to utilitarianism, that that that perhaps points a finger at how we can think about changing the way open source functions. But you have to start talking again about the conception of the good. Like, I say get mine a lot in this conversation. And that I was I was doing it to be pointed, right? Like I wasn't wasn't an accident. I was saying it that way. Because I was I was I was poking at it. Because I did not mean to say it was an accident, by the way. So sorry, if it came off. That's okay. I just want to make sure people knew I was doing it on purpose. Like, it was an ironic get mine, please. Yeah, talk about an ironic metaphorical get mine. And, and that and but the reason is that like, the when you think about like, when we think about open source and the utility of it, like, I think we do actually need to have a conversation that says, what is what are the what are the goods that come out? The not not goods like stuff, goods, like in your heart, things that are valuable to you, us as people that we receive, through participation in open source communities, it's it's wider than money. One of them happens to be money, like a reason people participate, or that we build these things is for money. And, but we don't spend a lot of time talking about what those goods are, or what the social contract is between us. And even Brian and his talk talked about how the social contract is sort of embedded in open source. But that social contract is a very utilitarian social contract. And, and it's problematic. And, and it leads, I think, to a lot of the underlying problems that we've been talking about for the last hour, like, there, there's, there's, there's just a lot of how humans interact with each other and how we behave. And what is it we agree on and don't that, like, that we're playing out that we kind of already know, leads to shitty outcomes? Well, and I think there's certain degrees where you get to kind of like the the increasing divisiveness, societal divisiveness. And I think that the and maybe this is just maybe I'm actually like full adult communist Brian. But I think that if you are seeking to capture all the value you create, you're going to live a life of resentment. And especially in open source, you are going to create more value than you capture. And so you need to figure out a way and I think that you can't get bent out of shape about that. And I think that that's a you're just going to make yourself miserable if you get excited. I mean, you know, I don't want to poke at this, because I think you have to get bent out of shape of it. And this is why and this is coming from my history of assuming that open source was like creating software that literally anyone should be able to contribute to. So when I showed up very classically, it was like, why, why is everyone here white, and a dude. And what I didn't know at the time, but is probably just very functionally true, also like kind of rich, like in the scheme of things like globally, like if we want open source, to look more diverse, then we need to be able to guarantee that the value capture is like, at least some. And like, we can't do that. And like, I so I think like, it is okay, and actually kind of good to get bent out of shape about it, because most people can't afford to just like, give away a bunch of shit for free. Yes. And the when we talk about the distribution of the goods, we talk about like, whatever it is that people get out of open source, that's valuable to them. We don't set up social contracts that actually talk about the fact that it is not it is we are not all equal in our position relative to that distribution. And like, and because of that, there are circumstances we don't want to find ourselves in. For example, Kelsey Hightower does not want to find himself rug pulled after having spent 10 years being an incredible vocal advocate for HashiCorp. Right? He wouldn't have done that for Microsoft for free, right? But he did it for HashiCorp for free, because it was open source, and he thought he was doing the right thing. And suddenly he was on the wrong side of the line. And like, I think that conversation and that idea that there's a social contract embedded in what we do, like, I, we have to talk more about it, if we want to solve the more fundamental problem, we can talk about how to solve it in business, it's kind of more clear, because the puts and takes are more obvious. But like, but ultimately, it is about saying, like, who gets to participate? What are we willing? What are we willing to accept if we don't know, like, what our position is going to be in relative terms? And, and what aren't we? And I think that that conversation is one that I don't really see happening in open source. Yeah, I totally agree with you, Adam. And I think that when we, because on the flip side of it, when you've got this kind of this avarice in companies, and not because I think to clarify what I'd said earlier about, I think it's when you get hung up on, on capturing all of the value that you create, that's problematic. And because in then, I mean, rightfully, someone in the chat is like, all right, so when do I get my free oxide rack, Mr. It's like, no, no, no, no, no, no, no, no, I can do that. The beauty of open source, the beauty of software is that the cost of goods sold are zero, the cost of goods sold of our rack is not zero, the cost of goods sold that because it's a physical thing, it has to live in the real world. Software lives in this unbelievable world that is the confluence of information and machine, it is truly unique. And it gives us this extraordinary capability to create this massive amount of value, with effectively no cost of goods sold. And, and as a result, you are not going to capture all of it. And so the question but but then I think the flip side is when you have this kind of when people view that as like, oh, great. So these morons are going to create value. And I am therefore going to come in and capture all of it. And I'm now going to add them to your point, I'm now going to rip up the other end of the social contract, and I will actually, I, the the Dave McJanet, I will capture their value. Or, or the CNCF. I had this conversation with like, the like, look at the service mess space. Like linkerd. It's a crime that linkerd is not a huge company. That was such a great, it's such a great piece of software. It's so good. And it's in the CNCF and everything. And you know who the winner is? Istio. Right. And like, not because it's better, right? Like, yeah, I've got some. Yeah. Okay. Okay. I've lived that life. I mean, yeah, I get it. And, and about eBPF. Exactly. And so like, what's happening in those spaces, like, when we're, when we're talking about it, like, it's not that there'd be some better way to pick a winner or whatever. But it's just, I don't know that, that when the when the folks at linkerd were deciding what to do, and how to orient their business, I'm not sure that they made the right decision by putting that software into that foundation that way. Right? I'm not sure that that that meant that the work that they put in to build that piece of software to make sure other people could run it for $0 to move forward the service mess space. Like, I'm not, I'm not sure that the rules of the game that they set up, were the right rules for them. Right? Maybe they think they are. But, um, but I bet they have regrets. I don't know that they have regrets, but I'd have regrets if I were them. And like, yeah, I have regrets that you don't have regrets. I think you should have regrets. Oh, I've got so many regrets. What are they doing? What do you know what will it be? I mean, it's like, Oh, yeah, we created this thing. And like, actually a bunch of people use it. Um, that the, there's a false dichotomy between kind of winners and losers in software, because when you do, when you create these things, they, they do survive effectively in perpetuity. Um, folks are asking me in the chat, like, wait a minute, the cost of goods sold is not zero. It costs a whole bunch of like energy to create it. It's like, yes, the cost of goods sold is actually zero. So it doesn't cost the actual, like once you have written it, the cost is zero. And, um, this is very unlike anything else we've, I mean, it's more like a movie or a song. It has this, it recorded and things have this kind of this, the same attribute. So Adam, what advice would you, I mean, let's get to some of the advice that you would dispense if you've got, so, you know, either go back in time to whether it's link or D, I mean, what advice would you give link or D? Um, not, not to go to a foundation, perhaps what should. I'll give it to chef because it's easier because I lived it and I, and I, and there's like, and there's like, I think I can see icons in the chat that like, I know. So like, I have regrets about the way we ran. I wish I had known the things I know now when I was running that business then. Um, the regrets I have around it are primarily around the return. Like, I think we did a good job of maximizing as much of that return as I could to the people who had put their lives and energy into building it and trying to find a good space for that software so that the community that had been built around it could have a shot at sort of continuing to thrive. I don't know that all those things worked out for the best in the end, but I think the number one thing is that if you want to ensure that your open source community can reach as many people as possible and have the biggest impact possible on their lives, the best way to do that is to be as successful a business as you can possibly be. Because the, what, what makes it possible for you to do all of those things that enable those good things for people is because you're continuing to generate value and, and continuing to be able to fund that value sort of across the horn. If you built a great open source community that was funded on venture capital dollars, that eventually falls apart because to your point about net margin, it can't sustain itself. Like, I don't know that that was, I mean, it's great that the software exists, but it will be fundamentally different. You know, RethinkDB is not what it was, you know? And, and I think, and, and, and I think there's a, so that's one thing. The other is that you have to think about your business model as a business model separate from the open source dynamics. So there are dynamics that happen in open source that are a combination of the license, there are copyright holders, there's patents, there's trademark law. The over, the overlap of all of those things are what create your ability to use open source to impact your business. I think the, and so the situation is different, right? The, the folks who took, who built Temporal, like, had to fork it from Cadence. Cadence was a thing that, that they wrote while they were at Uber. They left, it was open source. They took it, they forked it, made Cadence. Now the Cadence is what, or Temporal is what the company is, and Cadence is the software they forked it from. And they need to do that because they needed to own the trademarks for the software that the company they were going to build, right? And then they had to figure out how to collaborate or not with, you know, the original upstream or, or those pieces. So like each, each company has their own sort of complicated thing. To me, I really believed that the, that there was a, that the right thing to do was to try to mitigate the tension between the community's needs and what the open source community wanted and believed, and what they saw as good both for themselves and for each other, and what the company needed, and that you were trying to straddle some kind of balance between them. And I think that, that was a, that's a fundamental mistake. Like, in truth, they have to be the same thing. Like, if those dynamics are not identical, if what's good for the community is not what's good for the driving monetary force behind the software or the product, then eventually, that company is going to do something bad to that community, right? They're just gonna, because, because the, because that there isn't a social contract that's been written down, there aren't really consequences in the way that you imagine there could be because you hurt someone's feelings, who has less power than you do. And I think we have to be intentional about how we create those dynamics. Especially if you're a person like me, or like Ashley, or like you, Brian or Adam, who like is actually emotionally sensitive to, to wanting to actually have the good valuable part of open source exist in the world. Does that make sense? Yeah, very much so. And we just don't do it. Like, we don't talk about that when we talk to entrepreneurs about the open source stuff that they build. We don't say like, hey, how do you keep this in line? Like, like system initiative is Apache licensed, because I know that there's people who would consider building on top of system initiative, but wouldn't if I use the GPL. And at the same time, I'm pretty sure it should be GPL because then I couldn't rug pull you if I wanted to. Hmm. Interesting. And Adam, who is the the model of a company in this regard? If someone's like, all right, I'm a startup, I want a company I can look up to. Who's doing it right? You have Red Hat only. If you're talking about this from a not from a always as the best open source actor, but if you're looking at efficient monetization of open source software, it's Red Hat by an incredible margin, and everybody else is an also ran. Okay, and then so I say, I think Red Hat was kind of lucky. And I think that they ended up with this kind of critical mass because of this kind of historical. That's what everybody will always say. And then you'll go off and build an open core business. And when that core when that business goes public, and we look at your books, you're going to be just a twinkle in God's eye of the efficiency of Red Hat. And you'll explain it away by situation and circumstances. But I don't think it is I think it's really straightforward. I think they like there's a reason that they sell products at a higher price point and more of it than their competitors do. Because if the alternative was true, why doesn't a boot to win? But who's everywhere? Yeah. So, yeah, it was not that long ago. I guess I, I want to have optimism. But I think I'm I'm tend to be a little bit more on on Brian's team here. But instead of thinking like, oh, I'll make an open core business and just, you know, it'll suck or whatever. Like, just it is is there a business model that includes open source in some capacity that works? Like, because there hasn't been another Red Hat yet. There have been. Sousa, like I said earlier, follows Red Hat's model. And Chef is now no longer is now no longer a standalone company. But we follow that model. And when we did, our revenue went up relatively significantly. I think the and and, and it's kind of like asking, you know, like oxide builds computers. Why hasn't there been a great computer company in a long time? Right. And, like, as evidence of why it is that there shouldn't be a great computer company, kind of the same. Like, the truth is, it's because open source is really complicated. That's for the dynamics of how open source overlaps with how we build product is complicated. Most of the people we talked to don't understand the delta. Like, like, it took me many, many years of study and time to understand the distinction between the software license and a distribution license. And that those two things don't have to be the same. I didn't know that that was like, that took a long time to figure out. And like, and, and that's like one of dozens of things you need to know, in order to think more clearly about how you stack up all the different tools in the tool belt to change the way the model works. So like, and, and at the same time, everybody's just telling you, well, look, just because it's inefficient doesn't mean I don't get to be HashiCorp or MongoDB, right? Like MongoDB, Elastic, these are public companies, everybody made, they're all billionaires, right? You hear Mitchell Hashimoto giving a talk about how they built an incredible company and went public and he's flying an airplane and riding a terminal emulator. And he's like, yeah, open core bitches. And then, you know, here we are oxide and friends. And I'm like, well, my, my little open source company only got to 89, 80 million in ARR. And then I had to sell it to progress. You know, you're like, don't listen to that guy. Fucking Mitchell Hashimoto's got a plane. You know, it's a really nice plane. I bet it is. I've been on this plane. No, I've just seen the pictures. He tweets out. The pictures are beautiful. I like Mitchell. Mitchell, I'm sure is having a great life. But like, but I mean, the, like, there's a lot of evidence, like, that open source is so powerful that it makes up for this terrible inefficiency. And so, yeah, I'm actually quite optimistic that we're going to figure it out. I just, it's just a question of how much longer are we going to stay in the dark? Okay, so I would like to also point out that there's another route that I would call the cowards route, because it is my route, which is to actually sell a product, build a product that is not the software product, in which the software is very important, but it's also ancillary. And that's what we've Yeah, sure. Which, look, I'm, I'm all in, right. But any, I would like to, there are other like, really important, there have been important open source contributions from I mean, we talked about Uber earlier, right, from Uber, from Lyft, from LinkedIn, from Amazon, from Google, from these companies that have actually an unrelated business. And that business is a it can support the development of open source software, and that they contribute that back to the commons. So I think like that is a model. And it's, I know that it's not always what people want to hear. But we have been kind of implicitly or explicitly talking about really pure software companies. I'd also like to point out not to be too morbid, but software companies just tend to consolidate no matter what. I mean, there was a huge I mean, before the.com boom, there was a there was a tremendous boom in software companies in Silicon Valley in the 80s, more or less all of what all of which consolidated into basically Oracle, Microsoft, IBM. And also, it's been kind of interesting that you've been using, we've been talking about Red Hat as if it's an independent company, which is kind of interesting. I mean, I guess that they've, they succeeded in tricking us. And I mean, when you've been saying Red Hat, you actually mean IBM. Well, now I now I mean IBM, but I would argue that, like part of the part of the danger of Red Hat being acquired by IBM, is that even when you talk to people at Red Hat, and I've tried because I feel like I had this revelation about what their actual business model was and how it functioned. And then I went like, deeply in search of people who got it, right. I was like, Oh my God, is that how this works? And then I was like, I couldn't shut up about it. And I like used every trick I had to gain access to people to be like, well, you talked to me about this. And like, I went and found open source lawyers, and I talked to the like, there is a cadre of people who really understand that this what I'm saying to you is really true. And they don't talk about it because for them, it was a competitive hedge. Like it was a competitive weapon they had that they knew how to do this and other people didn't. And, and they built a company around it that that is successful. And but also like over time, of course, the knowledge of where that comes from erodes. So like, you know, companies, companies behave like their founders for a really long time, even when their founders are gone, you know, yes, because it's just sort of infuse the place, you know, I mean, it's amazing that we are now way more than a decade past the life of Steve jobs. And Apple still I mean, it still has all many trademarks of jobs. They'll have it for 100 years, right? That wall, if you go to Walmart headquarters, it's covered in Sam Walton, you know, like, it's just he'll be there forever. But like, red hats the same, right? Like, there's this storyline of who they are. So like, one of the big risks was that IBM doesn't actually understand what those dynamics were and are right. And in fact, like, probably has a counter view of what those dynamics were and how to monetize them best and was and dramatically less efficient and bad at it. Right. So like, there's a real risk that red hat itself actually stops being great at what made red hats business models so efficient. I have none. So I want to just Well, I was gonna say, there's something that you said that I want to pull on. And I don't know if it'll end up making the conversation because I'm sure we're kind of wrapping up. But like, I don't want to make it end on a negative note necessarily. But you just kind of reiterated this about like software companies inevitably consolidate. Um, I think, and maybe this is just totally off base that one of the great things about open source is that it is kind of like a, a check on that consolidation, because there's always people spinning up all these weird little projects. Yep. Um, one of the trends I see in open source more and more, especially if you're looking at like university folks, and folks who like want to participate in open source, like they're not going the independent route, like they're going the go get the like 200 k junior developers salary at like Microsoft and like work on open source via these large organizations. And if you look at the people contributing to the popular open source projects these days, like the percentage of contributors coming from massive companies has never been higher, like literally has never been higher. I you had shared that you think maybe it's good if there's less open source companies. And I think I disagree. One, because it's self serving. And that's obvious. But to, um, I don't think obviously, I mean, you said it, you said you thought it would be good. And I was like, Whoa, I think that that has some really long term system effects that I don't like. I agree. I think those are really bad system effects. And that's why I care so much about this open source company problem. Because I want software not to consolidate. And I want there to be expanding opportunities for people who can't get those 200 k Microsoft jobs. And if we want that future, then we like really need to solve the like, why is the open source business problem? Like we need to solve that and like tell everybody. Otherwise, like with the future's bad. Fuck, yeah, I'm 100% on team Ashley, like, and because I think I think that's the crux of it. Like the actual the actual thing about open source and capitalism here is that like, the open source part, we keep talking Brian's point that software is the unique is really, really real. And that unique nature of the software means that there's a unique societal thing that's happened through open source and free software that we've only begun to understand. Yes. And, and if and if, and if we figure out what it what that uniqueness is, like, what is it about that that allows us to empower other people to change their lives? Like, at chef's peak, I had people coming up to me in the street, like thanking me for writing chef and for the change that it had on their lives. Most of them weren't chef customers. They were just people who use chef, right? They, they, like, you know, fed their family, because they got a job as a, you know, they, they got more, they got paid more, like, whatever it was, like that, there were real people that like, that, that, because it was open source, it changed the arc of who they were. And that's certainly what's happened in my life. And, like, I think we have to figure out how to align those things together into a theory of what it means to to create open source in a way that at its core, cherishes that, that unique aspect of it. And that if we don't do that, then we're just going to be stuck in this cycle of people like being, you know, Dave McJanets, right? Yeah. Okay. So it's not clear if I'm allowed to be on Team Ashley, because I feel like Team Ashley was to like, so I can't be picked on Team Ashley, but I would like to also join Team Ashley. That stuck with me, and I got worried about it. Right. So I just to be clear, I, I think that the, I think, Adam, what you said is really important. I think I would also add to that, it's important to find a way to do it to build truly sustainable businesses. And that that the those businesses may be smaller, but they may be more enduring. And I don't think it has anything to do with their size. But I think it does it in terms of headcount. I think it definitely does. I mean, sure. I mean, it's like Docker could not support the headcount that it had. It just couldn't. I mean, we should talk about it. This is this is just a series now. Well, fortunately, actually, we've recorded that we you know, we've been shooting our mouths off for so long. We actually already have one where we've shot our mouths off about on Docker. Yeah. Yeah. Um, the but I think that you that you need to I do think you need to kind of figure out how to be how to be sustainable. And the which is not to say I mean, I don't think and I Adam, you know, you raised a very good point about the it is a responsibility to find a way to be profitable because otherwise you can't do all the other things we want to do in the world. And that actually, that's I don't know if you know this, but that is very much rhetoric from HP from the kind of height of HP, good HP. HP had the same idea. HP was a at the time, a very good capital G company, but felt that like if we are first responsibility has to be for the profitability of the business, because otherwise we perish, we can't do all these things. narrator's voice that perished anyway, but the I feel like this has come up a lot. And maybe again, this is self serving. I have no idea. But I think that there is a response of like, okay, yeah, everyone's gonna talk about communism again in the chat, but whatever. I think there's a responsibility as like, leaders and stewards in open, like just saying, like, well, if you want to have a business, you better figure out how to make it sustainable. Like, sure. I just I don't think that's interesting advice. It's a much more interesting, like thing to do that could be like a much higher impact like area to work in, which is like, as stewards and leaders of this community, like we all care about open source so much. And we already said part of the way in this conversation that like, early decisions of people doing open source in general kind of led to some of these side effects. Like, I feel like this is something that OSI should be looking at. I don't know, like, I feel like there's an opportunity. Yeah. groups, like just saying, like, Oh, little business person, like, you really want to make money with your own sort of you. Good. I think you're right. And I always I will be particularly hard to do that because they are right. No, I know. I think you're it should be they and they need to expand. I just want to you mentioned Docker. So I just want to toss out Docker's current business model is like 95% aligned to red hats. For sure. After they've recapped the company. And yeah, but guess what? Once they decided to charge people money, everybody got real mad about it. Now they're like, anecdotally, we don't have any evidence. But let's just say between friends, the rumor mill says that company popped more than 100 million bucks in ARR. And that's also very hard to do. And it happened because suddenly, if you want Docker brand Docker, you got to fork over your five bucks a month. Yeah. And it turns out enough people did and now they're making a bunch of money. So you know, I'm stoked for them. It's like one of the great open source business turnarounds of all time. And like, like, but we're not talking about it like that. Mostly we talk about it where we're like, there used to be a free Docker. And now it's not, you know, like, no, the company was recapped. I mean, a bunch of people lost a ton of money. A lot of investors lost a ton of money. Yeah, we don't care. Only one about how investors did. Sure. About how venture capital did. Sure. But there's a reason that people are going to be like, I mean, it's great that the that that Docker and maybe you could argue that like, the Docker now is the model that you're talking about, but they need in but with with much less headcount with much with a focus on that sustainability. I also like the analogy in the chat that it's like this sounds like Theodore Roosevelt era, conservation, and like we need like a national park system. We do. I actually actually really like the idea of like the excited I think as we look forward, I think foundations played an important role in the last 10 years, I think they're going to play an even more important role in the next 10. I think I think it depends. I want foundations to like, I guess this is I don't know, this is something I've been chasing for so long. But like, I really want foundations to be these things that they just like, aren't for a lot of reasons. And like, the first one would be the idea of taking business advice from almost any of them. Because they are not run terribly well. And I mean, there's a joke about nonprofits there. But the LF, on the other hand, seems to be a very interesting and very successful business. They're 990 is money. I would love their money. But I mean, maybe with this angle, we could, we would see a new generation of foundations that have higher operational skills. I don't know, is that too dark on foundations? Am I the only one? I don't think it's too dark. Yeah, I think I think we're liable to wind up with foundations as a dominant force. And that would be a shame. If we don't figure out how to help people be able to build efficient businesses, the way Brian describes, or in whatever other way they want to build them. If the only way to get spread and, and to get to get paid and all of those things is to go through a foundation. I think I don't think that's net good for open source in general. Because there's, there's a there's a lot of potential goods there that that sort of get left by the by the roadside. And I think, I don't know, maybe what's gonna happen is that like Ashley and Brian and me and whoever else wants to join the like little cabal should just become the like open source business model cabal. I told you I've taken the cowards way I started a computer company so I can have this like unequivocal open source model that I don't have to worry about, you know, changing licenses. Look, man, I tried to take the cowards way and just build a proprietary SaaS company. And then I was like, this thing really should be open source. You know, you buckled. I fortunately it's like, it's really hard to actually like give away hardware. So I was overwhelmed by my principles. Exactly. Um, well, this has been this has been great. I think I will let the p 99 folks know that actually you only needed to let us run for another hour and 37 minutes. So I like I'm not sure why you got the hook prematurely. And I feel like we could go like actually quite a bit longer. Well, I mean, I think Adam is basically suggesting that we create some sort of informal, almost maybe even becomes formal group and just like, be be the people that we want to exist to help with this problem. I mean, I have to be careful. I'm very susceptible to that type of call. I mean, look, I can say this for sure. Like after we got off that call, I think I don't remember exactly what the order of operations was. But like, Ashley pinged me on discord. And we were like, that was so fun. We should talk some more. And I think Brian was immediately like, that was so fun. We should talk some more. And, and then we went straight to like, open source is utilitarian. And that's where all the problems come from. And we're like, yes. And we got like, very nerdy about sort of talked about the Protestant ethic yet. Anyways, we didn't talk about the Protestant work ethic. There's a whole there's a lot of Yeah, I did. So are certain open source projects pre ordained into heaven based on their GitHub stars? Is this the neo Calvinism for open source? Yeah. All right. And like, I think that is a hot take. Yeah, but I think there really is a very legitimate kind of work that needs to get done. And I don't know how or where it happens. That is actually like, a true an actual study of what these dynamics are, because it's all anecdotal. And if you want to avoid hashy corpse in the world, you have to turn that anecdotal thing into something that you can at least hang an intellectual hat on. And right now you really can't like it's just vibes versus, you know, spreadsheets. It's just vibes. Yes. Yeah. It's just vibes. Sounds like, well, it's been great. Thank you both. Thank you, all three of you for I like the the you know, I feel Adam Leventhal with two Adams here. I am kind of channeling my inner john mclaughlin. You're watching the clock and group. No. Issue number four. Open Source Foundations. Adam Leventhal. No, this is not a big one. Mike Myers did his first nation on Saturday Night Live. It was just like deafening silence because no idea. No one had any idea who's on. Whatever. In this episode, there's been a lot of voices. It's been very theatrical. I love your mclaughlin group voice and I know exactly what you're doing. That was amazing. Thank you. You're welcome. Someone else was was drifting through PBS at the wrong hours the night in 1985. Um, but this has been great. And I it's been really I thank you all for coming back and picking this up. Thank you for those of you in the chat. I know we had a lot of good stimulation from the chat. People are already asking for a part two. I don't know how many hours we have to go on before people like never talk about this again. On the hours that go on before we're just the cabal. We already talked about open source funding. I mean, this panel alone has shown up for several conversations already over this past year. So well, um, all right, well, then we're just gonna Adam, sorry, we're just not gonna end it. We're just gonna get this out. We're gonna keep the episode open. We're just gonna keep running for our stream, baby. 24 hours. Sorry, all I'm gonna go get a catheter here. All right. All right. I knew I knew I could get there. Yeah, that's what it took. Um, I would, again, thank you all. We will we're gonna have to do it again at some point. Hopefully no more rug pulls to come. But there's a lot of sage sage wisdom. I do love Ashley. I love baby communists, actually. And I think I want to get the plush doll that so you have to let me know when that's available. I won't want to. All right. Thank you all. And thanks, everybody. We'll see you next time. "
  },
  "4d3fd779-d6df-4d11-b5a2-bd1858f4259f": {
   "Title": "Hiring Processes with Gergely Orosz",
   "Description": "\u003cp\u003eBryan and Adam were joined by Gergely Orosz, the Pragmatic Engineer, to talk about Oxide's hiring process, the experiences that led to that process, and hiring generally. There's a lot there for anyone interested in hiring or being hired... and especially for anyone who's considered applying to Oxide!\u003c/p\u003e\u003cp\u003eIn addition to \u003ca href=\"https://mastodon.social/@bcantrill\"\u003eBryan Cantrill\u003c/a\u003e and \u003ca href=\"https://mastodon.social/@ahl\"\u003eAdam Leventhal\u003c/a\u003e, we were joined by special guest \u003ca href=\"https://mastodon.online/@gergelyorosz\"\u003eGergely Orosz\u003c/a\u003e.\u003cbr\u003eThe \"Litter Box\" is what we call the recording studio... thus named for reasons best left to the imagination\u003c/p\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://rfd.shared.oxide.computer/rfd/0003\"\u003eOxide Hiring Process\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.pragmaticengineer.com/\"\u003eThe Pragmatic Engineer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://share.transistor.fm/s/c443798f\"\u003eOxide and Friends: Tech Layoffs\u003c/a\u003e (Nov. 8, 2022)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://rfd.shared.oxide.computer/rfd/0001\"\u003eThe Oxide RFD process\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/The_Psychopath_Test\"\u003eThe Psychopath Test\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://oxide.computer/principles\"\u003eOxide Principles and Values\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/TheAHL/status/1720795699757928689\"\u003eAdam's \u003cem\u003edetente\u003c/em\u003e with the American Hockey League\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLeventhal's conundrum - there is a performance pathology, find the butterfly that caused the hurricane.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://oxide.computer/blog/compensation-as-a-reflection-of-values\"\u003eCompensation as a Reflection of Values\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Lights-Out-Delusion-General-Electric/dp/0358250412\"\u003eLight's Out: Pride, Delusion, and the Fall of GE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGergely's new book \u003ca href=\"https://www.amazon.com/Software-Engineers-Guidebook-Navigating-positions/dp/908338182X\"\u003eThe Software Engineer's Guidebook\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\u003cp\u003eIf we got something wrong or missed something, please file a PR! Our next show will likely be on Monday at 5p Pacific Time on our Discord server; stay tuned to our Mastodon feeds for details, or \u003ca href=\"https://sesh.fyi/api/calendar/v2/iMdFbuFRupMwuTiwvXswNU.ics\"\u003esubscribe to this calendar\u003c/a\u003e. We'd love to have you join us, as we always love to hear from new speakers!\u003c/p\u003e",
   "Link": "https://share.transistor.fm/s/ac83d63e",
   "Filename": "4d3fd779-d6df-4d11-b5a2-bd1858f4259f.mp3",
   "GUID": "4d3fd779-d6df-4d11-b5a2-bd1858f4259f",
   "Published": "Mon, 06 Nov 2023 17:00:00 -0800",
   "Transcript": "Brian Adam, how are you? I'm doing very well. How are you? I think this is it This is a very exciting oxide and friends moment. Okay Because we've got a guest in the litter box Yeah, I'm here. Oh my goodness Gergely is in the litter box Holy smokes, okay. Welcome So Gergely Oros Great to have you with us. It's great to be here I just had an office tour and we you know checked out the I checked out the state-of-the-art Dell machines that exist today They're making it's just really strong and I saw of course the device that you guys are building and got the story It's it's really fascinating. I'm more of a software guy, but it really captured my imagination I'm actually just really like I I feel like really excited just being here. There's so much energy and yeah, it's I Now get what the buzz is about I was excited before when I went over the blog post but seeing it is just very different It is fun to see it and they like to hear it, right? Do you got to have the actually can I hear the difference? And no, it's um, it's a lot of fun And it's been great great having you here. Yeah, so we Adam we've got our Ian and RFK and Alan have been in here. So we've been Awesome Walking him through the the saga of of building this thing. So it's been it's been a lot of fun. I So in terms, I mean, obviously you're gay. It's just great to have you here in general I've been I think I can speak on behalf both Adam and me that we are a longtime fans Especially during the layoffs. You seemed to be very dialed in I mean, it seemed like you had announcements before a company I mean you clearly had people inside of these companies letting you know what was coming yeah, I I was doing that and it was interesting because like I started to cover layoffs because I Like I don't think I don't think of myself as a journalist and and for a little bit Maybe I was more of a journalist But people don't think of me as a journalist either So software engineers would message me when something was happening and what started to happen was these layoffs and I was like Oh, is there a trend happening here? And you know I started to share this and I started getting more these news and at some point actually the mainstream press noticed that they were asking I can imagine asking me to go on interviews on how I've been doing it because they saw me as Like a reporter out of nowhere But but then what started to happen is I just kind of got uneasy about this. Yeah interesting Yeah, yeah, because it felt you know, I was at layoffs and at uber when layoffs happened Like yeah, I was a manager actually and I kind of was told my position is safe I got a wing but but it still took a really big toll on me Like I the only time I cried in my professional career was one at my company My team people were laid off and if I never thought I would ever do that but yeah, you know there there's stuff where you read about it and and when you experience it and and there was a moment when I actually just like got this like scoop about meta doing a layoff Confirmed like a few days before anyone a director rendering told me that it's gonna happen and I tweeted that out I'm like, you know scoop and and someone like a tiny tiny Twitter account with like 20 followers said like I'm so mad at you Like my wife works there We cannot sleep because of this like interesting and I just felt back to that moment when I was at uber and how Mad I was at the journalist that they were leaking it and not getting it from leadership and I kind of like asked myself You know, what am I doing? Like this is not what I want to do and I thought I just stopped Like sharing the details because I figured I'm not helping anyone really the news will get out eventually There's people who whose job is this and they're actually very good at getting it You know, like if I don't share they're gonna share it a few hours later But you know that that's where a lot of I realized this is not what I I wanted It was initially was interesting But but later on it was not and something similar happened with like outages where I was covering them and I still cover I like large outages, but like for small startups, I'm not that interested in like Glaring attention of what's what's happening right now. So yeah interesting. I feel you know a little bit of what I'm doing It's a bit of evolution. It's not to disclose to what you guys are doing you know, you're also evolving but I'm you know, I find myself in this interesting position of like going from engineer time to your manager to a Writer if you will or a little bit of journalists and I'm figuring out, you know What one thing we talked about is like integrity and and what what is it that what is my integrity and where do I want? To be and that's actually something that we kind of bonded over because it's you know We'll talk about it's a really important part in your hiring process the hiring process. Yeah Yeah, that's really interesting and it's true because you know Adam and I went through a bunch of layoffs at Sun I mean, I I tried to count them up at one point and a lot and When you I mean the humanity of it because it's like in and there yes There are you know, you know new time that talked about it earlier I know you're in your changelog podcast that like there are you know Something kind of early layoffs where everyone else gets work where because the economy is still going well But then like you start cutting into like muscle and then bone and then you've got people who are like, you know Who are whose lives are really uprooted whose kids lives are uprooted and you're beginning to realize like what this is like really? There's a lot of humanity under here and that's Well, and I mean, it's a good segue actually into what we're talking about today because hiring is all about the the humanity of it all and the you know, I think Adam I think I can fairly speak for both of us that you know The further we got into our own careers the more important the humanity of it becomes absolutely and so we You know the hiring process that we outlined on Friday, so we have had an RFD on this for it's rfd3 It's it's one of our very first RFDs And we can talk a little bit about the specifics of of oxides hiring process well, it's worth noting that so RFD request for discussion is the kind of mechanism we use internally for Almost anything like almost every durable decision that we want to talk about and discuss happens in that form And so as Brian saying rfd1 was describing that process. I don't know what rfd2 was I'm sure it was very important too. But So, what do you think rfd2 could possibly be actually without looking do you know what rfd2 is? I'm gonna guess it has to do with the values. It is. Yeah mission. There you go I am I'm pretty sure I'm gonna go to rfd2. It's like no, it's some like API that we were API that we just threw out. Absolutely Which are you at right now if you're numbering it, oh gosh, what are we at? We're at for that's a good quiz for you Oh, yeah. Oh, okay. Yeah. Okay. So I think without looking I'm gonna say we're at like or We're beyond 440. So I'm gonna say like 442. What are we at? I Got 442 does that what you said? Oh my goodness right on the nose. It's a 442. Was that right? Right right on the nose Oh better lucky than good. Wait a minute. You filed the last 10 rfd is not Right Better lucky than good and it okay, but now he's ought to go for the the trifecta here. Okay, and in rfd2 is mission principles Because I'm the guest I gets asked question. Yeah, you bet it's not hard. He's like Google Docs or some sort of great question And is so these are these are engineering documents And one of the things that we wanted which doesn't sound that complicated is like can the world give us a Google Docs front-end with a get back end Because we wanted it like what we would love is something that render. So these are in ASCII doc. Well, they were in markdown and ASCII doc and then and I thought like oh like some people do it in markdown and some people do it in ASCII doc and Then Adam were you in the intervention? Yes, I was like, well that's true in the most technical sense One of those sets includes exactly and only you Brian, right? These moments were like, oh, I'm the only one doing it at markdown. Everybody else is doing it in ASCII doc You're like, okay, I'll convert my rfts now. I'm sorry everybody so I can burn it all down. So they're all in ASCII doc but we Because what you need is that you you got to have that the rigidity that you get with true change control and you want to understand so Then we want I mean, I love the Google Docs front-end. It's great but um so we kind of end up with this hybrid system where it's it's an RFD repo and and ASCII doc and then we've done some unbelievable work Ben Leonard and team have done Unbelievable work on the rendering of that. So we've got a site that renders it renders RFDs and then renders the discussions The big question is how do you do the discussions? Is it in like comments? Yeah, so we do we have pull requests Yeah, I don't matter. Do you want to expand on that? It's I mean, I think I'd say it's sort of there's not one-size-fits-all. But yeah, it's often in the comments and then You know as we get to triple digit comments on a thing often that descends like then we have some meeting that's recorded and summarized And so forth so starts in the comments and then goes where it needs to go And we really want I mean I think this kind of came out of our the RFD process came out of our own experience at Sun where there was Adam and I were together at Sun and and there was this architectural review board that and the kind of the the big realization that we had is like all of the value of the architectural review board and none of the pain would happen if the room were empty if you did all the preparation to go in front of the architectural board and then went in front of a bunch of empty chairs like you would have Oh all of the because the the the value of that process was forcing us to write our ideas down. Yeah And because when you when you're forced to write your ideas down you realize You find the holes in your own ideas, right? And we found a lot of holes in our own ideas that way So we that's what we tried to mimic with the RFD process Like how do I get how do we get? the the rigor that you get from forcing someone to write down their own ideas the self review that you get the ability to the Transparency that you get without the like I do do not need the committee's rubber-stamping things or or worse like arguing over minutia I mean God, there are just so many horror stories though. So that's what we But it's a great archive, you know when when new folks join the team it means they they get to at their own pace or not at all or Intermittently replay the history of the company and see why why were decisions made at least contemporaneously Like what we were thinking at the moment when we made some calamitous decision and then maybe the next RFD that that apologizes for it Yeah, so I get this and just the last question on this topic because you know Both of you have done software and hardware before but like you're like oxide is really a bit of both Do you think that RFDs are kind of more important because you are doing hardware? I mean, you know, this is pretty important You're gonna be manufacturing stuff like it feels a bit more durable Whereas with software you could get away with you know, it's it's easy. It's faster to iterate You can always change it Like if this was a pure software company, you know, you found it. Do you think it would have still yeah Yeah, for sure because we actually the RFD process actually Was something that we that that the folks join came to I that's a process that we really polished a lot at oxide and became very important oxide, but we actually Initiated it at joint and it was the and you did something similar. I think at Delphix, right? I don't mean we yeah Delphix when I was CTO we we had what called it a one-pager process and that was sort of a weird misnomer because even the template Required like three pages, I think but it was a little more terse, but a little more focused just in terms of Gurgi about kind of product requirements and letting everyone participate in that kind of process awesome Yeah, and I think so I think that you know We did kind of I think Adam you and I kind of charted similar journeys and like oh, thank God We're like three of these architectural review boards. Like, all right, we get everyone just do whatever you want And then you're like, okay actually need a little bit more. It'd be really helpful to get some people like what? Again, and not having it having folks write down the motivation for things and the problem that's being solved What problem are we solving here? Very very important So we don't we try not to be overly rigid about it and there are certainly things that we do that don't have to say of RFDs, but the Yet as Sean is pointing out in the chat, there's actually a One of the things that we did to and Sean I don't know if you're deliberately trying to segue us back to the topic or not but this is masterful if so the the RFDs actually themselves became a really important part of our hiring process because One of the things that we would do is when we would have a candidate that we're like, okay We're really interested in this person. Um We would get them into the RFDs so they could see like now you get to see everything that we're doing and We really want you to actually Understand everything we're doing because it can be really exciting to be at a computer company and it is exciting But when you get into the details, it can also be like, oh my god, this is horrific. Well, yes, it's also horrific It's there's a lot of detail I kind of love it if a company, you know back when I was working as a software engineer or even an engineer manager a company said like hey in the hiring process if you get far along you're gonna see the RFDs I might have just interviewed for sake of seeing those are Totally right and I think that it's so and I think that part of what we're trying to we're trying to do two things one We're trying to avoid the situation where I think that has happened in many people happened to me in my career Probably happened to you and certainly the people, you know Where you like you think the company is one thing and then you get in and you're like, oh my god Like this this this happened when I joined uber in 2016 in the first three months We had two hires one of them quit after two days and the other one quit at the end of the week one of them Google and the other one came from somewhere else and what turned out we kind of had a Manager at the time had a we had a quick retro on this and what happened is we were kind of overselling stuff We're saying we're Google just like earlier and the Google engineers like that's amazing I like red tape and you know when they arrived they realized like oh, okay. This is not Google like earlier This is like duct tape held together and on-call hell and all that and then the second engineer But after that they saw like what on-call was like and then like our takeaway was like, all right Let's try to be a bit more real But again, like don't forget the way we hired back then was the typical I guess Silicon Valley hiring if you will you know like a full day of like Screening full day of on-site where you can ask some questions and we give you an offer and people join because it's uber, right? And so you didn't get any feel for the culture and even even two years later There weren't many people that love but there was this engineer who was here for two months and then that person went back to booking.com And I was like, all right like in terms of like I thought our culture was pretty good The compensation was certainly a little bit better This guy said like look like the team is it's just chaotic Like I had ordered there and for some reason during the like it was it was a bit of a shame because that person should Would never join but somehow they just didn't see this and it would you know, look no one made any mistake But we just didn't have that transparency and I think most companies don't have that So the fact that you're creating some of this is is It would for exactly that reason because we want to be very transparent about where we are and where we aren't and I think and I know the same thing happened to me where I was kind of when certainly when I was coming to join I was asking questions and it was like wow, this sounds like amazing and then you get it. You're like, this is a chicken coop Who I don't know you we got brought you in to fix the chicken coop. Like oh, oh, okay All right, so I'm supposed to implement the things that you told me already existed All right. Well, then um, and I I think that it's you know When you're trying to get someone to join you you kind of feel like I don't know We can't tell them the truth because they won't join us like they so like what's been this like little this little fiction and I Understand when people do it But it's it's a shame because you end up attracting first of all You end up attracting potentially the wrong person If you could attract the right person for the wrong reasons you also maybe miss an opportunity where you're like, no No, like we don't do right now. Our on-call situation is a mess. It's an absolute mess Engineers like problems, right? So it's like we're actually in but but it's something that we want to get better at Hold on. Can I pause for a second? Yeah, you're friggin hardware company. What is your own? I Was kind of speaking as uber our on-call situation is fine everybody Know who is getting paid and when it's gonna be joy. No, no, no our but but being candid About like where the problems lie, you know and so we did in getting folks into the RFEs was really really helpful because one they would just like Hear the voice of oxide see, you know kind of what we're doing and see what all the things that we haven't done yet or things that are kind of contentious and Sean who kind of mentioned this in the chat. I mean, I remember vividly Sean when you were You were in the RFDs and it was just like I'm getting excited the more of these I get more more excited about the company That's great. So now like by the time you're kind of coming into conversations. You've got so much more context That we so we found it to be really helpful to be I think it is Overwhelmingly in a company's interest to be transparent I think I do think that like one of the things the thing you're kind of trying to do here When you are adding to the team I mean it really is team formation and you are trying to find folks that are like the team is the right fit for you and you're the right fit for the team and If you're not the right fit, it doesn't mean like that's not necessarily a value judgment That's like that could be a reflection on us It could be we've had plenty of folks where it's like we're just not ready for you yeah, like the the skill set like we can see that they the for what you are like You need more order than we have right now for where we were or are and so I think we mean it earnestly I think people feel like they're being you know, it's like oh, well, you know, you said to everybody It's like well, okay, but it's like You know it is it can be true. It's often true that it's just not a fit I It's also the case. Sorry if you show up and you've say 450 RFDs times a thousand words or whatever is not something I'm interested in Ingesting a part of like that's you know, that's fine, too Right, that's that's like we work in a particular way and it's really not for everyone. Yeah, it is not for everybody Yeah, it is definitely not for everybody. I mean and I think which is And I think that that's that's okay. I mean, I think that you know, we've got certain Idiosyncrasies, I mean we do we like to Write and reading is really important for us. And I I mean, I like to say that I'm very pro-literacy Which makes it sound pejorative, but I don't mean it that way I mean, I guess I don't want maybe a little bit that way but we I I mean, it's not necessarily the fit for every injury organization or every engineer, right, but it's it has been I Know Adam you're asking about the over under on the number of words in the RFDs Well, yeah in shadows asking that well I mean the other thing that's true of RFDs is that I don't know you feel this way Brian But I feel like you know, and I've been at oxide a little while they've attained escape velocity. Like there is more RFD words being written then I can read so yeah. Oh sure. Oh my god. Yeah. Yeah I mean not even and well I also then you also find that there will be like an RFD That I will read that I will read at the time and like not really understand and then come back like two years later when I'm really suffering through a problem like oh Now I get it. It's like if we were to like they're the RFDs that I read a smaller number than the total number of RFDs by a long shot than the RFDs that I feel like I've read and I understand. I'm not even sure that that's all the ones I've written. So our hiring process and so what we had kind of publicized on, and the reason I wanted to make it public, I felt like, so we have got a couple of idiosyncrasies that are important. One is that we do have a very writing intensive process and it's a front-loaded process and I know people, there's a criticism which is like, you're asking people to do too much and I get that. What we try to do is ask people to do the things that we think are important for anyone contemplating a next job. We're not asking you to do coding assignments, we're not asking you to do things that are like go solve our technical problem, we're not asking you to do what we think is make work, we are asking you to pull together a portfolio that we think is valuable to you. It's kind of the things that a really in-depth interview would ask you about and you get to pull it together kind of once. So we want you to talk about the things that you're proud about, we want you to the things that you've built and we know that not everyone, if you've built things in the open, it's great. If you haven't, there's a challenge there and I know people are like, wait a minute, I've done only proprietary stuff. You're going to need to describe it. How do you think you're going to get your next job? I mean at some point you're going to need to describe in some terms that you feel does not violate the kind of confidence of your employer, you're going to need to disclose what you built. It's kind of fair I think and it's interesting because I think you're one of the very few places that do this in terms of especially thinking about engineering. This is more common for let's say product or certain roles where you're not as hands-on because with both software engineering, hardware engineering, the job itself you could interview just for that and you talked about that so it's a bit more rare. But this is super useful so a lot of interview coaching and just software engineering is about like all right you know practice like the big tech interviews when you're interviewing at Google, Facebook, whatever it's three pillars. One practice coding which is on lead code, you just do this algorithm of interviews which you do. Second is system design if you're a senior engineer which is again you can practice and third one is they call the star method or whatnot. It's describe the stuff that you did and now you actually just you're asking people to put that together you know your portfolio, your background but most people don't ever do that so but what I like about your interview process is it sounds like if someone goes through these first phases they will and even if for whatever reason either they decide it's not for them or it just doesn't work out they're going to be better off for their next job interview because now they'll have a mental model they'll have resources they can look back on to which is actually a lot more structured than like this like traditional interview coaching would go into. Yeah that's interesting and yeah we think so too and actually it's amazing the number of people who in their materials have said hey this process has been really valuable for me and just like you know thanks for reading this and because one of the comments online was like I don't think they'd read everyone's materials. One thing I would like to say is we definitely read everyone's materials it is really important to us we know people put a lot of time and energy into it and we want to put a lot of time and energy into reviewing them thoroughly. I'm gonna drop in a question here because I'm just placing myself as an interviewee because I think a lot of listeners will think about this. The most frustrating thing is when you're interviewing for a job as a software hardware engineer is you put a bunch of energy in you do your best and then you just get a no. No I know. Do you or do you give feedback or are you able to give feedback? We don't and we don't I mean the and we don't give feedback and the and I would say that like to anyone out there who really wants feedback if you want to DM me I will I will give you some measure of that feedback if I can. I think we can't always a couple of things to know about that and I do think that there's the the Y Combinator actually has got a an interesting piece I'm always always troubled when I agree with Paul Graham on anything so I always want to do like this kind of like check and Adam I don't know maybe you can serve to check me on this but have you seen their piece on why they don't give feedback? No. And it's interesting because they're like look part of the reason we don't give feedback is we are so oversubscribed that our reason for rejecting you is probably bad. And I think that there is it's or or like or fickle or capricious and I do think that like one of the major problems we have is like we just have I mean it's it's a great problem to have but and I know it sounds like absurd when I say it's been one of the biggest challenges of Oxide has been turning away people who I think would probably succeed here and just because we just we're not trying to hire 400 people you know and that and it's it's really really tough and you know we when we go through the evaluation of these materials we have to really look we have to be very selective and I mean I hate that about it. Well also like one thing I'm just gonna like maybe specify it like I think you know people would expect feedback for like you're doing something a little bit different you're asking people to build a portfolio and I kind of understand that sometimes feedback would just be you're just not the right fit for us like if you if you could be honest and you know that's that doesn't that's actionable the folks who are usually really upset about the lack of feedback is someone who has given an assignment to build you know like a very typical thing and software is like build this application every candidate gets the same thing and then they're it's the it's a take-home exercise and we're going to evaluate it based on you know code quality how it works etc now that is it's you don't do that in your interview but when you do that kind of stuff and you build it you can give objective feedback which regardless of if you advance or not is valuable so I think it's a little bit different because what I understand what you're doing differently is you know like it's you're you're actually not doing this you know you can give back you can you can if you want to you can give a feedback on coding or architecture or some of these things but you're actually like you kind of sized up this thing so I kind of understand why you would not either want to or be able to and especially I think as long as you're up front about it it's totally fine yeah and I again I would like to and I think that there are then there are cases certainly when we have you know taking people aside it's like hey look you know here's the piece that we're missing here we really love your materials and this is the missing piece um and often folks do know what I mean if you read the job description closely like you probably if I you probably know what the missing piece is um I would say that the people there have been some people online who get very upset that they're not getting feedback from oxide and I again I completely understand what's coming from and then I'll go through like the evaluations of their materials and I'm like yeah you're not like you weren't close like people saw like real serious red flags in your materials and like I'm not going to share that with you I'm not going to tell you that you know it's like I that's that it's tough this is the same thing by the way like even for companies that do get feedback again I know like a lot of founders like you will get feedback on the very straightforward stuff and that that is hard to argue against but when it comes to personal or or some very glaring things you're going to pass on it because it might not be your place so even even the places like the places that are very big up giving feedback they will not give you that kind of honest feedback that that person might need you know you typically need someone closer to you or or someone because again like you want that feedback to be actionable right you want someone to be able to be like like oh okay like and I guess that's when you're talking about like those coding exercises it's like oh okay it's like this is what I needed to to go you know go do um and um I mean I would say that part of the reason we wanted to make our process public is the one piece of feedback I I would give people is we take the materials really really really seriously and even if you you know you know folks at oxide or you're coming from a really prestigious background or you know there's something you're just like oh like this is like of course they're gonna like I'll you know I and you know you'll get like I can't wait to you know look forward to you calling me and I'll give you some more details on this question it's like there's not going to be a phone call where we ask you for more details on this because we like your time to do it is right now and um we want you to to put it all out there um and I I think that so um you know that's been been really important with one of the questions in the chat is like how do you manage this as the company scales um because this is like really uh time intensive and it is I mean it really is time intensive I mean it's one of those things that is um it's been but it's really important to us um and um you know we one of the things that's important to me personally is like we are going to continue to do very thoughtful review for materials however it's and um you know I I think that no matter how big we get that's going to remain uh important um one of the questions is like hey aren't you excluding all um all junior folks and I know this is another challenge is that like and Adam I know you and I both feel this personally because you know we want to be the kind of company that would have hired us when we were coming straight out of school um and it's another challenge right yeah I mean we we hold every application to the same standards we pay everyone the same wage and I mean it's tough I was talking to a college student from my alma mater who had reached out last week was very interested in oxide you know oxide has been getting a lot of hype at uh at the school which is great uh and I told him that he's very welcome to apply I encourage him to apply and know that those are the standards we're going to be using the standards of folks who've been in industry you know two three five ten fifteen years you know a member of the team is a member of the team which is tough but that's it's also where we've landed it's where we've landed and you know I think that that's that's a bit that we would want to get um you know we would in the abstract in the limit we do want to be able to have um you know be able to be a first stop for folks but um we're not there now we need to um if you know someone who can you know buy a bunch of rocks you know that would be very helpful yeah but I'm just again this is like more of an outsider perspective yeah but like as someone who's you know like even for example at uber there were different types of teams there were some teams which are very clear we will not hire juniors because we cannot afford they were typically the platform teams they were like very small teams who were for example there was a team that that was rebuilding uber's payment system from two systems to one it was processing 60 billion dollars a year and there was a very core team that only consisted of experienced people it was this very small team that did a lot of things because it turns out that if you have experienced people they can move faster at least initially and once once you build it out that's when you can onboard people so there's and the product teams who are building like uh like throw away products that might or might not work they actually hired more of the less experienced people because it was just it didn't matter like there was a lot more room for error a lot more room for learning so my my observation is I think you know it'll go same with with certain companies even groups within the company it'll probably change over time like you know like oxide you know five years from now like I'm sure you're gonna have like like growingly groups where you can or will or you might even you might even just really want on board but I mean you guys have seen this at your previous places as well right yeah and we've seen how do you think about like how admirable even if it's not like today yeah you know and I don't know the answer to that I would say that we are um because there was a lot of there are a lot of things that we have done that I'm like this will never scale to 60 people and we're kind of at 60 people and still doing a bunch of them so it has caused me to like question my own beliefs about what does and doesn't scale and I do think that like we do think we do things differently than a lot of other companies and so people are like that can't work it's like are you used to saying that because if it does work it kind of upends a lot of what you're thinking about companies um so I don't know I is the is the answer again I mean we know it's not for everybody I would say the one thing and because um one thing I didn't talk about in the RFD but folks should know is that part of the way we got to a written process is through some not at oxide but in previous lives some uh some um how to say this gently prevaricators what's that well prevaricators fabulists fabulists yeah I had some hires that revealed that everything I was doing with hiring was wrong and I tell me more well yeah um what let's just say that uh well we made some changes um so I will say this that you if you've never worked with someone who doesn't have integrity who's a good liar you do not know the amount of damage a person who is a a person who's got who is political and manipulative and dishonest and charismatic if you have all those things in the same person you that's deadly and they are they can destroy organizations and you will uh they're charismatic so guess what they interview pretty well and they've got they've got tricks that they use whether they have developed them deliberately or implicitly where they are able to own a conversation and they are able to keep a conversation on a home game and so you come out of an interview being like wow this person seems great and so we I'll actually give you a very concrete example that I did not hire but as a when um so uh joint uh fired the founding ceo it's good uh fired the day my daughter now 11 was born so a little over 11 years ago um I don't know if you if you have kids but those of you do have kids and Adam I know you know this like you've got that moment when like baby's just been born family doesn't know yet and there's this kind of like beautiful calm because everyone knows that you've gone to the hospital but no one everyone knows to kind of leave you alone and you don't know but you know that like we have a baby we just have a lot of people so you know it's great it's like you and baby and everything's very nice and into that calm comes my phone I'm like oh my god it's the it's the ceo it's I'm like uh hello Dave Brian it's Dave board just fired me and I'm like okay Dave well um I have a baby that's my news we'll exchange news and I'm just thinking like god damn it like now these things are like absolutely locked in history like I know the time of day you know I know exactly the and my poor daughter I knew this was going to happen and but it's like she is already like I mean she fortunately she's got a terrific sense of humor so she's like hey it's been 11 years ago since that dude was fired or whatever that's what she says every birthday yeah yeah oh my god it was that day um and so with the after that we started to search for a ceo and we've never participated in a ceo search it is a wild and I mean it is especially if you are at a company that has just fired its ceo well you were ctl I was actually not yet I was the vp of ensuring it's time so there was the the other founder was the cto be be fired sometime later but the um um uh I so we were interviewing ceo candidates and if you are a company that does not have a ceo you will not find this very surprising but you are not wildly attractive to a list ceo candidates so I got I got this kind of tour of c-list ceo candidates and Adam this is where in hbo silicon valley I know we know peers that have been able I've been unable to walk you know when they're all reporting into the chair yeah that is the episode where there are plenty of folks in silicon valley that are just like oh turning it off not watching it I've heard the chair gave me a tough status report just today exactly and I was I recall like that was part of the that was that might have been one of the precipitating scenes you're like nope nope not doing this anymore absolutely we I reported to the chair we fired our ceo uh there was total confusion and we also talked to some c-listers and so the c-listers are amazing so in particular had a guy and I much earlier in my career I just didn't know hadn't dealt with many ceos so I just didn't know what to ask and had this guy who seemed great and just like very charismatic and very engaging and I was asking me a lot of questions about me and it's like oh this guy seems great this guy seems great and our our uh our vp of support who's terrific and I this is back in the day was one of the calmest people I've ever met I mean he was he he he would I mean that's that's what you need in support right like as the building is burning down building is burning down right and this guy knew how to pet the chicken you know he's like they're their chicken and they're like it's okay chicken it's gonna be okay and the chicken would like the chicken would kind of calm down you know he was he was so good he's so measured and you know didn't swear and was just very mild manner and he came to me he's like brian I understand that we're interviewing this person's name like yeah yeah we're interviewing him brian I worked with him in oracle my god I didn't realize that michael okay yeah brian he's a baby eater brian he's a baby eater he's a baby I'm like literally the calmest person I ever like he's a baby eater he's like he's a baby eater and I'm like okay you just said baby eater three times I'm like oh it's like okay so we need to actually uh and we and I did and then like okay I need to dig like a lot more into this person and um the and did actually and dug a lot more and discovered that like okay this is a very charismatic person who is is a baby eater I think he eats babies is what is the conclusion that I can do but I think that he's he is a and I what I realized was like man I got played in that interview I got played so because he was flattering and charismatic and you know had all the right body language and it's like you get fooled by that stuff you know I would love to tell you that I wasn't but I was um and you know it's really hard to to detect that stuff in someone who's got that kind of charisma and those people ruin companies and I we didn't hire that person but I made other hires later years later that that were like this and did an enormous amount of damage and one of the things that we came to is like all right how do we not hire someone like that and one of the observations was you know what I observed about these folks they don't like to write things down because the writing something down is to kind of leave behind a ground truth. You're like now giving me flashbacks. There was sorry that there was like a product person I work with for a long time, like, like, you know, like I was somewhere injury manager and this was personal, like multiple levels above. And what I start to notice is, is this person would travel to a lot of sites will travel to our sites, travel to, you know, different sites and always sit down with people and like to tell, tell, you know, me stuff, tell someone else stuff. And what I started to notice is like, first of all, the things that like, and we agreed on stuff in verbally and I started to do with my team and then like later I was like, it's done. And it was like, there was, it felt a little bit of miscommunication, but when I talk with other people, it turns out like this person started to hold everyone a little bit, something different. Yeah. And then I started to just ask this person like, Hey, like as a product strategy, can you just please write it down and send it out to everyone? And guess what happened? Didn't write it down and I just had this nagging feeling. And I'm just going back to, you know, I'm not like this person, if I'm not going to say it wasn't necessarily integrity, but it was really confusing people. It made things really, really political because the only way you could actually like the people who were successful in that, in that organization is where the people who spend the most time with this person. Right. And there was just lack of commitment because as you said, once you write it down, you are committed. It's, it's, it's a truth and, and you're, you can go back and say, you know, what has changed? Cause things kept changing and we never had a log. We never knew. So I'm just like, I'm, I think, you know, I'm, I'm going to take this away from here. And I think anyone who's listening, I would suggest to take away is, you know, if you're, first of all, if you want to make sure that you're not perceived like this, write things down because that person, again, this is not someone who had ill intentions, but, but it came across like this. So I think as a leader, if you're not writing things down, you might just become a, one of these people accidentally. Accidentally. Yeah. That's a good point. That it's not necessarily even deliberate that you, and you don't realize that like, Oh, I am actually leaving a different impression with everybody. Like maybe I think I'm saying the same thing, but like, no, you're not actually, you're saying slightly different things. But that's even more interesting to me that you've kind of found that this, the writing, uh, works. That's fascinating. Uh, I'd love to hear a little bit more about that. Well, yeah. So, I mean, what we found is, is that there was a kind of a reticence to write things down. And so when we, cause after some of these bad hires were like, we need to strip hiring down to the studs and like everything we're doing, everything that I felt, everything I was doing was wrong. Um, with respect to hiring. Um, and we need to rebuild it from the ground up. And one of the, the, the, the, the kind of things that people like, you know, quick question, was this joint or was this oxide? This is a joint. Yeah. Yeah. Joint. Yeah. Yeah. And this is where we got very lucky. You know, I got very lucky to have made these atrocious hires. Um, you know, yeah. Before you own the company. Yes. Totally, totally. Because I, you know, literally have the, I mean, have some of these very bad experiences to thank for what we've done here. And like, you don't want to be a victim. You don't want to have to have these bad experiences. So I'm hoping we can save some other folks the trip because, um, you just, the scope of damage is so broad that can be done a real deep organizational damage. So the, but in forcing folks to write things down and then the other kind of thing that, that, that was important to, to us, uh, certainly starting the company, um, it's something I admired about Amazon is the kind of the codification of values. I take issue with these specific values. Some of them were good. Some of them were not so good. Um, but really wanted to use our values as a lens for hiring very deliberately. So, um, and then I wanted to ask other folks the, the question that, you know, when I knew we wanted to go do oxide, um, or actually I shouldn't say that. All I knew was I wanted to go start a company and I wanted to do it with Steve. This is kind of way, way, way back in the day. And a, um, I was a friend of mine who's a CTO was, uh, walking with me and he's like, you know, when have you really been happiest in your career? And, and why is that? And as I've been thinking about that and Adam, I mean, I don't know about, about what your answer to that question would be, but man, it's like we at fishworks, there was so there was a moment that was really just great at fishworks. And as I was thinking, I'm like, man, there's a moment. That's really great. When we were doing detrace together in this moment, that's really great at joint, but everyone's working on Triton. And what I realized for me personally, it's like the great moments are all around a team. Like, that's what I loved. It is like team coming together to solve a hard technical problem. And you know, that's when I've been happiest. And when I, when, when have I been unhappiest? It's like, well, I've been unhappiest when in a, in a, in a fear driven organization, right. It's not a hugely deep thought. Um, and I just felt like it was really useful for me to kind of think about that because I just hadn't really processed that it's kind of a stupid thing to say, but I just hadn't. And, um, I think that getting people that answer that in writing was really important. And then we did something else and Adam, I would answer what in writing, when have you been happiest in one? When have you been unhappiest in one? And I would say even stupider. I never asked myself those questions until I saw it in this form. And it's in it when I was applying to oxide, these questions, you know, you say these questions are brutal. Okay. What are the questions? When have you been happiest and why? What's something you're proud of? Like, those are brutal questions. Really? It's like, yeah, they require a ton of introspection. Are you, you come up with a pithy answer and you think, is that really it? That's really when I've been happiest. So it's, it's remarkable how, uh, you know, how challenging those simple questions are. Yeah. One thing I'm just reflecting on as a hiring manager, you know, at, at Uber, I must've like had like hundreds of interviews, like hired like at least 20, 30 people. So, you know, like, and there's like 10, 10 interviews, we'll, we'll get a person in the door, but I would ask these questions. I would ask, you know, tell me something. Like I had my questions prepared, right. And I regularly ask, like, tell me a project that you're proud of or something that you're recently proud of. But the interesting thing is that because you're doing it in writing, you know, people just, they need like the candidates there on the other side. We said, well, they, either they came prepared by, by these coaches or, or, you know, something online, or they just like said something. It didn't matter what, because it was expected that you just reply. And a lot of times, you know, they, they probably didn't say like, there was no time to reflect what I like about your approach is there is time to reflect. For example, I needed to change my questions. I couldn't ask what you're the most proud of stuff because, or the thing that you're most proud of, because you know, I'm not pushing people there won't be able to just ask, like, tell me something recent that you're proud of. So I also didn't get that signal, but also the people and you know, there's introverts as well, who, who just couldn't, yes, no, that's stress because you're now sitting there, we have 45 minutes, you flew over, we flew you in, this was back before COVID. So I actually think that you're going to get way better signal by doing this in writing. And I'm, I'm now kind of just asking myself like, well, why, why does no one else do this? We don't know. I, I, so honestly, I don't know. And I, cause I think, I think that cause other people was like, well, what about like, you know, folks that have English as a second language? I'm like, okay, what about those folks? Because folks that have English as a second language, like, I mean, obviously English is your second language. The ability to like, have someone else proofread it. It's like, I don't have to like worry about getting flustered in an interview. I can like spell check it, grammar check it. I can like make sure I can work on this thing until it's tight. It's like, which is a much better artifact. It's like, we're not in, we're not doing oral exams as part of our engineering work. And I also feel like these are good questions. Yeah. I mean, our RFD process is very written. And we do have meetings, but we do, I mean, it's a real, like the RFD, I mean, the, the application process, the materials are testing a skill that we value. It's not just like interview for one thing and do a different thing. More than any place I've ever worked. We value the clarity of the written word in, in comments and proposals and so forth. And so if that's not something you want to do, that's also clarifying, like in both directions, fine. You don't want to do it. It is part of the job. And then, so one bit that we do. So in terms of like the, the initial genesis of the materials, so we knew we wanted, we, this is the way we wanted to hire. Um, but it's also true that for the, the first tranche of folks, like very, very first tranche, which, um, Adam, I thought included you, but then you said you applied, applied oxide. Certainly. Um, like Josh and Robert and we had these, like these, the, the, and I thought Adam, but maybe, maybe not, maybe Adam was like, like 30 seconds later, Patrick, the, um, we knew that like, this was going to be the, kind of the first hires we'd make as soon as we got funding, but I wanted to introduce everybody to everybody else. And so we had everybody, including the founders, all did the materials. So I've done the, I've done materials too. And Adam and I thought that you would, but maybe, no, I was, I was like, I was right after that. So I was early January, 2020, which, which is right. Okay. And so in fact, there was, I think there was some sort of surprise, like, uh, you know, oh, it turns out everyone reads the materials. Like, did we not tell you that? I was like, no, you didn't tell me that, but that's great. That's good. I'm glad. I'm glad I didn't write anything disparaging. Oh my God. Yeah. Yeah. It was, I was sort of like a weird window, but yeah. That is a weird window. Yeah. And it's so funny because I kind of think you mentally as, but yeah, you're right. Okay. Right. It was, it was a show a couple of weeks later. So when we, by the time, sorry, so Adam's in January and then by the time we're talking to Cliff, and so that's in like, Adam, you are at the company when we're talking to Cliff, right? So that's like late. Yes. But I think, I think we're talking about like which week in January or maybe we're February because, because I also feel like I commuted to the office for months and months and months, but obviously it could not have been more than a couple of months. No, a couple of months. So we, but so, so Cliff, it, we're describing the materials and describing that we, that we had all done this. And, uh, Cliff's like, wait a minute, you all have done this, including the founders, you've all done the materials, right? Yeah. We've all done this. And Cliff says, can I see yours? And I'm like, oh God damn, that's a great idea. That's a really, really, really good idea. So I'm like, at the time, Adam, we had whatever we had, like seven people at the company, whatever it was, a small number. So I'm like, all right, well, all we need to do is kind of like clear it with these seven people that like, this is our process now. Um, and, but this is a bit that's in that RFD that like, as people were discussing this online and I can understand it, like they just didn't get like far enough into it or they got, they got exhausted based on the word count or whatever. Um, but the, um, uh, one of the things that we do when we bring people in for conversations, when you're going to come in and have conversations with the team, cause we, you know, we, we, we look at the materials that is basically the vast majority of our process, but we want to, obviously we do want those conversations. We want to have that check. When you come in for conversations, the, before you speak with people, you get their materials in advance. And that's been a wild twist. I feel Brian, do you remember your materials? Well, because I confess every once in a while I interview someone and they're like, I read your materials and I really liked when you talked about X, Y, or Z and I was like, huh. X, Y, or Z. I think I remember writing about that, but I, I still get surprised from time to time, you know, discovering what I've written, uh, four years ago now. So I do remember my materials because I send them out so frequently because the, and, and the thing is, of course, because I didn't, I did not realize when I was doing my own materials, my thought was, this is going to be for the folks that are immediately at the company, I wasn't thinking that these are going to survive for the lifetime of the company, just to make it clear. When you say material, so these are the answers to these questions, for example, like, uh, happiest and why, unhappiest and why, um, portfolio of your work analysis, sample presentation, sample, um, the one that you listed. Yeah. Yeah. Yeah. And so, and so it's happiest, why unhappiest and why I take an oxide value that's been reflected in your career. Speak to that. And, um, and the, and Adam, you know what I have, oh, okay. As long as we're here, if, so in my materials, the value that I. That described as being, obviously all these values have reflected my career at some level, but I actually, do you know what value I picked? No, I don't think I've ever read your materials. Even I got to get on that. I picked humor, which I'm like, you know what? I'm standing by. I mean, you know, I think it's a great one because it's like, and I'm glad that we have that reflected in the values because if you're not having your values, yeah, yeah, if you're not having fun, like what's the point of this? Like, really? Like we're not just relentless capitalists. If you're not enjoying yourself, like go find somewhere where you are enjoying yourself. I'm all for it. Yeah, yeah, yeah. Human is really important for us. Um, the, uh, and then we, um, ask you for a value that's been violated and how you've dealt with that. Um, and then we, one that I kind of like just threw on there at the last second, but it's been kind of interesting to watch is take two values that have come into tension for you and how have you resolved the tension. And there's a couple of reasons for that question. One is that, you know, we differentiate principles from values. So principles are honesty, integrity, decency. Those are the things that are like constraints on the business. We expect everyone to operate that way at all times. Values aren't that way. And one of the things that I really wanted to prevent, I think Adam so far, we've done a decent job of this, but it's definitely like it's, it requires constant vigilance. I don't want the values to be weaponized. Um, and I don't want, because I, this does happen on Amazon and anyone will tell you that the leadership principles of Amazon, like your ability to climb your organization is your ability to figure out which of the leadership principles advances what you want to do anyway. Well, and, uh, the values are, are the leadership principles are built in a way that they actually contradict each other, so you need to choose. That's right. Yeah. You don't want people saying I need to merge this PR despite your objections because urgency is a value. You don't want them used as a weapon to, to win arguments. That, that, that's exactly right. You do not want them as a weapon to win arguments or to like disparage folks. It's like, you know, the problem with Bob, like I give Bob zero empathy stars. Um, but they are, but they are a great tool for structuring discussions for us because it's like a common core, you know, it's a, it's a collection of values that we all have decided to ascribe to sign up for. Yeah. And I know, and I think it's been, you know, when we, cause you can say, wait a minute, we're at loggerheads right now on this issue because this is urgency versus rigor. And right now, which is like the, I would say Adam, like what, probably half of the people that apply to oxide because urgency is one of our values. Rigor is one of our values. And, uh, people talk about urgency and rigor being intention. And as I tell people, like there are like, that is a classic engineering. No one should feel like they need to be creative, um, and occupy some, I mean, yes, it's true. Adam occupies, I think the only one in your particular square, I don't think we're going to divulge what that square is unless you want to, I don't know if you want to look, I was so early. I didn't know. I didn't need to be creative. So, so my, my square was thriftiness, encourage, and I encourage anyone to, to apply to oxide to find out why they get my materials. Right. And it's been really interesting to watch that. Um, and you know, there's a lot of urgency versus rigor. I will never get sick of people describing how urgency and rigor came into tension for them and how they resolved it because urgency and rigor comes into tension for us all the time, every day. So that's like, I'll never get sick of reading that. That's great. Um, there are some ones that are just like, I'm not saying it's always a red flag when these come into tension, but when candor and empathy come into tension, you're always like, tell me more because, and you'd be amazed how many folks tell on themselves. And there are people that really divulge it. That like, you know, I was working with a, a team that was really substandard and I, you know, was pointing out to upper level management that I was surrounded by idiots and I got some sensitivity training and candor and empathy came into the tension. It was like, Oh my God, you're like, thank you for telling us who you are. I appreciate it. And then you, and similarly, and the other thing I would say is like, Hey, look, I know that like a lot of what we do at oxide is not necessarily replicable. Um, and, but I think there are some things that are replicable. I got to tell you one thing that I would never not ask is in writing, why do you want to work for oxide? That is incredibly revealing about like, why do you want to come here? And it's like, that's a really reasonable question to ask. Like, what is it? And, and even if it's like, Hey, you know, cause you, um, you know, you had in a, you were describing in your, in what your change log podcast was earlier about how like some of these jobs you're talking about, like it was in Edinburgh, right? Where the working for the municipality in Edinburgh and it's like the appeal may be like, I, you know, I want to serve the public, but I'm also looking for stability in my life. I'm looking for, you know, I, I've just, I, I like looking, there's nothing wrong with looking for stability. And that may be a great match for, for, so you, you know, you asking people like why they want to work somewhere is, and we, you know, have had people that like really, um, it's really interesting to read that, you know? And, um, and I would say that like, none of these is like, there's not necessarily a, a, a wrong answer, but there are, there are answers that forces to ask other questions. What I like about your process in writing that you, you can expect, and you also said this, that, you know, you're not going to call people back and ask them second time around. You're expecting them to actually think about it. You can expect that it's well thought out. And so if you're getting shallow stuff or if you're getting things that are, you know, just not there in a, in a live interview, again, I, I, when I, when I was hiring manager at Uber, I asked people all the time, why do you want to work at Uber? And you know, there was two sides of people. One of them came prepared for this question and they said it, or they either said what I, what they thought I wanted to hear or for the most part as engineers. So they kind of said why, but there were ones who were just taken aback and they couldn't really answer. And so when I walked away from an interview, 50% of the time, I didn't really know why this person wants to come here, but it was, and, but I couldn't do much about it because it was, and so what I, what I would sometimes do is if I was uncertain and we're about to make an answer, I would call them up and, you know, like try to, you know, ease them into it and ask the question again. But what I didn't have is, is, is the ability to have them properly think it through. So I feel that your process actually has this advantage that you, you, you can now expect that this is, this is the best that they can give you. And if that's not there, then you can, you can, you won't have the problem that I, that anyone who does this just verbally on the spot has, you're never going to know if that person was just nervous, totally, they were tired. They just, they, they, they're, they couldn't express themselves because maybe again, English might, might've been their second language. So there's, or they may be an introvert. I mean, you mentioned like an introvert. I also feel as like a, there are a lot of, I mean, great engineers that are introverts, right? I mean, a lot of them, and it's like, that's not necessarily, and I, you know, this was a big eye opener for me way early in my career when we, I wanted to hire someone I'd gone to school with and turns out he didn't interview well. And, um, I. he was talking to the engineer I'd gone to work with. I'm like, what'd you think of him? He's like, I don't know, like, you said you like him? I'm like, he's great, like, what, he's like, I don't know, he just seemed, and I realized later, like, he was extraordinarily nervous. And he wanted to work for Sun so badly, and wanted so badly to say the right thing, that he would lock up as he was giving answers, and was really, like, rigid, and just like, it was not, he was not his natural self. And I remember, like, the senior engineer I'd gone to Sun to work with was like, well, you know, my kind of rubric for this was like, do you feel strongly enough that like, like, do you feel we should hire him? And like, what would happen if we didn't hire him? But like, that's the question I like to ask. I'm like, if we didn't hire him, I'd quit, I'd go work with him. He's like, all right, Jesus, like, we'll hire him. Like, don't, like, okay, okay, like, settle down, settle down, like, okay, you feel very, very strongly about it, but it's like, that, and I, that kind of experience was eye-opening for me, because it's like, a terrific engineer who interviewed very, very badly, and I think a lot of them do. A lot of them do not interview well. And Adam, I know you've had, because, I mean, you and I, I mean, we're together at Sun, then you're at Delphix, and I'm at Joyent, and kind of, and Transposent, and so on, you're kind of going through your own journey, but kind of coming, having some similar kinds of experiences. What were some of the things that you, how had your process kind of evolved? You mean in terms of, like, hiring process I ran at these other companies? Yeah, yeah. Yeah, well, you know, one of the things that I think that our process encourages, that I, was sort of a thing I needed to solve at another company, was everyone was only, at a previous company, was that everyone had their question they wanted to ask, and really only wanted to evaluate the candidate narrowly on their personal experience. Right, interesting. So you'd sit around these roundtables, and everyone would say sort of their, yes, like, thumbs up or thumbs down, without really listening to what anyone else had said. We also had a problem of, like, some people's questions they wanted to ask being absolutely terrible. Oh, yeah. It's like the, where's the bathroom in my apartment where's the bathroom in my apartment? It's like the, where's the bathroom in my apartment? Totally, yes. I mean, we had exactly that, where this guy had read this coding puzzle about, you know, minimizing initialization, or constant time initialization cost on an arbitrary length vector or something, and it was like a very clever solution that, you know, the types of feedback we got were the candidate took hints well. It's like, well, let me tell you this. If you and I were in a whiteboard, and you were giving me hints about the thing we were designing together, I would leave, like, both the interview and in the job process. So I think, you know, actually what we ended up doing is something a little bit like the Oxide values, not quite as explicit, or not as kind of fundamental, but talking about the characteristics that we're looking for to structure the conversation, and it helped that person realize, hey, this question I'm asking doesn't really speak to these values, and I need to listen to other people as they articulate the strengths and weaknesses of candidates against the values we've articulated. Yeah, and so we actually, and we do get into this in the RFD, that we definitely use the materials then when we wanna have conversations with the team. We use those materials really heavily to go through, like, what are the open questions that we have for this person? Like, where do we wanna focus? What do we wanna really understand more? It really allows us to kind of be very deliberate about the way we have those conversations. Just so I understand a little bit better, because I'm kind of used to, again, like the big tech, the way hiring typically works is, again, we all kind of talk with the candidates. We often have a scorecard. There might be some values or something. We kind of submit our scores, and we kind of then all get together in a room. You typically read some stuff in advance, and then you do thumbs up, thumbs down, and you have a discussion. Now, in your case, you don't have these kind of, and again, these are like coding interviews and system design and hiring management, all that, but you have a very different process. How does it work? So, like, candidates submit some materials. Maybe they talk with a person or two, but then what happens? Yeah, so the materials evaluation is most of our process. So, we spend a lot of time evaluating the materials. How does that actually happen? So, yeah, so people do evaluate the materials, and there is a, it's on a numerical score, but there is a no, pass, yes, emphatic yes. There's not an emphatic no, but I'm thinking we, I have had candidates, there have been candidates, I'm like, we need to invent an emphatic no for this candidate. The, what's way more important to us than that, that score's important, that kind of like, you know, when we, like emphatic yeses versus yeses, and so on, versus passes. There's a written evaluation in there that people, there's a, that, so people will do their written evaluation. That is really, really important. So, as we are kind of, because we've got to, you know, when, especially when we have this, you know, we've got like, we're gonna hire one person, and, you know, we've had, you know, 130 people apply, and it's like, we really need to spend a lot of time kind of winnowing that down. And so, we, and then when we've got positivity, we really try to get more and more people, so we've got a kind of a process for getting more and more eyes on materials. So, if we know someone's not a fit, we guarantee a certain number of kind of eyeballs on all materials, and the, because we, it's very important that we not, or we're not, we don't just have like a single person looking at materials, obviously. So, what's interesting is in the traditional kind of, I'm just gonna say traditional, because that's what most companies use. What you're doing is not, or the majority, you're the minority for what I'm seeing, at least for software. We're comfortable with that, both here and in other aspects, please continue. Yeah. So, like, I really like how everyone gets the whole package because the reason, like, you know, like let's say a company like Uber will run this hiring process the way it does is because I'm a hiring manager, and I will literally only talk, I have 45 minutes to talk with this person. I'm gonna evaluate their motivation and their communication style. Or I'm the coding interviewer, which, you know, like I will have to, even as an engineering manager, I would sometimes, well, maybe not coding, but before as an engineer, I only say the coding. And a lot of times the feedback is, you know, like people do write a short, they'll do thumbs up, thumbs down on a short evaluation, but it'll be just like, well, the coding was a bit rusty, but assuming if their system design is good and if their actual motivation is good, then I would be, yes, you just never see the full picture. Right, interesting, yeah, yeah, yeah. So this is why, because I was thinking, like, I really like how people, again, on your end have to not just thumbs up, but actually describe this. But what I really like is everyone in the hiring process gets the same picture. They all can imagine how this person will fit and they can raise the things that you have a lot, you have conversations that starts a lot further off. In this process, like the first time we see the full picture is when everyone comes together and what typically tends to happen, and it's like 30 minutes, and the first 15 minutes we're asking clarifying questions, like what actually happened on system design? Like you were kind of like, one of you is thumbs down, the other one's double thumbs up. And so you're just catching with context. So I feel it's just very different. And I feel you might have a, you talked about team dynamics. I wonder if this approach helps with team dynamics. Of course, yeah. Yes, 100%. I mean, like no question. And I think that we, so we spend, because it also allows you to get, if someone is gone deep in something that's not your domain of expertise, in an interview, you can be like, I don't know, seems good to, but at Oxide, you can be like, no, no, I'm going to add, I want to add at the end of these materials. I want to add in these materials. I want to add a lot of these materials. Like I can add other folks to these materials. So, cause I want to get their eyeballs on this. I want them to actually go deep on this. And the, so it allows us to, cause we think like in kind of in a mythical interview, you'd love to be like, hold on, wait a minute, pause. If you're going to talk about this, if you're going to talk about a security vulnerability you found, I haven't really done that before. So let me get, I want to get Laura from down the hall. I want to get Laura here and I want Laura to sit through this, right? You can't do that in an interview. You cannot. But we, these, this materials process does allow you to do that. And that's been really, really valuable for us because we can get to depth on all this. So we, I mean, again, when people are like, oh, they don't read the materials, I can help you read the materials really, really carefully. And especially when you've got, you know, you've got like a conflicting take on the materials. You're like, hey, you could, and this, it happens rarely, but does happen. Cause you're talking about someone who's a double thumbs up and someone's a thumbs down. And you're like, okay, what's up there, right? And so you, whenever you have something like that, we always want to understand, like, okay, we've got really different impressions on these materials. And it's very helpful to be like, okay, let's get the materials in front of us and let's talk about like, what, what do you think is so positive? And here's what I'm seeing over here. And like, maybe we find some third thing in the materials that supports a different position or what have you. So it gives you this kind of like ground truth that you can really go, go deep on. And you're starting the conversation, you know, 20 paragraphs in, you don't say, well, what's something interesting you did? You say, in this interesting thing that you did, that I spent half an hour reading about, what happened next? You know, so you get, it gets much more diversity in terms of the feedback and much more interesting conversations. And just imagine, so like people submit a bunch of stuff written, but you mentioned there's, you do talk with people. How does that get incorporated into the materials that everyone sees? Yeah, so the, so when, well, so you've applied, we've looked at the materials, we think like, yes, we want to have you in for conversations. Okay, so now we're going to come in for conversations. That first step is we're going to get you into the RFDs. We want you to, actually now what I, you know, we've got to actually modify our process a little bit, Adam, because we can actually go have them provisioned on an actual rack. We've got a rack and a pillow. Yeah, so you can like, actually go use the product. It's actually real. Like I said, that's actually not just like dreams. We can actually go, which is great. It's not just fever dreams. So we've actually built something real. So the, getting them to kind of provision on the rack and understand what we built. So that's like, that is kind of a moment for a candidate to like self-select a little bit. Be like, okay, I know you're interested in me. Now I'm going to learn more about you to figure out if I'm interested in you. And as I tell people, like if you, when you get into the RFDs, you're going to want to work for Oxide more or less, but not the same. And most cases it's more, but we have had, we've had folks like, you know, I got into the RFDs and I realized that like, I thought I was more into this than I am. Like, this is like, I am actually, I'm struggling to get through them. I'm like, I'm like, I'm just not liking this. I think it's not, it's like, great. That's great. Like, you know, people be like really apologetic. Like don't be apologetic. That's great. Like we've. And also they've seen something, you know, they know that and they'll know why it's for them. I mean, I think, you know, one of the biggest mistakes and I, I see this, it happens with so many of my friends, especially like after layoffs, you know, Uber layoffs early on. And so there was a lot of jobs, but I had a friend, I had someone who worked on my team who joined this other company and then quit two weeks later. I just didn't like, it was clear after he joined the first week, was like, not sure. But then he just, he just knew this is not for it. And he just wasted two weeks, well, probably a month of all that, which again could have avoided. So my point is it's actually, I don't think we talk about this at all. I think I don't like hiring managers, entry managers, anyone talks. One of the best things you can do is give transparency and have some people like say, this is not for me. That's right. That is the, like, we talked about like humanity when we started to talk about layoffs. But I think with hiring, this is the humanity part that I think everyone forgets about. Like it's a big decision, you know, someone is going to. It's a big decision. They're going to leave their existing team, their network. And if you kind of want to go somewhere where there's a very high chance, 90 something percent that it's going to work out and you know it's going to work out and this is how you do it. Well, and I mean, transparency is how we do it. Yeah, yeah, absolutely. And I think that, you know, I also feel like, you know, I have worked together for 20 years, right? We've got like, there are lots of people at Oxeye that I've worked with across multiple times. Hold on, quick question. You've worked for 20 years. Why didn't you just hire Adam and just not mess with any of this? Because he went through the process, right? Seriously, this is a great question. Finally, we got here. Okay, so I don't know if Adam is putting you up for this in any way. Is Adam threatening you in any way? Or is he that this is like, look, I just, you know, the guy's always struck me as a little fishy. I don't know. I mean, it's just, something just doesn't add up about him. I just can't, I'm still getting a beat on him. I don't know. I don't know. No, so actually in all honesty, the reason for that is because the, like, I know Adam. I love Adam. I would, I, sorry, Adam, to speak about you in the third person here, but like, for sure, like no one needs to interview Adam. We can just hire him. But like, actually I want everyone else to get to know Adam and what we, you may find, obviously not with Adam, but definitely has happened where people are very excited, have worked with someone at Oxeye and they apply and the materials are not very good. And, you know, you've had this happen a couple of times and you get people like, I am a, oh man, these materials are not good. Cause it's important that like, hey, we're not going to hire your friend that you work closely with. And I need you to look and in all of these cases, and it doesn't happen that frequently, but in all these cases, the friend who works at Oxeye is like, they, man, I told them so many times, we take the materials really seriously. You know, the one thing I'm really liking about hearing this is you're the CTO or your co-founder as well, right? Like a lot of companies, what they do is like, yes, they're not going to hire a friend of like the, you know, the senior developer who's, you know, employee number, like 55. Yeah, of course you're not going to do that, but guess who gets hired at a lot of companies. But I'm so happy to hear the CTO's friend, the CEO's friend, and what happens there is people down there will talk. They're going to talk like, oh yeah, it's a bit of, not even sure how to say it, nepotism or. Totally. And I just love how you kind of, you know, like you and I, I'm assuming the rest of the founding team said like, we're not going to do an exception, even though like you probably know what's best for, like you will know what you think is best for the company, but yet you're going through the same process as everyone else, which I think is brilliant. So I, and I got to say, this has happened both ways. So it has happened, one of the ways it's happened is we'll have someone apply to Oxeye who I know, and I think is kind of a turkey. But like from a long time ago. And I'm like, all right, we'll just be, and then like everyone else who reviews their materials, like this person's kind of a turkey. I'm like, they are a turkey. I are a turkey and the materials show they were a turkey. But it was like, hey, the materials were an opportunity to show you like, hey, I've changed in the last 20 years. I was a turkey 20 years ago. Now I'm not a turkey. Turns out, still a turkey. The, but then it's been also the other way where it's like, oh, I think this person, I think Adam's great. Okay, Adam Smith's materials. And this is, I mean, this is like hand on heart, hypothetical Adam, real. Okay. No, no, this is not like metaphorical Adam. Actually, okay. Is that like, because I mean, this was actually this experience, honestly, because like, yeah, I desperately want to work with Adam again. And, but you look at Adam's materials and you're, I mean, there's a part of me, Adam, obviously I'm not surprised, but you read the materials like, oh, thank God, they're awesome. You know what I mean? It's such a relief when you have a friend who you've asked, a friend apply, or a person I had worked with a bunch of years, the same person to apply, and his materials were so fucking good. Thank goodness. Thank goodness. Yeah. Oh my God. I know. And it's like, I knew they would be. And it's like, I, you always be like, I don't want to even like sound or be surprised because I'm not surprised because they are good. That's why. The interesting thing is that like, you know, I'm used to this. Like I, when I was a junior developer, a new grad developer, I worked at a company and I had my friend tell, come here, it's great. And I referred them. And obviously I was just crossing my fingers. I, oh, I hope they do well at the interview because my work didn't matter. They had to prove themselves to everyone. But the interesting thing is like, there are the types of companies which are a bit more hierarchical or, you know, the higher you go, the rules that down there everyone follows don't apply and, or don't apply as much. And it just always creates tension. It creates politics. It creates, you know, double standards and you're starting to not like it. If you move up to management, suddenly now you can bring in people and you have this power. And I like what I do like about it. And it goes back a little bit to, you know, the integrity being in, in your, it's actually written down when you actually screen for this. Like, like this approach does help with the integrity because again, all the rules apply equally. All the rules apply equally to everybody. Yes. I just like how it is a bit refreshing. And I do wonder again, like this, I think this is just outside of this podcast. People who are listening, this is a good opportunity to reflect at any company. If are there exceptions, the higher up you go and if there are, why are they? Or why are they not the same everywhere else? Yeah. And it's in a way, and as a candidate, it's really hard to evaluate that, right? That's really important to like, if you're contemplating, like I'm kind of like going to this company, how do I evaluate their integrity? Right? Very, very, very hard to do. So that's no, that's been very important. So, and then the, and just in terms of the actual interviews. So then you, we allow people to kind of sign up for interview slots for conversations that is left pretty open-ended. So it is generally people will sign up for someone that like, oh, I really want to talk to them. It's like, I'm really excited about this person. I'm really glad they applied. I want to work closely with them. And then we, they get their materials in advance. So, and then we, if in kind of as needed, we will have a conversation about like, all right, so who's going to kind of ask what, where are we going to go? What are we kind of want to dig into? And then I think that's important is that we, when we kind of talk about someone afterwards, we want to be sure that, and you know, Adam, you said this earlier about like really listening to what other people are saying. What we don't want to do is become kind of conscripted to a rigid process where it's like, we have to make a decision right now, yes or no. Cause like, no, actually we don't. And if we've got an open question, we should like have another conversation or go back to them and ask that question. I thought it was a, I thought it was very interesting. You mentioned that like I had a candidate who I wasn't sure why they wanted to work for Uber. So I wanted to like follow up with them later. I feel most folks don't do that when they've got a question. They like, no, no, SRA, time's up. It's the end of the day. We have to make a decision, yes or no. And it's like, that's not necessarily the best decision. And I've seen so many bad hires because of this. Like I always felt awkward doing this cause it's more work. You go against the organization. Yeah, I'm talking about organization with established the usual process where as a line manager, like a lot of people think that managers have all this power which they do have some, but you kind of follow it. And you'd be surprised. I mean, maybe you're not surprised cause you've worked in organizations but a lot of managers like don't, like what I like about your process is like the reality is most managers or most people who are hiring don't know how to hire. I guess I figured out how to hire. I hired a bunch and I, luckily I made some mistakes that I realized and I got a bit better but in the end I was just an average hirer. So, and the best hires, it may have always been where it's been a group has seen more things and they brought up, you know, either issues or, or, or strengths or whatnot. And I really like how you're, you know, you mentioned team dynamics, but I'm thinking to myself, is there a better way of building good team dynamics than having the whole team interview? And, and I, I still remember one of the first startups I joined back in a long time ago, uh, I just talk with everyone who would be on the team and then they got together, they all talked and they gave the thumbs up and I feel you're kind of still doing it, it's still scales. And I think at some point, a lot of companies lose this. You've not lost it yet. Yeah. And I think, or hopefully never, hopefully never. And I think that it is really important to get, just because another thing that we kind of observed with these kind of very bad hires pre oxide is that, I mean, this is gutting when you've had a terrible hire and you finally like get them out. And then someone's like, you know, I actually want, you know, when they first came in, I had some real questions, but I was, I, you know, I was afraid to bring it up or, or like everyone in the room, everyone in the room was so positive. Like I didn't want to be like a downer or the, or, or like I actually, I really, I known that person from a previous gig. I didn't think we should hire him, but I wasn't in the process at all. And you're just like, Oh my God. Yeah. Oh boy. Did we screw up? And so I think like getting the democratizing the process internally as much as possible, allowing any employee to look at any materials, allowing any employee to engage in the conversations has been really important. And then I think that's like, you know, as you're digging in those conversations and I think Adam, I don't know what you think of this, but like, I feel like it's to a certain degree, the conversations are even a highlight about how challenging it is to interview. So even with everything that we have done to prepare that interview, we still have a bit of the Rashomon effect and right out of it. Yeah, totally. And you know, the good news is like we were able to square it a lot more quickly because we do have materials to fall back on and we can kind of like get things squared, but we still have this effect where it's like, and sorry, when you say get things squared, you mean like narrow down? Well, we're just like, okay, so we've got like two people, you heard different things to what they think is the same question. And you know, the good news is like, again, we've got the materials, we've got a lot of other conversations and we can also just go back to the person. Unfortunately, when they're this deep in the process, you know, we can be really candid about like, hey, we're sorry, like this particular, like what happened here with this question? Or like, what do you kind of think about this? And like just getting, okay, let's have some follow up conversations and let's get some and other times it's just like, and this has happened to where you get people in the conversations and it's like, hey, you know, there are, you know, a bunch of people didn't see any red flags, but then like four people that saw the same kind of red flag and you're just like, okay, that's a, that's okay. Did we just, you know, did we dodge a bullet? So I think it's, it is, it is really important to get multiple folks. It's just, you were saying earlier, but getting multiple voices in there, multiple perspectives, multiple people reviewing the materials, but then also in the interview itself. And that's where you, you hopefully get in front because you do not want to make a mishire and you also have to gamble a little bit. This is the other thing that the only, actually, I'd be curious to hear what you take of this. Or Adam, did you, I mean, one thing you will hear at startups is like, no, no, we're going to hire fast and fire fast. Yeah. And the, I call bullshit on that. Yeah. I've never been at a company that was actually good at firing people who needed to be firing, fired like on time. Like, and I think, and you started to learn that and you just became more conservative in the hiring process. Yeah. And Adam, also, would you want to be at a company? It's like, you know what? This company is amazing at firing core competency. No, it's work. They're amazing. They're absolutely amazing. And like these people disappear off the face of the planet and never see them again. I don't even know how it happens. Um, cause each fire like that should be regarded as a mistake, as a failure, not just like, Oh, we took a gamble and we're a gambling company and we're making you an offer. You know, you might, or might not be here in six months. Like nobody wants to sign up for that. Everyone wants to hear that you have total conviction and that there's going to be a reciprocal commitment. You know, any successful companies say that. Yeah. So this is something that, you know, especially those that, you know, one of the things that, you know, I, I so love the way you kind of democratize the inside of companies for younger engineers in terms of like, they can see, cause you're kind of like that voice of the more experienced engineer and the hiring manager. And, you know, especially younger folks, if you hear someone say, we're going to hire fast and fire fast, and that feels wrong to you, you're right. And they're wrong. So just what, you know, give you the confidence that like, Hey, I, is there something we can do to like, to, to, to de-risk this decision and not just like hire recklessly. Um, the more, the more insidious version of that is, you know, I think that people think if we haven't made some mistakes, if we're not making mistakes, then we're being too conservative, right? So the way that this manifests is saying, Hey, look, we haven't been firing anyone. That means we're being too restrictive. We're moving too slowly. We're interviewing too much, like too, too rigorously or something. So let's go, go, go. So that just, you know, that's come up from time to time. Can you imagine being like, you know what, Bob, you're right. We're not hiring fast enough. We're not firing fast enough. That's no, no, no, no, no, no, we're not, we're not, we're not hiring. Like we're not, we haven't fired anyone. So we must be being too conservative. And I think let me ask you, you're now 62 people. Uh, how many people did you have to part ways with after, you know, like they went through the process and like in the first couple, but basically a hire that didn't work out, there was a mishire. I mean, effectively zero. I mean, I, I'm not going to say, you know, we obviously don't want to, this is where, um, you know, we don't actually have any, an HR department, I guess we're all kind of the HR departments. This is where the HR department grabbed the mic away from me. Um, the, but we have not had, uh, we, I mean, there have been people who've worked at oxide, no longer work at oxide, but it's, but, but, but it is a very small number and it's folks that have self-selected them. So, uh, and the follow-up question I have is like, you are a startup, right? You're, you're, you're, you're not, you don't have the brand necessarily, you know, right now, like you're, I think suddenly now that you built the general availability, your, your status will weapon, more people want to come here. But when you're a startup, I think the conventional wisdom is as a startup, you are forced to gamble on people every now and then. So you cannot be that certain. So I, I would almost like call bullshit on like you make any hires. Obviously now I understand your process of how you did it, but are you, are you not afraid that then you're not taking any risk or are we able to kind of mitigate the risk because you're kind of, you know, you, you, you are doing what most start as a way they take risk is like, they talk to people, it's one way they skip the single and then they drop them in and see how they might perform. But I feel like you kind of, yeah. So I think a lot of stars won't, when I'm trying to figure out like, what is this going to, but I think the big disconnect is there's not the other way around. Like you're actually giving people an opportunity to see what it's like, and you're trying to observe them in a little bit of like what it would be. I'm still surprised up how I'm just a little conflicted on the fact that like as a startup, it is very unusual to, it is unusual. Wow. Well, okay. So, so a couple of things, one, it wasn't true for all. So we, um, we're, I mean, in part because, you know, we've got some, as my kids say, I'm nerd famous, not actual famous, but nerd famous, uh, and you know, you're also nerd famous, I think. I think we can also, I think, I think I'm among my, my nerd famous kindred spirits here, Adam. I think you've been, um, assuming that the American hockey league does not eat your Twitter login, which is like not real clear like that their response to you felt like a little bit like ha ha only serious. So I, anyway, I wasn't sure. Yeah, the, um, but American hockey league, you listen to this. I don't love it. That's very famous. He's famous for the Leventhal conundrum, if nothing else, um, the, um, as everyone on Google is a Leventhal conundrum. Um, you know, I think that we were able to use some of that to get for software folks in particular, able to attract software folks to the company. Um, I do think as a startup, you need to figure out like, how do I, how do I attract the right folks? Um, one of the things that I actually figured out before we wanted to do a computer company, we knew we wanted to do something in rust. And I remember being, I remember being in Steve's office being like, I am falling in love with rust. We will, whatever we do, we will do it in rust. And that will allow us to hire people because we will, there'll be people who will be attracted to the company because there are going to be. And I, I mean, I, I think actually this has not happened as much. Adam, you can correct me if I'm wrong. There was a, an era of the company where people were like, I want to work for oxide because you're doing rust. I want to do rust and everyone else is doing the rust is in crypto. I don't want to work in crypto and I want to do rust. And that's basically like, it's like you. And I guess like discord, ironically enough, I mean, they're like a small handful of companies. And, um, the, so I think that we, you know, we use that as a differentiator. Um, but we struggled on, on, uh, double E's in particular. Um, and you know, we were, because that's not where the network is and you know, we, um, you know, I think what you've got to go do is like kind of brainstorm as a team. And we were brainstorming as a team, like how can we get, and I remember vividly and those folks that were in this conversation will also remember this vividly. We're like, how do we get more people? How do we get outside of our networks? How do we get more people kind of in, we're just not finding enough people. Yeah. Software folks. Yes. But these other like roles, it's, it's, it's really hard. And you know, I, I, and you know, Sean's in the chat and can disagree if I'm wrong here, but it's my recollection that Sean was like, Hey, you know what? When I talked to friends about oxide, I talked about how important values are and we're like, yeah, it's bullshit. Whatever. It's like every company's yours. And I'm like, no, no, no. And I kind of explain it and, but I find that I'm not really able to explain the company until I talk about the compensation. Because up until that moment, we had not, we not talked publicly about the compensation and it was something that we kind of would reveal to people in the process. Um, and I was like, okay, well should I write like a blog entry about, I could, I could like, we could publicize it. And I just remember this was one of these moments that, that remote work has given us where thanks to remote work, you can have like much more body language in the room. And when you've got an idea, that's like a really like a good idea or bad idea, you can see it much more quickly. Cause you know, everyone and everyone is like, yes, yes, you should, we absolutely should write a blog entry. And I was thinking like, God, all right, I need to write this thing carefully because I'm going to, you know, I, I just know that the hacker news comments and I like say like, Oh, the, Oh, absolutely. And you know, the, and it's funny because this blog entry has been on hacker and is a bunch and it's like some of the threads have been really good and some of the threads have been absolutely terrible, but no, my absolute worst fears, but I actually designed, wrote that blog and thanks to everyone at oxide, a lot of review on it, a lot of comments on it and really tried to make that thing robust with respect to some of the, the, the arguments that people would have against it. But the, uh, this is one of these things that we kind of threw out there. I mean, I didn't, you know, I wanted to Claire, I was, you know, I was being transparent. It was kind of, you know, in accordance with our values anyway, that was, as it turns out, that was a really pivotal moment for the company because it, that was in March of 2021 and we were really, really struggling on the double E side. We had poor RFK, thank you for, we had a, you know, RFK, you know, audience background is a double E, but there were, we were realizing that like we need to ramp here. We don't have a, we need to get way out of network for it. And it was that blog entry all of a sudden there's a huge amount of interest, top of hacker news, a lot of interest. And out of that came some of our seminal double E hires came out of that blog entry and, um, and you know, Nathaniel applied and, and you know, materials were just extraordinary. And then when Nathaniel came here, that Eric came here also from general electric and the, you know, I remember talking to Eric and, uh, about oxide and he was like, frankly, I was going to see what you guys did with Nathaniel because if you didn't hire Nathaniel, I didn't want to work there anyway. If you didn't hire Nathaniel, like, I don't know, maybe you had a story. So, um, you know, we were, um, by the way, I will only go in a Siemens CT scanner for the rest of my life because I'm worried that the, the gods are going to have me die in a GE CT scanner for having taken, uh, such terrific folks. Aaron as well coming from GE medical. Um, I've said this before, but I'd say it again, like GE medical, if you don't want to lose your employees, like manage them better, you know, I mean, come on, just like super interesting technical problems, but super terrible management. Um, I don't think that's a state secret. Um, the, I, the GE folks did have me read. I just have you read lights out, Adam. No, they're like, you need to read lights out. I did read lights out. You're just like, okay. Yeah. That's like basically stomach churning. Okay. Yeah. I do know that's, that's very bad. Um, but that was a really pivotal moment for us. It's so interesting how constraints shape your company culture. Cause it sounds like, you know, if you, if you had like a, you know, a brand, if you will, within E double E's, which, which you had with the software engineers, maybe you would have not needed to, that's who knows. That's right. That's right. But I, I, and who knows, honestly, it hadn't been for the pandemic. Who knows? I mean, it's like all of these things and that the, all these things began to kind of positively reinforce. And, but that was really, really important too, because I think you're making a very important point. And, you know, Francois made a very important point in kind of replying to the tweet about like, this only works because you have a lot of people that are interested in working for the company. And yep, that's true. And the, um, the, that's true. And it can be hard to, to, uh, that's hard. And you've got to brainstorm how to do that. And it's, you know, Aaron Levy said this from box that like, when you've got fewer than 10 people, it feels like people are just, it just feels extremely risky. And then you get that kind of magic number of 10. It's like, oh, this is stable. Like, no, no, actually it was like just as risky. In fact, it's actually riskier than it was two hires ago because our burn rates got up. Um, but I know that, uh, I know you've got a stop coming up here. Um, and I know, um, Adam has got a, uh, I feel like hiring is one of the things, Adam, that we could go on for probably several hours on. I mean, like my topics around here, you know, the other thing that's demanding my attention tonight is college applications. And someone commented that the oxide process feels even more rigorous than the college application process. I will say fact-checked absolutely true. And we should think about a common app, you know, using feel free to feel free to grab the oxide application process and use it wherever you want. That is a great idea. Actually, no, seriously, I think I love it because I know, I mean, like these portfolio questions I feel could be a common app. I mean, like, I think like if, if, if other companies ask like work that you're proud of and an analysis sample and so on, it's like you, yeah, cut and paste it and put it somewhere else. It's like, it's not, you're not doing it for oxide. You're doing it for yourself. That's a great idea. There we go. We actually have, uh, some, some friends who are using that at their company, which is great to see. That's great. And you know, I, yeah, that's actually not, that's a very important point is that if you're feeling like, oh man, I really like want to take that idea, but I don't want to just take it. It's like, no, no, please take it. Like, this is not what we, everyone can have a great hiring process. We do not feel like I really like how like your hiring process is creating value for the job app, like whoever applies and goes through the process, I think that that's a hugely positive. So like, yeah, if, if more companies start to use that, that will be great. I don't think, you know, it's, it's hard to influence that. And we know that some companies are not going to change as easily, but. I think as a, if start a founder and listening, it is just worth paying attention to, I mean, I think, you know, my takeaway is like, yes, you have managed to, uh, generate a lot of excitement, a lot of interest. And by the way, every startup should do that, like, right. If you cannot do that, you're going to be left with, with worse errors. So, and, and people shouldn't be excited to work at your company. If they're not either, you're not doing something exciting or you're not talking about it or you're missing something, but you should figure it out. But once, once, once you have that, like you, then I feel like to me, this discussion kind of took away one of these, like, I guess, like things that I thought was a truth, which is as a startup, you need to take risks on people and eventually you'll have to fire people, you kind of prove that you managed to grow until now that like, this has not been true. You know what you said? Things that should not scale, but they have, it feels like this is one of them. Yes. Yeah, definitely. If you've been able to, other people should be able to do it, but you put in so much damn thought into this whole process and made it, you know, like. You put some constraints with the writing, et cetera, which is just honestly uncomfortable to do. And then it's easier to just, you know, like have a conversation, easier to hire a friend as a person and skip the process. And then, you know, like hire a number 10 comes in like that as well. It's just easier. So I feel like if you take the easy path, it might come to bite you later. It absolutely is going to come to bite you. I think that's absolutely right. And I think, you know, Lori in the chat said, actually, I think startups should not be gambling on high. So startups should be gambling less on hires. And I think that's right. I think in the challenges when you're, especially when you're really small, how do we get these folks over the line when there's so much risk and that's, you know, that's why we're super grateful to those early folks, to Adam and Arian and Josh and Robert, because they, and you know, all Patrick, all those folks that came in when, when it was so risky. And I mean, it still is risky, but, but it really, I'm very, very grateful to those folks. And you need to, it is, it's a challenge to, to not take a gamble and to find the right folks when you are feeling such urgency from your board and so on. And, you know, as a founder, that's like, that's, that's what you got to manage. Right. Yeah. And Brian, as we wrap up, just one more thought I want to share, because I think there's a lot about the process that I really like in my, my lingering fear is that there are a lot of folks who, that it demands a bunch of vulnerability. You know, I felt a lot of vulnerability sending in that application. And I think for folks in the industry who have not necessarily been treated well, I think it might be hard to, to feel exposed and to, to have that kind of moment of vulnerability in writing. And I'm really glad we did this episode because I hope it, if people are considering applying and have heard this, they know that we regard these, we take these applications extremely seriously. We read them seriously. We read them with empathy and we respect the people who are pouring out their, their souls to us. So, you know, we need to earn everyone's trust. We need to show that we can be better maybe than the industry at large in terms of respecting folks. I think that we are better, but encourage you to apply, you know, if you're, if you're thinking about it, but worried about who's reading it. Absolutely. I did that. That's, that's a great note, Adam. Very, very important. And Greg, I do want to just, as we close here, I understand that your book is, is your book coming out? Is it? So I can say it's going to come out tomorrow morning, but, but if, if you're searching on Amazon for the software insurance guidebook, it's now appeared. But so it is available for purchase now. It actually, Amazon has interesting where the certain markets get live, like a few days in delay in the U S it's been on sale since actually Saturday, but there's 12 markets in the Netherlands has not been on there. And I didn't want to announce until all you can buy it on all markets. And now the poll and everything is else out there. So it's actually, it just went live and, uh, it's, it's, it's, it's, it's an interesting book because I I've been, I've been writing, this is the book that I've been wanting to write while I was an injury manager at, at Uber. Uh, and I ended up writing it for four years. Uh, so it's, it kind of like feels like what a baby times, like, well, I've obviously like, um, I haven't had a baby, but, but the length has been long. So. Uh, the, in this, the software engineer's guidebook, navigating senior tech-related staff, engineer positions at tech companies and startups. Is that right? This is, I started to write this book because I was an injury manager at Uber. And my first, I had my skip by my first like manager and I had a skip level. Um, discussion. And I just felt like, Oh man, if only I had time to mentor this, this guy, but it's now have a manager between me. I'm like, it would be so nice to just have a book that I could give this person. And I knew where I had a really good run. I started with like eight people on my team, all, all they got promoted. Uh, I, I, I, I learned a lot of things, uh, as I grew and I, I lacked a lot of guidance, so I just put the stuff that I thought would be good to know initially. I wanted to make it more of a career book, but, uh, as, as it grew it, I just wanted to capture, like, what does it mean to be a great software engineer in the industry, thinking about startups or larger tech companies, both the hard skills, coding, debugging, the tools that's that, that you just need to need to know about these days. It's like, yeah. And then some more advanced of like post-commitment code reviews. Like, yeah, sometimes you should just do that. Don't do code reviews. Do it later. Uh, and then all, all, all the ways, like some of the concepts that like, you might not necessarily like know when you enter an issue at P95, P50, what, why yeah, liability and some of the practices that the larger teams do. And then some of the soft skills, which is like, you know, like you need to start to understand the business. So, uh, it's, it's kind of like a lot of it is like my experience here, the little bit towards the bigger companies, trying to hand that wisdom down to the kind of the next generation. Pretty much. I just felt there wasn't there. And it's just been so long to put it, because I feel most books either focus on the soft skills or the hard and I try to combine the two of them. Well, I can see why that would take a while to write. So it did take, but I'm just happy that it's out. I've been writing it so long that I kind of lost the. You know, when you do something so long, you're not sure if it's going to work out or not. I am familiar with things like this. Yes. Ask me about machines that, that, that we're not having a hard time coming out of reset and it was a cartoonist, um, um, Manu Coronet, who wrote this really famous drawing about the organizational structure of Microsoft and guns. He told me that he writes comics for so long. He's not sure if it's going to be funny. I wrote this book so long that I'm now not sure if it's going to be any good, but, but, but the people who reviewed it, they said it's amazing. So, you know, we'll see, but, but thanks for asking. So like, that's great. Well, I know that for listeners of this podcast, um, I mean, you're gay. You, you definitely, uh, I think like us, like really trying to, to lift people up and, and pass on what, you know, to, to kind of the, the next generation, and I know people are going to enjoy reading and I'm looking forward to getting my own copies. Um, and I will have to have you, you'll have to do a, an addendum on hiring, uh, written materials and hiring in the second edition. Exactly. But yeah, it was awesome to hear. And I'm just going to let like wrap up by just summarizing it. Like, you know, I came into the office, I could, you know, most listeners are not into the office, but it was just like, I started with this, but the energy is just something else. And like, it's, it's, it's really special to both see the server rack that you have to hear it, the, to feel the airflow, which is different. And it's to see the different form factors. I I've seen some, some of the more traditional racks, of course, and the cables and the lack of it and how you got around it. And like, I talked with Ari, your founding electrical engineer, like the, the amount of challenges that you solved is just mind blowing. I'm going to, uh, aim to like summarize some of that. Cause it's just so darn fascinating. Uh, it's like, I, I, I feel kind of like, you know, being taken back in time to like the, when computing was just starting, cause I feel you're doing something like this, it is truly inspiring. And, uh, I'm, I'm like, you know, having seen what you've built, uh, especially under a pandemic and being able to do partially remotely as well is just outstanding. So like, just hands down and keep up the great work. Oh, thank you so much. Really appreciate that. Really glad that you, thanks for coming by and then glad you could, uh, be an in-studio guest here on city here in the, uh, in what we call the litter box. So thank you very much, Greg, Adam. Thank you. As always, this is a, and thanks for everyone in the chat. This was a, it's a lively one. Um, and I know we'll, um, I'm sure we'll be doing a sequel to this one. I think at some point in the future, for sure. All right. Thanks everyone. See you next time. "
  },
  "6dc4f578-f900-4b35-b69e-d7928ac4388e": {
   "Title": "Fork in the road for Terraform?",
   "Description": "\u003cp\u003eOn August 10th, HashiCorp made the controversial decision to re-license some of the popular, formerly-open source project under the Business Source License (BUSL). Bryan and Adam spoke with founders of the OpenTF project, an effort to keep Terraform operating in the open.\u003c/p\u003e\u003cp\u003eIn addition to \u003ca href=\"https://mastodon.social/@bcantrill\"\u003eBryan Cantrill\u003c/a\u003e and \u003ca href=\"https://mastodon.social/@ahl\"\u003eAdam Leventhal\u003c/a\u003e, speakers on August 21st included \u003ca href=\"https://mastodon.social/@OhMyGoshJosh\"\u003eJosh Padnick\u003c/a\u003e, \u003ca href=\"https://mastodon.social/@orbitz\"\u003eMalcolm Matalka\u003c/a\u003e, and Cory O'Daniel.\u003c/p\u003e\u003cp\u003eOur condolences to the friends, family, and loved ones of \u003ca href=\"https://nivenly.org/blog/2023/08/19/an-announcement-regarding-kris-n%C3%B3va/\"\u003eKris Nóva\u003c/a\u003e\u003c/p\u003e\u003cp\u003eOminous figure squeezing a fish that is vomiting gold coins\u003c/p\u003e\u003cp\u003eSome of the topics we hit on, in the order that we hit them:\u003c/p\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://opentf.org/\"\u003eOpenTF\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.hashicorp.com/blog/hashicorp-adopts-business-source-license\"\u003eHashiCorp BUSL announcement\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.hashicorp.com/license-faq\"\u003eHashiCorp BUSL FAQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://www.hashicorp.com/blog/hashicorp-adopts-business-source-license?wvideo=rtbjy79z3y\"\u003eSqueezefish \"Interview\"\u003c/a\u003e (\u003ca href=\"https://mastodon.social/@ahl/110934936805378414\"\u003eimage\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.massdriver.cloud/posts/the-changing-face-of-open-source/\"\u003eCory's blog post\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/cncf/foundation/issues/617\"\u003eCNCF issue for tracking Hashicorp license change\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003eIf we got something wrong or missed something, please file a PR! Our next show will likely be on Monday at 5p Pacific Time on our Discord server; stay tuned to our Mastodon feeds for details, or \u003ca href=\"https://sesh.fyi/api/calendar/v2/iMdFbuFRupMwuTiwvXswNU.ics\"\u003esubscribe to this calendar\u003c/a\u003e. We'd love to have you join us, as we always love to hear from new speakers!\u003c/p\u003e",
   "Link": "https://share.transistor.fm/s/68ec7c75",
   "Filename": "6dc4f578-f900-4b35-b69e-d7928ac4388e.mp3",
   "GUID": "6dc4f578-f900-4b35-b69e-d7928ac4388e",
   "Published": "Mon, 21 Aug 2023 17:00:00 -0700",
   "Transcript": "I'm not in the winner box, although I am kind of delighting at someone, which is to say most people who don't have context for that question. No, no, no, no, no. We don't provide context. We don't provide any context. I just want to, for the record, in terms of not providing context, so I listened to last week's podcast because I wasn't able to attend a listen last night, and I did really enjoy your shout out to the light cone militia. That was very subtle and appreciated. Listen, you got to have the callbacks to previous episodes. Absolutely. So, hey, speaking of previous episodes, just a really sad note that we, at the top here, for those that did not see, Chris Nova, who was a guest on the podcast last year and a great beloved technologist, died in a climbing accident last week, and really gutted to see that news yesterday. I think that everyone was really in shock. Chris is someone who had a real, especially Chris would have loved this episode, right? I mean, this is right up her alley in a lot of ways in terms of infrastructure as code and DevOps and a real light in the industry. Adam, I re-listened to that episode yesterday. I just wanted to re-hear her in her own voice and really was reminded again what a great presence she was and really tragic that she was taken from us so soon. That was a very sad note over the weekend, and our hearts obviously go out to Chris's family and loved ones who I know are devastated by the loss. So, Chris, you will live on in our hearts for sure, but we miss you today. Absolutely. So, and then, Adam, you mentioned that you were listening to last week's episode. Yes. Where, first of all, had you heard Fred Brooks's voice? No, I hadn't. It was delightful not only to hear his voice, but to hear your impersonation of him, which was very well crafted. My foghorn leghorn impersonation of Fred Brooks, who I was just like, I just had not heard his voice before the podcast. I do want to give an update on that, that the Silver Bullet was announced at 10.59 a.m. on Tuesday, and I feel pretty good about my prediction. Namely, there's going to be technical depth, and it is not going to be the biggest paradigm shift in software development in the last 30 years. So, interesting stuff there for sure. But I think we, I feel safe with the, you know, it's a little gutsy to report, to record the podcast on Monday, for a Tuesday announcement. Really calling your shot, exactly. I mean, you could have just waited 12 hours or something, but yeah. And did you have any context for anything that was going on for you, or did you, had you seen any of that? I had just barely enough context, because I had seen the proclamations of 100xitude, so I did have enough context for the sub-podcast. But I have not caught up on the big announcement, so glad that there is some technical depth, but also not surprised to hear your report that it's not a Silver Bullet. Not a Silver Bullet. So Fred Brooks can be assured from beyond the grave there that he's still, does not need to, we don't need to update that essay quite yet. And then another thing you may have missed is, which gets us kind of on point today, is the Hashi announcement. When was that? That was... That was, well, I remember it well, because the day that COVID infected our house, so it was August 10th, so 11 days ago, I guess. So just saw that kind of popping through. And had you, but you were, obviously had other things to focus on. Yeah, but I did, was lucid enough to kind of take a look through that, and I was really disappointed. I mean, I don't know, I don't know about you, but I really think of, hold Hashi in a lot of respect. And so was, and I have used and contributed to Hashi projects, so really disappointed to see them going the BSL route, which is terrible. Are we going to distinguish the BSL route by even like calling it the BSL? I just feel like it's, this is a, I mean, this is not open source. It's not open source. And I mean, I'm not going to say to their credit, because not to their credit, but they don't refer to BSL as open source. They have in their FAQ, a bunch of euphemisms that use the word source and availability and things like that, but don't kind of paint it as a open source-ish choice. They merely like imply that there is some relationship. FAQ is bad. FAQ is really bad. I mean, just this idea that we, so we should describe what happened. And then by way of introducing our guests here, we've got Josh and Malcolm here. And actually, maybe actually we'll turn to them and have, Josh, do you want to describe what kind of, what they announced? And I'd actually be curious if you had any kind of heads up on this before they announced it. Sure. So yeah, first, it's really great to be here. This is a really cool podcast. So thanks so much for having me. So as far as what they announced, it really, the key summary was that all of their major open source projects used to be MPL licensed. And it's been that way for anywhere from five to nine years, depending on the project. And about two weeks ago, they made the fateful decision to change from that open source MPL license to the so-called BSL or business source license. And that's not a really well-known license. So I'm the co-founder and chief product officer at Gruntwork, and we do a lot of work with Terraformer. We were not given any kind of heads up. And so it was just one of those things that was shared in our company Slack the day it came out. So you had no heads up on this? Yeah. Yeah. No heads up. I don't know why I'm acting surprised because so much else about this has been mishandled, but that just seems, and that seems, because I mean, this is something you've built a business around in terms of Terraform. Is that the kind of the foundation of what you're doing? It sounds like. Yeah. Yeah. So Gruntwork helps companies with what we call DevOps foundations. And we've always thought of ourselves as agnostic to the technologies. We just wanted to choose the best technology, but we always thought Terraform was the best tool for the job. And so we wound up building up hundreds of thousands of lines of code of commercial grade modules, all written in Terraform, along with a bunch of tools like CACB and that use Terraform and things like that. So yeah, it's very much a layer in our stack. And it was kind of shocking to see that a layer that we had just assumed was open source and would always be open source was not. One of the jokes in our Slack internally was, you know, we said in life, there are three certainties, death, taxes, and Terraform will always be open source. And so that turned out to be wrong. I honestly thought you were going to say death, taxes, and an update for our community. I mean, you must have just been feeling the color drain out of you reading that. I mean, that must have been just shocking then. I mean, certainly, I mean, like you, I've always viewed, and I love their choice of the MPLV2. We all are also big MPL fans, and I just did not see this coming at all. Yeah, that must have been really gutting to see. And so can I ask you, because I think Adam and I are trying to figure this out. Adam was like, look, I know, like I was sick. So I think I missed the day that they announced the rationalization for this. I think that I. Well, just we've seen this kind of thing before, with Confluent, we've seen it with Mongo, where it was kind of clear that they felt like they were getting a raw deal from cloud providers. And they, I don't know, misguidedly, but felt like they could provide some protections using this kind of legal mechanism. And it just wasn't clear at all to me how she was worried about. Okay. So can you answer that question, please? Because I have the same question. Like, who is this? Okay, like, look, we talked about who are we? Yes, we had an episode that was a sub tweet. Who are we talking about here? Who's the target of this? Yeah. So what's funny is those of us who thought we might be targeted by it kind of had no doubt. So it is interesting to hear the other perspective. So there's a number of alternatives to some of the commercial Terraform products out there. Just to name the most popular ones. There's Terrateam, who's the co-founder of whom is Malcolm, who's on the line with us here. M0, Scalar, Spacelift. And then there are a number of others. And all of them essentially compete with Terraform Cloud. And so I think the narrative internally at HashiCorp was something to the effect of, hey, we, HashiCorp, are funding all the development for Terraform, but look at all these providers out there competing with us earning a bunch of money. And some of them are venture backed, and they've raised multiple rounds of money. And I'm guessing that that was not seen as a positive sign inside of HashiCorp. And if you look at some of the FAQ language as well, around how they define embedded, it's sort of oddly precise, in my opinion, to target really all these like Terraform for CICD type vendors. Huh. So the target is all of them? Yeah. So what's a little weird about this line of questioning is, so a bunch of us in this named group, we all got together. And as I think you're working up to, yeah, we ultimately formed a consortium. But one of the kind of philosophical tenets of that consortium is we are not anti-HashiCorp. In fact, we're all very grateful for what HashiCorp created. I mean, Terraform is an amazing technology, and by most measures, they're an amazing company. So it's really important to all of us not to be anti-HashiCorp just because they made a decision that happens not to meet our needs or that we disagree with as members of the Terraform community. But yeah, ultimately, there are some implications of that. And it's worth talking through what those are, because they're... Yeah. I mean, and I think, first of all, I should say that I love the spirit of the OpenTF effort in terms of really trying to guide Hashi back to kind of the right decision here. And also totally appreciate just the spirit by which... Look, we are grateful for this. There's this narrative that we're not seeking to kind of take advantage of the development of others. That said, I just think it's very strange to me that Hashi would kind of go after this was effectively a startup ecosystem, which... I mean, generally, startups should not go after other startups. It's kind of one of those... When you see a startup spending time on other startups, it's like, look, that's wrong. You should be going after incumbents. And I kind of thought there might be some incumbent on... So do you think Terraform, and again, not to kind of push you out of your comfort zone here, but was Terraform the motivation? Because I kind of assumed that Vault would have been the motivation. Great question. I'm not as familiar with the Vault ecosystem. And then it felt like for those of us in the Terraform ecosystem, there were these obviously thriving companies that maybe HashiCorp felt were counter to its goals for some reason, but I'm just not familiar with the other ecosystem. But even so, the classic example they always give in the FAQ is always like, you can't do Vault as a service. And I didn't know if that was like a straw man example, or if there really are like Vault as a service offerings that companies have been offering without a partnership with HashiCorp that they've been trying to crack down on. So as far as I have seen, it is focused on Terraform, but I also feel like I'm not personally aware nearly as much of the other systems that they plan compared to the Terraform one. Yeah, I'm not... I don't know of a managed Vault outside of HashiCorp, but I do know that other secrets management companies were concerned, particularly those that wrote their own secrets management software, but they use Terraform to manage their infrastructure. Like now they're a competitor to HashiCorp, can they use Terraform? And like this was an early concern, but this is another one of those things that's been amended in the FAQ. So if you're not managing that tool or making a managed offering of that tool, then you're not considered in a violation of the Boostful license. So I missed the amendment to the FAQ. So what was their amendment? Yeah, they've added a number of amendments, but there was one the other day that was added that said that if you use a Hashi tool... Let me look up what number it is real quick. Sorry, I should have these all memorized by now. I've been at this page about 7,000 times. Yeah, Chrome's recommending it to me constantly. Thanks, Chrome. I hadn't seen this. Thank you. Give me one second here. I can't remember. Hopefully that language is going to be in the license itself. Again, I know my perspective on this is maybe slightly sharper than the rest of yours, but I really think that there's a lot, whether it's deliberate or not, there's a huge amount of ambiguity about... I mean, these are products that are kind of like span the stack, I mean, deliberately, really. And so there's a bunch of questions about who competes with what. The language is pretty vague. And Adam, we had this issue with Cockroach, where we are effectively using BSL code from Cockroach in Oxide. And I'm starting to remember if the more specific language came before or after our use of Cockroach, but Cockroach's language is really very, very specific about... Because we had the question of like, hey, we are using this as the foundation of the Oxide control plane. Are we going to be violating the BSL? Or I believe Josh, you called it the so-called BSL, which I insist that we all call it the so-called BSL. But to Cockroach's credit, they were very explicit about what constitutes databases as a service. And in particular, if a user cannot create a schema or modify a schema, it does not... They consider it to be non-competitive. It's like, okay, great. That's very specific and technical. That's not an entry in a fact. That's like in the license. It's very concrete. I think we don't really have that here, but correct me if that's incorrect. You know, I'd love to speak to that actually, because I've done a lot of thinking about their license. So just to be clear, the way that they structure their license, they use this business source license, which by the way, sometimes people say BSL because that's the acronym for business source license. And sometimes people like Corey, just a moment ago, say BUSL because that's the official SPDX short handle for the business source license. So just in case anyone's a nerd on that kind of stuff. I also say BUSL because it sounds gross and I want people to realize. I like it. I just got out of abuser relationship. I think I met a BUSL every morning. I never appreciate all of these puns. Well, yeah. So I'm just going to adopt the BUSL. As a standard license, it just says absolutely no production usage is allowed, but you can do anything you want for non-production usage. And then the way it's structured is they have this thing called an additional use grant. And if you actually look at the license text, it's like this header that they have there. It's almost like metadata to the text. And the one additional use grant that they give you is they say you can use it in production as long as A, you're not a competitor. And B, if you are a competitor, you don't embed Terraform or host Terraform. And so to go back to your original point, Brian, one of the major issues with that is that it's vague. What does it mean to be a competitor? What does it mean to embed? And what does it mean to host? And to Hushcorp's credit, they have addressed that, but kind of. The first issue I have is that they address it in the FAQ. And an FAQ is not a license. And so now you're left to wonder as an end user, like, OK, so I read the license and it's unclear. So I go to the FAQ. The FAQ adds additional clarity, but is that binding? And can that change? So it's vague. And not only that, but even the definitions that they give in the FAQ, it's like more words, but it still has ambiguity. They've made it clear that it can change, right? They just changed it. They just changed the license. So they've made it clear the license for the software is what they feel like. The FAQs, to be clear, when you go to the FAQs, each of the FAQs has a last, each one has a last updated date. And the embedded one was updated today. So there's a more clear definition that was added today of what embedded means. By the way, that one we were talking about earlier was 0.26, to question 26, if I'm not mistaken. So this is- If I may, part of the reason this is so disappointing is that so much of Terraform, for example, Terraform's success, to me at least, has been on the back of its openness. And people may, I'm sure the folks who have embedded Terraform into their products, who are represented here, made that choice in part because of its openness. You know, when I started using Terraform years and years ago, I wouldn't have used it if it was some proprietary software, or even if it was some busel software. It was because of its openness. So it's so disappointing to have the latter pulled up. You know, Adam, you're really right. And I think, because I feel, and this is part of the reason why open source became so important for infrastructure software, is that you got investment protection. And one of the things that, you know, folks don't necessarily remember from the bad old days of proprietary software, but if you've got proprietary software now, that remains, you will see bad behavior from rent-seeking companies where you will build a product based on a proprietary product, and now when you go to re-up your license, or suddenly you've lost all of your leverage. And that investment protection was really, really important. I mean, Adam, part of the reason that you'd had that disposition around Terraform was like, hey, I'm gonna build some infrastructure that's gonna stick around for a while, and it's kind of my responsibility to the future to make sure that we're building on something where they don't have to worry about this. And I really think, you know, I gave this talk a decade ago on corporate open source anti-patterns, and I said, actually, that I would come back in 2022 to talk about, you know, the new mistakes that we had made, and I really feel that first among them is re-licensing. I think that there is a social contract here that is being set aside, and I think especially for those folks that contributed, and Adam, you mentioned you contributed at some point to Terraform. I'm sure Josh, you, Malcolm, and Corey, and you've got certainly folks who have. Those folks assigned their copyright to HashiCorp, and to me, that assign, because HashiCorp demanded it, and to me, that assignment of copyright bounded that relationship by trust. Like, I am now trusting you to exercise my intent, which is to keep this open source under the MPLV2. I also think- Yeah, go ahead. One reason there's so much talk about Terraform versus Vault or anything like that is Terraform is different in that it benefits from more users. You get more people writing providers, more people writing tools on top of it, whereas Vault and Console, those sort of benefit from enough people to keep the code being developed, but Terraform's really, it's a language. It's a compiler to turn HCL into infrastructure, and I think that's different, and those are more community projects rather than just products. Absolutely, and I do think, and that's why I am, I mean, I think this was a bad idea, poorly implemented, but one of the kind of complexions of poor implementation here is the fact that this was done across this entire very disparate suite, so it's very hard to kind of suss out the intent, and I had kind of assumed, although now I'm really questioning that assumption, that Terraform was kind of collateral damage on the way to going to monetize Alt or to prevent AWS, for example, or a cloud provider from having a Vault-based service, but it kind of sounds like that's not the case, honestly, and which is really, however you cut it, it violates the trust that is so important in open source, and Adam, you kind of said this point earlier about everything they kind of say in the fact is like, well, I'm having some trust issues with you now, so, and Josh, I'm sure you and Malcolm and Corey and the kind of the broader Terraform community, you almost feel like if, at this point, actually were to walk it back, don't you feel that you still would have some trust issues there? I definitely would. I probably have like the spiciest takes out of the group, so take some heartburn medicine. Yeah, Corey, you're definitely the spiciest. I'm sorry. But like the trust, I mean, I wrote a blog post on Friday kind of about this. I spent a lot of time watching some videos of Mitchell and Armand. I don't know them personally, just to be clear. I watched a bunch of videos. I was trying to get like, I mean, I'm a founder of a very early stage company, right? And so I was trying to like get an idea of like what happened, right? And like just trying to make a through line as to like where it went from this team of people that really cared about open source to where we landed. And I don't know if you guys talked about this before I joined, I'm old, so it took me forever to get into Discord, but like there's a fallout that's happening right now. Like CNCF is looking at pulling HashiCorp tools from multiple dev workflows for Container G, Kubernetes Kine, Flux2, Argo project. Like there's a bunch of people that now have busy work, but they're gonna try to pull these tools out and replace them with CNCF equivalents. So there's no issues, right? And so it's like, this has ended up in a very weird place for a company that's so committed to open source. But I think that what's really telling about where HashiCorp is as a company today is like they were committed to open source, sure, but we had the same panic two years ago when they announced they weren't taking PRs anymore because they were understaffed. Does everybody remember that? Hmm, yeah. They stopped taking contributions. They didn't ask for help. They didn't do a call for maintainers. They stopped accepting community is what they did, right? Like that's really what they did. They stopped accepting community. And now in the light of this happening, you see competitors and people in the space come together and offer resources. We're offering them the community they say that they want. But that's the thing that's really weird for me about like their commitment is I feel like they don't have a commitment to open source. I don't think they really care about the community as much as they try to make it out to be. And this boost will change. I think there's something else probably driving it. But like the community is here. Like we want to help. We don't want a fork. We're contributing resources. We're offering things. And HashiCorp isn't accepting them. And that's what we really, I think, want to push for is like getting this to not be a fork and really getting them to come back to where they used to be. And will we be able to trust them from there? Like, I mean, I think if they truly handed it over to a foundation, yeah. But simply a license reversal, reverting a commit isn't going to do it. I think we got to see it land in a foundation's hands. Well, and so, and Corey, I can't judge by the latency in terms of you getting into Discord in terms of your exact age. It's like tree rings in terms of like aging Sunday. Determining the exact vintage. But I don't know if you remember Hudson. And I feel like Hudson has been kind of culturally lost. So Hudson was a ubiquitous platform for CI. And one of the many horrific things that Oracle did, kind of the mechanized Oracle did after the acquisition of Sun was they decided that actually there was, that Hudson, they were going to enforce the trademark of Hudson and it was effectively going to be proprietary. And the community turned on a dime and turned that into Jenkins. And Hudson was, Jenkins was actually, was Hudson for many years. And it was remarkable to me how quickly, just for all the same reasons you're outlining, because there's a real broad grassroots momentum around Jenkins. And I mean, Adam, you remember that, the whole, and it happened very, very quickly. Yeah, we had just started using Hudson and it just, the whole, it was like schooling fish. Everyone turned at the same instant. It was remarkable. And Jenkins like survived and thrived. So I do think that we, I mean, fortunately, Oracle provides a case study for the survival of open source projects after the most mendacious corporate behavior. Thank you, Oracle, I guess. And just in terms of the strength of the community, being able to kind of propel an alternative forward, or, because I think is, you know, another, by the way, another, and this is a great segue into the OpenTF work that you all have kind of brought, come together to form. One potential and maybe even likely outcome here is that OpenTF does have to become a fork, is a fork for some number of months. And Hashi realizes like, actually we want to participate. So how can we, and then, you know, the terms would be very different. It's like, well, this is going to be in a foundation and so on. This is not dissimilar, this happened at a joint where I was, the joint, we were the stewards of Node.js and the community was really fracturing over a bunch of issues. And there was a fork that started there. I, as I told them, it's like, you actually didn't need to fork it to get our attention. But we, you know, I think it, for me, it was eyeopening in terms of how difficult it was going to be for any single company to keep that, to keep what was a pretty fractured community together and a foundation was going to be the right route for Node. The, so I think that the foundation route ultimately, I mean, I'd love to get your all take on this, but it feels like the foundation route has to be the route or this software. And I, and you know, one of the things that I would revisit from my talk 10 years ago, is I was kind of jaundiced about foundations and that was before a lot of this, frankly, abuse of trust. And I, now I kind of feel like actually foundations are, when you've got a broad-based community, you really, it really needs to be in a foundation. Do you want to maybe, in terms of like a segue to OpenTF. So how quickly after this did you, I mean, this sounds like it took everybody by surprise. Everyone was kind of on the back foot. How did you start reaching out to one another? How did you find one another? How did the OpenTF effort start? Yeah, I can comment on that. In my opinion, that was actually one of the most magical things that happened from this. So we've had a number of companies that were either competitors or like they kind of used our stuff and we sort of competed. And these are people maybe spoken to once or never met, but you see online when they post something. All of a sudden within a day of that announcement taking place. So literally by that Friday, we had a Slack community among all of these so-called competitors, where we were all sort of united by a common cause. The word that kept coming to my mind was like fellowship. We were like a fellowship of companies who all were looking to a need for an open source Terraform that we could continue to innovate and build our companies on. And then from there, the idea that we would need to fork, but maybe present Hashi with the opportunity to first revoke, like all of these discussions were happening. We had our own little de facto governance mechanism, like little Slack polls. And we were all commenting on how much fun it was to like be collaborating with all these competitors. So, and to this day, like, I mean, to this day, it was like a week ago. To this day, like, I don't know, it remains one of my most positive like business memories because it's just so fun to go from this kind of like distant competitive mindset to collaborating with a group of people all united in a common cause. And what I was surprised to learn was how many more resources and willingness we all had to contribute to open source than what was actually currently being contributed to Terraform open source. Sorry, I know I'm at risk of rambling, but just to add this one point, I've had a bunch of customer conversations in the last week and a common refrain that I've heard from customers is, yeah, but how could your consortium possibly have the resources to maintain the giant that is Terraform? And I'm always like chuckling at that because, you know, I get it, like the nice branding, the publicly traded company image, the regular blog posts, the regular releases, it looks like there's dozens or hundreds of people working on this tool. And when we did the internal estimation, we estimated that it was a small fraction at HashiCorp that told them people actually working on Terraform open source as the number of people we would be able to marshal as a consortium. So that's, I think, given us all a lot of pause as we think about what the path forward might look like. You know, as you say that, I think back to now like 13 years ago, Brian, when we were kicking off the Illumos project, there was never any thought of like presenting a demand letter to Oracle because we knew that the answer was going to be there. But yeah, but like it felt sort of in some ways daunting. And this is when, you know, Brian, you were a join and I was at Delphix and Garrett was, I think, at Accenta. And there was something very inspiring that what you're describing, Josh, of that moment of kind of becoming this fellowship or collaborating across company borders to get this thing done to like erect this monolith was, it was kind of inspiring. It definitely was. And it was, I mean, it was clarifying, obviously. But it's like, yeah, we're on our own. Like we don't have to, like all of these, it honestly felt like a weight had been lifted where we had been. And, you know, Oracle was on such a speed run of open source malfeasance and it all happened very, very quickly. But the, you know, we were very concerned about how do we accommodate Oracle with now so many Sun folks leaving and we were all part of this big exodus. And one of the things that we, there were lots of things that we did not like about the way that it was being prosecuted internally when it was open. And, you know, people are like, well, you can't have your own operating system. It's like, no, actually we can. It's like, actually, sorry. Who writes the device drivers? It's like, yeah, we write the device. You would not write that as it turns out. Like we actually not agree. Yeah, it turns out like that. I mean, for some more wind in your sails turns out 13 years later, like that experiment is going fine for us. Like we have not died on some mountain of complexity that only a team of 10,000 engineers could take on. So if it's any consolation to your customers is they ask reasonable questions saying, how are you gonna maintain this thing? It's like actually quite well. And I would say that there was so much friction that we had for so long about who, what's important, who does what. And Sun back when it was pre-Oracle, Sun had this outsized influence that was kind of uncontrollable. Like ultimately it wasn't a real community because Sun dominated it too much. And it only became a community when it was kind of forced to become one, really a true community. And so Josh totally get what you're, the vibes of like really kind of coming together and the clarify. And so one thing I would love you all to speak to because it's something that I loved in the, so that you put out the OpenTF manifesto. It was, it obviously came together. It was to come together pretty quickly, it sounds like. The, certainly by the time, and one of your number had actually pinged to me. I was really honored honestly to be pinged being like, hey, would you mind signing this thing? And I'm, I mean, for us, we've got a Terraform provider. So Terraform definitely plays a role for us, but we're nowhere near as kind of at the epicenter as you all are. And honestly was honored to, that we'd love to be able to help out any way we can. Because I really loved all the energy and in particular what I loved. And Josh, maybe you can walk me through kind of when this started happening. As people are signing it, they're also talking about resources that they can actually dedicate to it. And it's like significant. People are talking about dedicating two and three folks this effort. That kind of evolved. How did that start? Yeah, initially there was this realization that we all had that a busel, and a busel, I'm gonna have to put on that to run from now on. Anyway, a busel licensed Terraform was just not a world any of us wanted to live in. And it wasn't just about commercially, like, is this something that we could make commercially viable? It's actually really important to share this. A lot of people have said, well, hey, I'm not a competitor to Hashcorp, this doesn't matter to me. Why should I care? From the perspective of someone who is considered, suppose a competitor to Hashcorp, we realized that, okay, so in order to actually participate in this busel licensed ecosystem, the license is so vague, almost by design, that we can't really operate in compliance with it unless we get Hashcorp's explicit permission. So now in order to operate our business, presumably on an annual basis, we have to approach them on bended knee and ask for permission to continue operating as a business and pray that they don't raise licensing prices on us too much. And- Absolutely, by the way, just to kind of underscore that point, it is so vague that we are not embedding any Hashi products in the Oxide rack. But if we were, we Oxide would feel that it is far too vague because in particular we don't know who's gonna acquire Hashcorp. And take it from Adam and me, the acquirer can really, and it could easily be an Oracle acquisition. It could be a Broadcom acquisition. It could be a Dell acquisition. And those are all companies that could easily say that they compete with Oxide. And I mean, so it's like, Adam, I don't know what you're taking, but I can like, this is like too vague for us, let alone- Not only that, but imagine a diligent customer of ours would say, hey, do you have anything fishy inside that box? Like, well, we do have this Busyl thing. It's like, well, we don't know what that is. We can't accept this product. Like don't bring this into our environment. Like for all I know that, you know, Hashcorp is gonna show up. and demand their extortion money from our customers. It creates too much, way too much risk. Way too much risk. I'm actually glad you brought up that point because that's something that's kind of lost on folks is that having gone through an acquisition from someone who's doing a lot of due diligence with the Samsung on Joyent, and they are, this is, I can't remember what I'm trying to say. So like, we need to do a license audit on all of the node modules that we're using. I'm like, well, this is going to be interesting. And I'm like, and it was actually, it's a huge credit to the node ecosystem that we've, I mean, it was like, it was tens of thousands of modules. It was actually great because we overwhelmed the firm that does open source due diligence. It's like, we cannot do due diligence. We've never seen this much open source. Like we- I love the idea of being like, well, we're out of compliance because we have to send this guy a cup of coffee. I don't know, it was in the license, but otherwise we can't look at that or whatever. They were like, it's going to, it will take us six years and $35 million to do due diligence through all this open source software. And so they go like, all right, we're just going to do a license audit. We're just like, we're going to stop. And they, we did a license audit. And amazingly we had no, I'm like, oh my God, we're going to find an HGPL stowaway that's going to kill this thing. But there was, it was all MIT and BSD and there was not even any GPL or LGPL. It was really clean. And some Apache, it was basically all clean. But man, you hit something like that in an audit from a big potential customer or an acquirer where they are thinking like, look, maybe you can make this decision, but this does not fit my risk appetite as someone with much deeper pockets. And you just like, this is part of the reason that all of you can't adopt this. This is like, no, this is crazily risky. So. Yeah. So funny little side story. We actually just finished our first priced round a few days before this announcement. And we did a full license audit that probably would have tanked our round if this would have happened. We haven't even announced the round because we got so caught up in this initiative. Oh man. Yeah, well, yeah, I mean, God, thank God. I think you got it done. Congratulations on that, obviously, on the raise. And yeah, glad you sold the house before the flood. That's. Hold on, I'm sensitive on that one. I got hit by this tropical storm and it took my roof. Oh man. Oh my gosh, I'm so sorry. No, it's cool. It's a small patch. It'll be fine. That's quite a- But in reading all the Hacker News and Reddit comments on this, so there's a lot of comments saying I'm just a regular Terraform user, why should I care? And I think to what you said, Brian, there's just this endless list of small places where this could trip you up and they're hard to predict. And it does impact you a lot as a regular user. And it's hard to know what will happen in the future, like maybe another license change. The FAQ is apparently binding, but it gets changed every day. So who knows what's going to go in there? Yeah, totally. And I also think that for those folks that are asking that question, like, well, I don't compute with Hashi, like that doesn't really affect me. It's like, it definitely does affect you because the folks that are going to contribute to the community and its vitality, it affects them. And that vitality very much affects you. I mean, you are, that is to say, someone who feels that they're more removed from this. It's like, unless you're like a really active contributor, it is going to affect you. And now the good news is like, you're probably not going to, like when the world moves to OpenTF, you're like, all right, fine, we're doing this now. It's just not going to feel as disruptive because that's where the community is going to go. Yeah. Oh, I'm sorry, I didn't mean to interrupt. I was going to say, there was a lot of debate about what the vision for the fork should be. And the two primary paradigms that we were choosing from were number one, we're essentially just a legal clone of what the kind of Hashi TF fork is doing. Well, I guess they're not a fork. Maybe I'll just call it Hashi TF. And the model there would have been like, we just look at what they release. We make sure not to ever look at the source code and then we just implement it ourselves. But then we realized that, you know, we can actually innovate. Like one of the things that HashiCorp kind of locked down was the only real interface to the Terraform libraries is the CLI interface itself. But they don't expose the libraries in a way that would make them easily usable by tools that were embedding them because that didn't really make sense for their commercial interest, presumably. So with OpenTF, we realized like, wow, if we expose, for example, Terraform apply functionality as a library call, then people can do all kinds of cool things with it. And it really expands the notion of what Terraform could be and how you could use it and becomes a lot more interesting and exciting. I think absolutely. And I would counsel, Adam, I know you'd counsel the same way that like you should not be, you should be looking to your own use cases, your own customers for your own community for what you do, not to Hashi. And I mean, no, we felt this way. We got, I mean, D-Trace too, but especially ZFS, Adam got a real burst of innovation when in particular, because all of the featuring, the feature identification, Adam. Exactly, right. It was really interesting, actually. I was thinking about that example because ZFS prior to, in OpenSolaris, even prior to Olumos, envisioned a straight line of features. It was just version one, two, three, four, five, and each version carried new features with it. And in this kind of diaspora, then we had different versions of ZFS and then OpenZFS that had different features enabled. And before we had seen that, even from inside working on OpenSolaris, we had seen that as sort of a bug. And then in a community, it was really a feature to enable lots of people to go their own ways and do their own experiments and enable their own products and customers without necessarily requiring everyone to move in lockstep on every decision. Yeah, I mean, it was a huge one. I feel like we had a bunch of those, and it was also helpful, honestly, and I imagine that there'll be people like this from Hashi. I mean, I can say that, I mean, I don't think I'm divulging any great confidence when I say there are lots of people in Hashi who are pretty disillusioned with their employer. And I've heard from a lot of folks, gotten a lot of DMs from folks who are, and by the way, the advice, if you are at Hashi, my advice to you would be, this is gonna be a, this is really gonna be very divisive. And you, I mean, Adam, you and I lost relationships permanently over this issue, over the acute disagreement of what the future of the software should be. And there's, there are gonna be, like these disagreements are gonna be pretty sharp, unfortunately, and there's not an easy thing to say about it. And this is, it's really, really divisive. And I wish that there were, try to find a, it's always important that whatever entity you're working with, be it a community or a company, you wanna find one that reflects your values. And I think that there are lots of people at Hashi who are really wondering, what happened to this place? Is this still the place that reflects my values? But I think that, I think that, Josh, sorry, a long way of saying, I think it's almost a lock that you will have some number of people who love Terraform, and that's what brought them to Hashi, who leave Hashi and contribute to an OpenTF with their visions too. And it's like, that's it. Those are people you wanna have in the community, bringing a lot of expertise. Yeah, you know, one of the interesting things that we were thinking about on the OpenTF side was about the philosophical decision that HashiCorp made. And interestingly, the company I represent, FrontWork, we had a sort of parallel philosophical decision. So essentially, the main concern that Hashi had is, from their perspective, they were saying, hey, we're pouring all these resources into Terraform and other people are profiting from it. That's not fair. And so the philosophy comes into how you choose to respond to that. Personally, the philosophy that I endorse is, if you're the creator of an open source project, or you're kind of sitting at the epicenter of it, that's a unique competitive advantage. And it's incumbent on you as the creator of the open source tool or sitting at the epicenter to figure out how to leverage that to make a better product. And that's how you make it work. I think Hashi took the other tack, which was basically to say, okay, we don't like what's happening here. We don't necessarily have confidence that we can compete with the products that we've got. And so we're going to just disable competitors from competing in this ecosystem. What's an interesting add-on to that is, Gruntwork has an open source tool called Terragrunt, which is a thin wrapper around Terraform that is MIT licensed, with, by the way, no plans to change that. But what's interesting is there are companies out there that leverage Gruntwork or leverage Terragrunt in the OpenTF consortium, and they make a bunch of money from it. And we don't see any money from that. But we spend money to create Terragrunt. And we think that's okay because we also get some benefits from creating Terragrunt. And we think we have some unique advantages by being the maintainers. And if we ever want to do more there, then we can try to leverage those benefits and exercise our business muscle and offer a valuable product to our customers. So, yeah. Yeah. Oh, sorry, go ahead. Go ahead, Josh. Sorry, yeah, no, definitely. I was just going to say that I actually, you know, we went through all of this when the open sourcing of the operating system was being contemplated at Sun. And I mean, this is really the beauty of software, because the way I would flip it around is, so you've got someone out there who's using Terragrunt and is selling services on it or what have you. It didn't cost you anything to engage them, right? That's a, those entities have kind of identified themselves like, hey, like we actually, we share values, we share interests, we want to, we're kind of partnering with you. And, you know, too, I think it is reductive to say like, well, they're taking our work and profiting on it. It's like, well, you know, actually, they are incorporating your work into something else that they're selling. But that is also, you didn't have to have, you know, someone, a business development relationship kind of build that. And on the one hand, it's not transactional one way, but it's not transactional the other way either. You didn't have to pay for ads. You didn't have to like, this kind of, this other entity is kind of self-identified. And boy, there's a lot of opportunity now to go figure out what you can go build together. And if there's nothing to build together, it's like, well, it didn't cost you anything anyway. And I think that the big fallacy that I always saw inside the corporate walls is people like, the choice that I actually have is that, that this entity pays me for Terraform or this entity does not pay me for Terraform. And it's like, well, that's actually not the choice you've got. The choice you've got is that, because that entity probably has already, for Adam, all the reasons that you adopt the Terraform, it's probably already decided they're going to adopt open source infrastructure. So it's really your open source infrastructure or someone else's open source infrastructure. And which of those do you want? Because that's actually the choice you're making. And if you, at least if they adopt your open source infrastructure, there's an opportunity to go do something later together. They adopt someone else's, it's like, yeah, you're just out of the conversation. And I feel like that's the fallacy that Hashi is falling prey to, in part because I do feel that like for a generation that simply came up post open source, they don't understand. I mean, God, I want to be like a reread. I don't matter if you'd read it today, but Bill Gates's, an open letter to hobbyists, 1976, looks like it was peeled right from Hashi's fac or vice versa. Like, I don't think that they realize the degree to which you sound like a sniveling Bill Gates in 1976, talking about people pirating their basic. And I think that there's this part of the reason why I think that the reverence for history is so important in the industry, because it's like, you're not the first entity that has kind of struggled with this, but the conclusion you're drawing is not the right conclusion to draw. And now that we, Adam, at what point are we going to talk about the video? Yeah, we got to talk about that video. Question for Josh and Malcolm and Corey. Did you all watch the video? This is a video of, I guess, yeah, I guess being interviewed by a developer advocate there. I couldn't make it all the way through. Yeah, I made it about a quarter of the way through and I just, I lulled myself into closing out the tab. Okay, Josh. Yeah, it was, you know, the problem was it was like a faux conversation. Obviously, a teed-up question. We are here to report something shocking and delightful and open for debate, I feel. That's right. So Brian, you watched it, you sent it over to me and I was watching it and I had the same reaction as the other folks. I actually paused it, got up and took a walk and then got my notebook because I wanted to write down some of the particularly odious things, but then I noticed something, which is that the developer advocate, and I'm not gonna name her, had this wild background and I DMed it over to Brian. And Brian, what was your reaction when I sent you this picture? Okay, like hand on heart. Hand on heart, my reaction was Adam has had Dolly generate an image of formerly open-source company announcing license change and he has Photoshopped in this abstract image. I was just like, damn, he did that quickly. I was just like, and then a part of my brain was like, no, no, wait a minute. He recognized that from the video we watched moments ago. And indeed, so Adam has dropped this into the chat. Like, you've got this kind of like, okay, so someone is saying like, this is a psyop. Okay, so Adam, why don't you talk about your hypothesis? Yes, I think that this dev advocate is staging a quiet rebellion here. So the picture to describe it is a like, sort of blobby, faceless, mysterious, sort of human-ish looking thing. Looks like the offspring of Grimace and Jabba the Hutt. Like the Loch Ness Monster or something. Yes. Holding a goldfish and squeezing out gold coins. The goldfish is vomiting gold, literally vomiting gold. So, I mean, does this person seem, tell me. I love that there are people right now that were like washing their dishes or walking the dog or driving who just like, what the hell, who just pulled over or stopped doing the dishes or stopped walking the dog and are now on their phone being like, I gotta see this. Like this, it surely cannot be what they're describing. And so this is over the right shoulder of the dev advocate who's ostensibly interviewing Armin, the CEO and co-founder. And I don't know, like either she sits there and this has been over her right shoulder for years and years, like the last scene in the usual Suspects or something. Or like the Spanish Prisoner. It's like. Or this is some quiet, brilliant act of rebellion. She's like, okay, I'll interview you, I guess. Let me just change my Zoom background real quick before we do that. Because if you, as you're saying, Brian, it's one step removed to having this blobby entity slicing open a goose and plucking out the golden eggs. And that would be just only slightly more on the nose. I feel it legit would have been subtler if they had some Dickensian era miser wearing a top hat holding an orphan by its ankle, shaking him loose of any bread in his pockets. I feel that would be subtler than this. Oh man. It's just shocking. So yeah, I'm sorry to distract us in this. Adam and I just knew that like, we gotta get this out. Oh, we gotta, we gotta. So you all, had you all seen this, first of all? I did not notice this upon looking. Right, you're too, understandably. Like I, I mean, we could, Adam and I could barely get through the video and we are nowhere near in the crosshairs of this thing as you all are. But yeah, it's, it's definitely, it's definitely something else. And it's, I mean, a little too on the nose. That's right. And to folks at Hashi, listen to this. Resistance is alive and thriving, apparently. No. The sign, we will give the sign of grimace to know that we are one with the resistance inside of HashiCorp. Just that everyone has like a goldfish tank on their desk on Monday. Totally, exactly. I mean, I get the coin and I get the, I get the gold coins, but I really do not know what the purple thing is. Like, what is the purple thing? Oh, we know what the purple thing is. The purple thing is an announcement to our community. That's right. The capital. That's the fact. That is the fact. You can see 0.26 on there. So when you all announced this, I mean, the, I mean, I certainly, it sounds like there's a lot of kind of positive energy around the formation of this, but you definitely saw that it feels like you saw that positive energy continue as you announced it. It seems like a lot of, a lot of grassroots enthusiasm for the effort here. Is that a fair summary? Yeah, 100%. Yeah, definitely. I mean, like I said earlier, the vendors themselves were really excited about working with each other. And then there are all these people that reached out to us to express support. There were some high profile folks who reached out and privately expressed their support as well. And we had members of the Terraform core contributor team from times past express their support. So, yeah, I mean, It was kind of neat to see that manifesto get more and more names, companies, projects and individuals endorsing it. And, you know, in the beginning, I think we published it with, like, what do you get? What do you guys think? Like seven names? Seven companies? Maybe? Yeah, that's just a handful. It was about seven. And the first the first sign like signature came in and I was like, Oh, somebody else cares. Exactly. Just like the wall of PR started coming in. And it was like, yes. Yeah. And like a tip, if this happens to anyone else, do not do it like we did where people pledge by making an HTML PR. Oh, because the other elephant in the room, I listen to you to win a manifesto. But like, literally every PR is a merge conflict. It was brutal. Yeah. You know, that was my personal contribution. I took an hour of my life and I handled those merge conflicts. And somebody's got some silly indentation. So I've had to turn off my my save on format or format on save. But I can just imagine like you, the you know, before you guys went live being like, all right, look, I mean, if we have hundreds of PRs, I mean, you know, hurt me with that problem. It's like, well, here we are being hurt with that problem. Now it's a good it's a great problem to have in terms of having so much interest that you've got merge conflicts. I was, I was definitely man, I'm in a hard time landed this thing. So I'm having a hard time rebate, like having to rebate six different times to actually like touch down here. But think how many think how many signatures we'd have if it didn't require a rebate. But and I also I have to say I one of the things that you were, you know, I you kind of see as you're thinking like, how can I structure this or whatever, structure the list, one of the things that I was kind of privately hoping you would do, and it looks like you did do, Mike, you got folks that are really committing resources to this. And I really loved the fact that that those folks were kind of at the top, like we got a there's a bunch of signatories, there's a bunch of people that agree with it. But it was really heartwarming to see the folks that were really being willing to make commitments. And I'm sure they were seeing the commitments that others were making. And, you know, it was great to see and and any I mean, I any reaction from the official reaction from Hashi? I'm gonna assume the answer is no, you know, feel free to not answer that question. Well, so just to be clear, we actually tweeted from the OpenTF Twitter account, that we're officially waiting until this Friday, August 25, for a response. Remember, in the manifesto, we said, Look, we we think that no fork is better for everyone, if that's possible. Now, there's some legitimate questions you raised earlier about to what extent would we all trust such a reversion to an open source license. But, you know, there's, there's some overhead to a fork as well. It creates confusion. It definitely creates confusion. And to be clear, I think that there, I definitely think that there shouldn't be a fork. I just think that that the foundation needs to be the driver's seat. I think that OpenTF needs to be the ones in if Hashi wants to come back, they should come back, but they should come back to participate in the new project. And the new project is the OpenTF project. Exactly. So we're waiting for them officially to reply by by August 25, this Friday. But then they just published this sort of clarification of their FAQ earlier today. So I personally interpreted that as a sort of implicit rejection. And I guess we'll see if they respond at all. But yeah, if we don't get an official response by this 25th, this Friday, then we plan to proceed with the fork. In fact, we've got several engineers in the consortium already working on a private version of that and getting it ready. And there's a ton of energy. CI jobs are running. Terraform names are removed to make sure we're compliant with all the trademark requirements. Yeah, I mean, it's, I think if we were to have to revert, there'd be a lot of sadness. Like it's, it's going to be an interesting project, actually. Well, and I think that I don't think you, again, I think that the end state here is not a reversion. It's it's Hashi coming to the community as a community member. And I think that, you know, part of the other reason I think this is important is because I do think that Hudson has drifted too far away in the collective memory. I mean, to the point where it doesn't even make, like, hey, folks that are making a list of Oracle's top 10 open source transgressions, this definitely, Hudson belongs on that list. Like, I know, like, there's a, there are a lot of things kind of vying for the top, maybe, you know, a top 20 list. But, you know, people have kind of forgotten about it. And I do feel that that companies that have benefited from open source have benefited from that social contract. And indeed, the whole reason that your technology was ever adopted by anybody was because it was open source. Those companies need to not take their communities for granted. And it's important that the community speak with its voice and as a check, because, you know, what you want is that, you know, the kind of the future company that is contemplating this, it would be helpful to have an object lesson being like, boy, yeah, but, you know, could we create another? Could we end up losing everything in the process of doing this? And, you know, this should really, right now, this is kind of thought of as being zero risk, these relicensing changes. And they are, they're really divisive. They're very disruptive for the community. And we really need to, this needs to be thought of more like litigation. Like, you go into litigation, like you can, you're going to war, you can lose a lot, even if you're, if you're a plaintiff. And that's what you're doing. When you're relicensing, you are spinning the roulette wheel with your company on the board. And it's in your community. And you could lose it all. And because the open source itself, like the community is not going to be vanquished. The community, you all, and Josh sounds like this is kind of the realization you all had is like, wait a minute, we're, we may be competitors, but we're kind of competing in this broader infrastructure as code ecosystem. But we got a lot of shared values here. And we can, we can bond together to reflect those shared values in a shared project. Yeah. Yeah, absolutely. One of the things we actually did in the first couple of days of OpenTF was we started thinking with the product manager's mindset and working backward from the outcome that our customers would want. Our customers being people who choose technology to deploy their infrastructure. And we were thinking, okay, such a person would want legal clarity. They'd want to know the tools popular project is active. There's a clear vision, high investment in the project. It's publicly endorsed by names that they recognize or foundations they recognize. There's commercial support available. There's a broad ecosystem available. It's compatible with their favorite tools. And it has features that they want. And yeah, ultimately we feel like in addition to the legal clarity that OpenTF can offer a lot better than the Busyl-Terraform, we actually think the project can compete on its own merits, even separate from that pretty effectively too. Yeah, that's terrific. There's a question in the chat about, and maybe a little too early to think about the specific foundation of this, or maybe you already have, whether you do OpenTF has its own foundation that would kind of pull in other infrastructure software, or have you given kind of thoughts to that, or are you deferring all of that until after Friday? Oh, no, it's just focused on Terraform. Like all enterprises, focus is hard, but it yields the best results. So this is a pure Terraform effort. It is unrelated to Vault or Console or anything else. We're just focused on making the best possible version of OpenTF that we can make. That's great. And would you do that as its own 501c6, or how would you... Why am I uttering rumblings? Do you have any opinions about the Linux Foundation? Do you want to share about the Linux Foundation? Anything? You know, I just feel like I'm about to talk to my teenagers about a bad decision they're going to come to. I'm like, look, you're going to be at a party where there's a lot of Linux Foundation people, and I just want you to know who you are. That's right. Just be safe. Be safe. And if you need me to come pick you up, I will. Have you given thought to the kind of specific foundation vehicle, Josh? Yeah. So, you know, we wanted... we recognized that we need a governance structure of some kind, because there's going to be multiple different companies all contributing resources. And there has to be some mechanism for how we set the roadmap, how we are reviewing PRs, how we respond to GitHub issues, and things like that. So we want to move, ideally, to the CMCF. That's something that we've been looking into. And some of our members have had some discussions there. But really, most of all, we just want a sort of governance structure where we're not innovating on that. Like, let's find whatever the best open source governance structure is that can accommodate lots of different companies. And let's just adopt that. So that's the real need. The foundation is sort of the solution to that need. And truthfully, we've been talking about this for a long time, and we've been talking about to that need. And truthfully, I mean, being in the OF, the CMCF does... I mean, that does solve a bunch of problems for you. So I think that that may... like now I'm pouring the kids a drink here, Adam. Yeah, just drink here with us where it's safe. Exactly. For the record, not one of those houses. But I mean, I think you're wise to kind of have... stay focused on what you're trying to... the problems you're trying to solve and the problems you're not trying to solve. You don't want to reinvent, obviously. And hopefully those talks are fruitful because I think you do have... I mean, this is software that is at the foundation of a lot of stuff. And it's really important. And it's important that it stays open. And I loved the kind of the tenor you struck in your manifesto about like, we are trying to assure an open source Terraform. That is the objective of OpenTF. And, you know, beautiful like that. Yep. So just to dovetail that just to... especially for naive users, for folks who aren't familiar with any of this stuff to make the path unencumbered in a way where new folks could easily walk themselves into a situation they don't mean to. So I think the work that you're doing here is so important to create or to actually take that torch that Hashi carried for so many years and built up with Terraform and these other projects and lives up to that commitment or that you're able to carry forward that commitment for new users, existing users, and for this really big and thriving community. Like we're building Terraform providers for the oxide rack. We want to make those OpenTF providers. And we're going to guide our users there because it's going to be the right place to use it. Yeah, as hectic as this last 11 days has been, I do think in some sense, like the silver lining is I do think, you know, OpenTF or Terraform, we want to call it is going to come out a much stronger, better product. And like, so if you go the foundation route, you don't have a single vendor in control of all the features that go into it. Because there's a lot of people competing that would be part of this foundation, you don't, you get a lot of innovation, and but everyone benefits from it. And so I really think we all win, despite not being able to sleep a lot from that, we're all going to win in the end, I think. Totally agree, Malcolm. And just for whatever it's worth, I absolutely think it needs to be in a foundation. I think the question is, you know, is it just mechanically isn't an existing foundation to use the LF? I think that which sounds like, do you use another 501c6, the C3 route is a much harder route. And I would definitely recommend a C6 route. So no, I think you're doing exactly the right thing by going to foundation, the preserve trademark and so on. One question that did come up in the chat is like, all right, well, so how do you recommend when someone does use your software, and they are using it to as part of an offering that is commercial, like, how are you supposed to deal with that? And I don't mean I had this happen, because the software that we developed is used by the one of the most profitable companies on earth, in terms of Apple. And, you know, you have to have the kind of self awareness to realize that like your software is not the only thing that there's a product and a service that that company is developing, of which your software plays a role. And it's kind of natural for me to say, well, no, my software is the only thing that's like, well, maybe, maybe not, probably not. It's probably more nuanced than that. And certainly in Apple's case, it's like, no, Apple's delivering a product to their customers. They're very innovation oriented. And, you know, the fact that they chose to integrate our technology, I think we viewed as exciting and uplifting. I don't think we, again, because it's like the opportunity was not Apple, you know, his son or whomever, a licensing fee for this, like that was never going to be on the table. It's like they use it or they don't. And I'd much rather they use it than not. I do feel like those open source companies, I think that, you know, you and I know they got a bunch here, you really want to focus on the goods and services that you make and serving your customers. Josh, I loved hearing that you've been talking to your own customers about it, because ultimately, like that's who's important for all of us. It's like the people who are going to pay you for your product or service. Those are the ones who you ultimately, we all ultimately are all serving. And that's part of what feels like is the entity that's not being well served by Hashi's decision are their own customers. Yeah, exactly. You know, every company creates value and captures a small portion of that value. And in order for the company to be successful, you have to have a well-defined business model of how you're going to capture value. And so there's nothing wrong with that. Like those business models that make companies successful, allow them to create really great tools. I think the confusion comes in when companies mistake what the role of open source is in their business model. Is it lead generation? Like, okay, great. It's great lead generation. Or is it a free tier of your product or is it something else? And so I think that's one of the things that was so shocking about the HashiCorp element is I always saw it as lead generation for them. Like Terraform is the gateway drug, and then you could try some of their commercial offerings, but there are alternatives too. And they've kind of turned it off to the point where like it is the product. You know, it's just the thing you purchase directly. So with OpenTF, we're kind of stepping outside of that paradigm. We're saying, look, all these different companies need this thing to exist. So we think it can support a prosperous ecosystem. And each of the companies, well, we'll figure out our own business model. But the core thing that you're using, OpenTF, that's going to be thriving independently into itself, which will hopefully inspire confidence when users use it. Yeah. Yeah. Amen. And Josh, to which I would add in terms of the other kind of importance of open source, it's also an opportunity for a conversation with someone with whom you share values. It's opportunity for potentially folks that want to work for you. And there's a lot of opportunity with open source. And there's a lot of energy that you get to harness. I know when Dave McJanet was announced the new CEO of HashiCorp, I was at HashiCorp, I think it was in 2016. And Adam was with you. I met Scott Hammond, I think. Did you meet Scott? Yeah, sure. Yeah. Absolutely. Yeah. So I was with Scott, who was the CEO of Joyad at the time. And there's so much energy at HashiConf. And the new CEO is there, but nowhere to be found, not on stage. And Scott is just like, oh, my God, this is CEO malpractice. Like, let me be the CEO of Hashi. I'm like, hey, you've already got a job, pal. Hey, check your ring finger, pal. You're not the CEO. But he's like, God, I want to be the CEO, because I would be having all these conversations with people that are using this technology. There's so many conversations to be had. And his instinct is not, oh, I want to go sell to all these people. I want to learn what they're doing. I want to understand what they're doing. I want to understand how the technology that we have developed is being used by you. And there's a lot that can come from those conversations. And there's a lot of opportunity there. Josh, just to your point, like, you're just going to have to get creative and in a really exciting and uplifting way. Yeah, this has been great. This has been a, again, I was super flattered. We are flattered at Oxide that you all looked to us to contribute our name to it. We were honored to do so. And I'm really excited to be a part of wherever you take OpenTF. You know that you've got a kindred spirit and a supporter here at Oxide. And we want to help you all out any way you can. It's energizing to see this community come together. Thank you so much. Honestly, a lot of us are fans of Oxide and your founders, including yourself, Brian. And Jesse. So yeah, we were really honored when you guys joined. So it means a lot to us as well. Well, that was awesome. And Malcolm, I love when we were talking about the podcast. You're like, I'm a fan of the podcast. Like, I'm going to... Yeah, you're like, check out the back catalog. And I was like, again? Well, that was, I mean, honestly, that's so great. And we're just excited that we could have this conversation today. And I'm really looking forward to what's next for you all and OpenTF. And Corey, good luck with your roof. I'm sorry to hear about your roof. Yeah, hopefully we'll get that straightened out here the next day or so. Awesome. And congratulations on your success with the round. And Josh, Malcolm, again, great work. with OpenTF and can't wait to see where it goes. Thank you so much for having us. All right. Definitely, this was great, thank you. Thanks everyone, see you next time. Let's see if I can figure out how to log out of this thing. I guess turn your phone off. "
  },
  "71145462-4089-49b3-86aa-158e271f8a41": {
   "Title": "Open Source Anti-Patterns with Kelsey Hightower",
   "Description": "\u003cp\u003eKelsey Hightower joined Bryan and Adam to revisit a topic Bryan had spoken about a decade ago: corporate open source anti-patterns. Kelsey brought his typical sagacity to a complex and fraught topic.\u003c/p\u003e\u003cp\u003eWe've been hosting a live show weekly on Mondays at 5p for about an hour, and recording them all; here is \u003ca href=\"https://youtu.be/13ctYOu8TsA\"\u003ethe recording from August 28th, 2023\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn addition to \u003ca href=\"https://mastodon.social/@bcantrill\"\u003eBryan Cantrill\u003c/a\u003e and \u003ca href=\"https://mastodon.social/@ahl\"\u003eAdam Leventhal\u003c/a\u003e, we were joined by \u003ca href=\"https://mastodon.social/@kelseyhightower\"\u003eKelsey Hightower\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eHere is the (lightly edited) live chat from the show:\u003c/p\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003exxxxbubbler\u003c/strong\u003e: \u003ca href=\"https://www.youtube.com/watch?v=Pm8P4oCIY3g\"\u003ehttps://www.youtube.com/watch?v=Pm8P4oCIY3g\u003c/a\u003e here is Bryan's talk from 1 decade ago, for reference\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003erolipo.li\u003c/strong\u003e: web3 is going great\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003erolipo.li\u003c/strong\u003e: \u003ca href=\"https://web3isgoinggreat.com/\"\u003ehttps://web3isgoinggreat.com/\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eahl0003\u003c/strong\u003e: Last time Kelsey joined us for \u003ca href=\"https://github.com/oxidecomputer/oxide-and-friends/blob/master/2022_01_03.md\"\u003epredictions\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eblainehansen\u003c/strong\u003e: \"Governance orgies\" happen when the \u003cem\u003egovernance mechanisms aren't well-designed\u003c/em\u003e ha. If they are well-designed then governance is good!\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ejbk\u003c/strong\u003e: opsware maybe? or tivoli?\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003euptill3\u003c/strong\u003e: hp openview was one as well\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003esevanj\u003c/strong\u003e: \"they've got us working for trinkets\"\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003esevanj\u003c/strong\u003e: this was mentioned on the bugzilla anouncement regarding funded staff being pulled from working on project in the last 3 years.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eblainehansen\u003c/strong\u003e: All open source problems are secretly public goods problems haha\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ecarpetbomberz.com\u003c/strong\u003e: Hashicorp DID do a \"thing\"\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eblacksmithforlife\u003c/strong\u003e: Just like taxes fund roads, we should have a internet usage tax that then funds these open source projects that everyone finds value in. The person taxed should get to decide which open source project gets the money\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ekaliszad\u003c/strong\u003e: The problem is, you can help other people, but first you have to sustain yourself. 🙂\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eaarondgoldman\u003c/strong\u003e: Too boring to be evil\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003erolipo.li\u003c/strong\u003e: too busy to be evil?\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eaarondgoldman\u003c/strong\u003e: Angular never got budget even when Inbox used it and had millions of users\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eblainehansen\u003c/strong\u003e: Most open source projects are probably not best led/governed by a for-profit company ha\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eaarondgoldman\u003c/strong\u003e: HP had a huge repair service business when their hardware got much more reliable it almost killed the company\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egeekgonecrazy\u003c/strong\u003e: Never actually considered using CNCF membership as a qualification for using a tool\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eahl0003\u003c/strong\u003e: it's the nintendo seal of quality!\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egeekgonecrazy\u003c/strong\u003e: It’s an interesting thought now that I’ve heard it 🙈 especially for any sort of core utility like this\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003esaone\u003c/strong\u003e: On the topic of patterns that seem to be working, Docker Desktop's license requiring subscriptions for larger organizations for use of their product and focusing on providing a really good developer experience seems to be a really good spot for them to be\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egoodjanet\u003c/strong\u003e: The term freeloading comes up only when there's a \"problem\" (usually fiscal in a company/group), the rest of the time the exact same actions are fine or often encouraged\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003emrdanack\u003c/strong\u003e: I disagree, there are freeloaders. Multi-billion companies like IBM and Oracle have benefited from the PHP project for multiple decades and really haven't contributed even a modest amount back.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egeekgonecrazy\u003c/strong\u003e: Anytime hitting CLA I always use that as clue to take hesitation and think about contributing. 🙈\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003equasarken\u003c/strong\u003e: I love that bit about community Adam\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eblacksmithforlife\u003c/strong\u003e: \u003ca href=\"https://www.linux.com/news/us-government-opens-access-federal-source-code-codegov/\"\u003ehttps://www.linux.com/news/us-government-opens-access-federal-source-code-codegov/\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eblainehansen\u003c/strong\u003e: Sometimes a community of passionate contributors is more a burden than a gift. Every project is different, not every project can be supported by many well-paid engineers at vc-funded incentive-aligned companies. I don't think the BUSL is smart or good, but there's a funding/support problem here that legitimately needs to be solved, and the existing open source social contract hasn't solved it. \u003ca href=\"https://www.jeffgeerling.com/blog/2022/burden-open-source-maintainer\"\u003ehttps://www.jeffgeerling.com/blog/2022/burden-open-source-maintainer\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eblacksmithforlife\u003c/strong\u003e: Disclaimer: I'm a federal employee who tried to get more software open source while I was working at various agencies. For the most part it was soundly ignored and the agencies just claimed it was too hard and they didn't have enough funding to do it, which in my opinion is just false\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eblacksmithforlife\u003c/strong\u003e: But, if you want it, just do a FOIA, then they have to give it to you\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003esaone\u003c/strong\u003e: There's a great deal of fear at my company that software being open sourced must be carefully vetted \u003cstrong\u003eto avoid potential embarassment\u003c/strong\u003e so the hurdles to open source anything are very high\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egirgias\u003c/strong\u003e: The French government has released code which was pure garbage, and I don't think one can do worse than the APB code\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egeekgonecrazy\u003c/strong\u003e: That sucks. 😬I can totally see individual developers being afraid. I’ve faced that with my team. Weird to think org would be especially if trusting engineers\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003enorthrup\u003c/strong\u003e: Adam to your point though - I don't see how that's any different than other open source projects that aren't corporate backed. No open source projected is obligated to honor your issue to drive a project in a direction, or accept your PR to add a feature or function...\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eahl0003\u003c/strong\u003e: Great point!\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eblainehansen\u003c/strong\u003e: The \u003ca href=\"https://blainehansen.me/post/open-source-cooperatives/\"\u003eopen source cooperative idea\u003c/a\u003e is the best I can come up with to solve the problem\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eblacksmithforlife\u003c/strong\u003e: What is dev rail?\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ebcantrill\u003c/strong\u003e: Developer relations\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eahl0003\u003c/strong\u003e: developer relations\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ejbk\u003c/strong\u003e: dev rel(ations)?\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ebcantrill\u003c/strong\u003e: JYNX\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eblacksmithforlife\u003c/strong\u003e: Never heard that term before\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egeekgonecrazy\u003c/strong\u003e: Curious at what scale you think devrel is needed vs the engineers in company directly involved\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egeekgonecrazy\u003c/strong\u003e: I’ve often wondered if doesn’t create unnecessary barrier between engineers and community. Especially at certain size\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003equasarken\u003c/strong\u003e: Dev Rel seems a lot like community solutions engineering\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egeekgonecrazy\u003c/strong\u003e: I’ve personally seen some companies use devrel as sole tie to open source and “community” in place of more of company getting involved\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003erolipo.li\u003c/strong\u003e: devrel as a service. now it's a consulting firm?\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003enorthrup\u003c/strong\u003e: When I worked at GitLab in the early days, some of my most favorite experiences were going to conferences and hanging out in the GitLab booth to answer questions and talk with / help users. SOO much great feedback, clear \"oh wow!\" edge cases brought forward, and amazing feedback of \"yeah, you made this feature, but that wasn't what we needed\"\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eahl0003\u003c/strong\u003e: I remember liking this book on devrel: \u003ca href=\"https://www.amazon.com/Business-Value-Developer-Relations-Communities/dp/1484237471\"\u003ehttps://www.amazon.com/Business-Value-Developer-Relations-Communities/dp/1484237471\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003erolipo.li\u003c/strong\u003e: \u0026gt; hello world to hello revenue\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egeekgonecrazy\u003c/strong\u003e: I forget how blessed I’ve been getting to work for company that started as open source project 🙈\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003esevanj\u003c/strong\u003e: that's a benefit\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eophilli\u003c/strong\u003e: Do y'all consider the work you do on Oxide \u0026amp; Friends and On The Metal to be investments in dev rel?\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eahl0003\u003c/strong\u003e: I think probably closer to brand marketing... on the cheap?\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eahl0003\u003c/strong\u003e: or just a way to keep Bryan off the streets and out of trouble\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003enorthrup\u003c/strong\u003e: I was going to say \"probably more cathartic for Bryan\" 😂\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003erolipo.li\u003c/strong\u003e: \"here's a dead project we found in our version control\" \u003cem\u003epunt. thunk.\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003erolipo.li\u003c/strong\u003e: didn't bryan give a talk about oxide n frens? something about capturing oral history.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ea172\u003c/strong\u003e: \u003ca href=\"https://www.youtube.com/watch?v=W8qiDhlFVCE\"\u003eBryan's talk on the power of social audio\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eblacksmithforlife\u003c/strong\u003e: Have you done an episode on subscription software? I really hate how I can't buy something and own it forever (if I really want your upgrades then I'll pay for the next version)\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003erolipo.li\u003c/strong\u003e: people wanna yoink ur pie? make the pie so big they'll choke.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eahl0003\u003c/strong\u003e: second week in a row that I 'm going to recommend Stephen O'Grady's book: \u003ca href=\"https://www.amazon.com/Software-Paradox-Rise-Commercial-Market/dp/1491900938\"\u003ehttps://www.amazon.com/Software-Paradox-Rise-Commercial-Market/dp/1491900938\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003esevanj\u003c/strong\u003e: did you see the wipeout rewrites that have been coming out in recent weeks\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003erolipo.li\u003c/strong\u003e: the oxide github is great\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egoodjanet\u003c/strong\u003e: i wish more old games were open sourced\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eblacksmithforlife\u003c/strong\u003e: And their tool chains. When I worked at the library of Congress, it was near impossible to build some of these games because there was no documentation on what tools they used and how to build the software\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003esaone\u003c/strong\u003e: there have been a few (Freespace, Warzone 2100, Red Alert...) but it definitely isn't widespread, and there are ungodly licensing issues surrounding that from what I understand\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eblacksmithforlife\u003c/strong\u003e: \u003ca href=\"https://blogs.loc.gov/thesignal/2012/09/yes-the-library-of-congress-has-video-games-an-interview-with-david-gibson/\"\u003ehttps://blogs.loc.gov/thesignal/2012/09/yes-the-library-of-congress-has-video-games-an-interview-with-david-gibson/\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egeekgonecrazy\u003c/strong\u003e: CLAs definitely make me take pause. Usually for this exact reason. I know giving them the flexibility to relicense with no warning\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egeekgonecrazy\u003c/strong\u003e: Fleet was pretty sweet\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eblacksmithforlife\u003c/strong\u003e: You might also like \u003ca href=\"https://blogs.loc.gov/thesignal/2014/08/dukes-legacy-video-game-source-disc-preservation-at-the-library-of-congress/\"\u003ehttps://blogs.loc.gov/thesignal/2014/08/dukes-legacy-video-game-source-disc-preservation-at-the-library-of-congress/\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003erolipo.li\u003c/strong\u003e: BDFL - benevolent dictator for life\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eahl0003\u003c/strong\u003e: re: Swift: meet my friend, Perl 6\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eahl0003\u003c/strong\u003e: \u003ca href=\"http://dtrace.org/blogs/ahl/2016/08/02/i-love-go-i-hate-go/\"\u003eI love Go; I hate Go\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ebcantrill\u003c/strong\u003e: \u003ca href=\"https://news.ycombinator.com/item?id=8489954\"\u003eKelsey on HN\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egeekgonecrazy\u003c/strong\u003e: 💯 it’s as much if not more about the people than the software\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egoodjanet\u003c/strong\u003e: people make things not corporations!\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ekelseyhightower\u003c/strong\u003e: Thanks for listening and hanging out with us.\u003c/li\u003e\n\u003c/ul\u003e\u003cp\u003eIf we got something wrong or missed something, please file a PR! Our next show will likely be on Monday at 5p Pacific Time on our Discord server; stay tuned to our Mastodon feeds for details, or \u003ca href=\"https://sesh.fyi/api/calendar/v2/iMdFbuFRupMwuTiwvXswNU.ics\"\u003esubscribe to this calendar\u003c/a\u003e. We'd love to have you join us, as we always love to hear from new speakers!\u003c/p\u003e",
   "Link": "https://share.transistor.fm/s/144dd00e",
   "Filename": "71145462-4089-49b3-86aa-158e271f8a41.mp3",
   "GUID": "71145462-4089-49b3-86aa-158e271f8a41",
   "Published": "Mon, 28 Aug 2023 17:00:00 -0700",
   "Transcript": "After Elon took over I know you joined us for one of the prediction episodes I think a year and a half or so. Yeah after Elon took over we looked for a new home and we evaluated some Kind of hilarious other options, but landed here and it's been working out really nicely people have really liked the the live chat In this as a sidebar and it's been pretty handy for the show notes every once in a while. We can just Mine out the the chat and turn that into the show notes and call it good enough Are we talking at Twitter spaces versus discord? Exactly. Yeah, Kelsey. It's good. I gotta say it's I know cuz you Wasn't a bunch of your spaces to you. It's great Twitter spaces and I feel like You must have also seen room for improvement. I would assume a lot of room You can use your normal like podcasting set up Desktop that we're already winning I know I know it is what in particular I'm going back and listening to some of the back catalog Adam I am reminded. I mean we would joke about it, but we would joke about it because it was true that more or less every episode Something went wrong with Twitter spaces and then you get the The fact that that you can't dial in on your laptop and but but you can listen it you just can't speak and there's nothing to Indicate that. I mean boy, we had so many people get hung up on that. I Was rare that it survived the full hour plus or whatever. Yeah, totally Totally nobody but Kelsey discourse been great. It's been really it's we've really enjoyed it and It's been good because it has made it super easy to get people up on stage For people to contribute in the in the chat, which is really important because actually we got this feedback from in Twitter spaces, too A lot where it's like I've got something I want to say, but I'm like happy to just type it into the chat I don't actually need to like stop a conversation to say it So it's been it's been good. I Will Kelsey welcome. It's great to great to have you here But it'd be here you you pick me for the You know the Kelsey the last time you were here was for the the the terrific predictions that you made after you went deep into web3 and with a with a an astonishingly open mind and With it did a huge service for the rest of us In terms of coming out with a you know, a big deal and and and and and and and and and and and and and and and Did a huge service for the rest of us Uh in terms of coming out with I mean being fair in terms like hey You're I here are some things I found that are interesting and boy here are a lot of challenges So yeah, we figure you that you're good for the lightning rods, you know, we got to have you come in and and Uh, this is my prediction pan out. What was my prediction around web3? Did I say it was going to be a raging success? That's what you said raging success. Everybody go long Put all your money on all your money on 32 red or whatever. That's right Uh, yeah, you promised an airdrop for all listeners I wasn't even sure what that meant no, so you were um, I need to go back to the the the the prediction from that year that stuck with me was adam's prediction that we won't use the term web3 web3 will kind of Quietly disappear which felt like it was I felt accurate. Uh, it felt like Felt hopeful at the time, but it it seems to have panned out. I don't know It definitely I I don't think we anyone predicted that the One of the largest cryptocurrency exchanges would be in a bahamanian jail and then a brooklyn jail I don't think we we did not correctly predict the the jail route um But yeah, it was uh, that was fun. Anyway, kelsey was great to have you there and I mean Always appreciate your perspective And this is I mean kelsey you say this is a contentious topic Which is I mean, there's certainly truth to that This is also one that's very near and dear to your heart and our hearts. This has been super important to us um, so we and adam did you Did you see this this talk that I gave now a decade ago? Over a decade ago on yeah Yeah, for sure. Yeah, I remember it at the time and watched a bit of it this uh this weekend Yeah, and it's funny to go back and watch it and because of course my now 11 year old was a newborn I mean, this is the way decades work generally Turns out right it turns out and uh, but it was it was interesting to go back and kind of re-watch that And I don't think anybody's wrong. I mean, I definitely would stand by but you realize it definitely is standing in 2012 Looking back on the previous decade. Um, and just you know We had said that predictions tell you more about the present than the future. I think that that was really telling you about What that decade was and a lot of that decade. I mean it was open source stepping into its own And a lot of the uh, the the corporate open source antipatterns that I saw at that time Were all around companies that had been born proprietary and trying to figure out how to Participate in an open source and then especially how to open source their own projects. That was kind of the focus of that I would say um was source that had been born proprietary and was becoming And again, I think I stand by all that but what we saw in the last 10 years Is really pretty different and in part because open source arrived open source had by 2012 uh, everyone was deploying things with Open source open source is the core of all of our infrastructure and uh We now had companies that were being built around open source. So companies that started open And now I would say in the last decade the antipatterns to be much more Mindful of are now in companies that start open and then uh, and then things happen so That's I would say that's the theme but I would love to get so kelsey I mean people obviously associate you with with kubernetes, but you were also at an open source company core os Before you were at google and that was a company that was more or less born open, wasn't it? I mean even before that, you know, if you go back maybe another We go back another maybe four or five years before core os there was puppet labs, which was also born open You know configuration management space I think during those times both core os and puppet You're going to build an infrastructure tool. You almost had no choice but to start off open. There was Anything else was just too big of a barrier to adoption A lot of people were not just competing on price, but just getting that entry point To the average enterprise you you had to just be open number one just from a people coming out of that whole lock-in period of You know, we're using proprietary tools that just cost too much to use from dev to production So I think anyone that was going to allow a new tool to come into any company you're gonna have to have Lack of better words some type of free tier, but a very low bar of entry one on price and then number two That's this idea that I just wouldn't get locked in in terms of your sales team deciding to charge more So yes, I definitely was in that part, but I thought it was necessary for those infrastructure companies at that time Okay, can you speak to that because I think this is actually it's something that that I think people may have historically lost that is very important about that Fear of lock-in for infrastructural software because obviously like we are of a vintage that recalls that era um Could you speak a little bit? I think what customers were afraid of when I joined financial services They had an automation tool. I forget what it was called, but it was one of those built by hp or ibm The license was so prohibitive that if you wanted to add it to a new server, there was going to be a whole discussion About getting another license so you can automate the server You're in a situation during that time of virtualization where we were making a lot more servers than we had actual physical servers So the pricing model was way off. Oh, so we had to pick and choose what servers to automate so that number one barrier to entry also Nothing's worse than lock-in than lock-out But when new when linux started to come around Uh new software packages that we wanted to automate Thing we were using literally they had no integrations and we couldn't even build the integrations ourselves I think that part was worse So if hp and ibm were able to keep up at that time, I don't know if we would have complained as much They couldn't So then it was like hey, here's this thing called puppet Some people are using things like cf engine their way They were open in terms of you can build the integrations that you need it and two There wasn't this weird pricing situation where you just couldn't install it on all of your servers. And so those two things I think allowed those tools at that time. We're talking 2009 2010 To basically go from qa to production in less than a year And then they became the way we thought about automating things going forward yeah, that is a first of all, I love your point about uh, the worst thing about lock-in is lock-out that is Definitely feel you on that and I think that like I think I mean because we still do use we have to use some proprietary software here at oxide in particular around eda and Uh, we have all those same problems um, and it is uh I just think I mean I can when you describe that kelsey I can feel myself being kind of with you in you know 2006 2007 2008 and not being able to spin up new infrastructure because Oh, we actually need to expand our license footprint and the person that does that is actually going to be out for two weeks or it's like we My business can't move forward at the speed that it wants to move because I have to effectively I mean Forget the monetary cost but that too but just that whole idea that I can't just use this thing i've got to actually I've got someone sitting there uh metering All of my usage of this thing really makes it hard to actually use it ubiquitously And it makes it really hard for me to to depend on It's also a great point that in that time period we were moving from physical infrastructure to virtual infrastructure And as I say kelsey the the pricing models for so many of these things was just off It assumed, you know dozens of systems where then we were effectively having hundreds of systems And then there was all this fud that vendors were throwing up like they won't support you if you're on virtual infrastructure So a really interesting time period for that shift And I would say the coral west situation was a bit different because this is like ekvc Venture capital allows you to go maybe two years like magic term is pre-revenue Don't worry about making any money right now Focus on adoption and to be fair in addition to the funding part Some of this stuff was just better There was no competition in the container space really There's not a lot in like configuration stores like etcd, you know, you had zookeeper, but that was also open So that's where the bar was so you had two things I think in the core west time So that's zooming forward a little bit in that time frame the open source is better My opinion and there was enough funding To allow you to go and focus on the community and focus on actually Doing all the things we all enjoy about open source, but I think that's The anti-pattern starts because a lot of people Didn't realize how much money it cost to run These open source projects where we went from Oh downloaded and good luck if you can find documentation to there's a community manager with swag and stickers, right? There's a lot more that went into open source. I think in the last 10 years than in 10 years before it Totally agree and I and I totally agree about like that is kind of where the anti-patterns start Um, and so yeah, maybe that's a good all right So let's go through some of these guys. I feel you you hit on like four of them right in there um, so I want to take it apart a little bit and I I kind of think that like the lens is You know someone who is looking for guidance for the coming decade You know, what are some of the things that when they see they should say like wait a minute This is like a step down a wrong step or a step down the wrong path Um, one of them that you mentioned is that you know, you you're building these these downloads, you know building community And I think it is important. I and I think an anti-pattern when you kind of see this kind of creeping into a company It's a challenge Downloads are not customers They are downloads and they're great and it's exciting and it means you've got a community and someone using it But if you're building a business You can't assume that you're going to be able to directly monetize downloads into customers I feel I mean, I don't know kelsey What's your take on that? I mean, I think I saw for the other day. I didn't even think about it and it should have been super obvious People buy github stars. I know I know that that part When you're really doing you and the community you're totally Because people kind of use these metrics to signify the health of the project the wrong metrics Me especially going through like the whole kubernetes thing You really want to look at the sustainability? Long term so typically there's a lot of hype Especially from the company's funding these things getting that initial traction figuring out the enterprise product You're on the line between open and paid then it comes to the point of what happens when primary funding company Is doing most of the core work I think we tend to step back and say oh those five people are going to take care of this project Y'all can just download file issues and wait for them to get fixed that to me is what I think is What some people believe open source is about even though they won't say those words A lot of people go through this idea that you big company that has tons of money You should fund this thing for decades to come If you don't We will complain right to me. I think the other part of open source has to be are you willing? To take the responsibility to keep this thing going should said company Decide they want to go in another direction And to me, I think this sustainability Is probably the biggest anti-pattern is that I think a lot of people on the other side of the equation Get what their responsibility is in this thing You need a lot more than just a handful of people within the skill Step in and fork the process project if necessary Or at least be able to contribute in the low level boring aspects of it all There's that other part that I think is even worse, which is the idea of people should be working for free I don't know how you solve this problem It isn't sustainable for most maintainers to work on a project people use for production or profit Free that's tough totally and I think and you've got a couple different variants of that, right? You've got these projects that are not associated with the company, but are really important to humanity, you know, and you've got you know bash or open ssl or curl or One of these things that is that lots of folks are using and the and the software is still being developed but there is no company around it and It's not really and I think that you know Folks behind all those projects have said hey look It's really hard to maintain this because there's a lot of work to do and it's not clear how it's monetized And i'm yeah, i'm that's a thorny one. I'm not sure how I mean and In there I mean you certainly can have corporations act as kind of sponsors of individuals because they think the project is important and that's happened in a couple of cases But to your point about sustainability kelsey, that's not really a sustainable path I mean, let's jump into like probably why we're here right hashi corp did a thing. Yes. I remember my first contributions To terraform right it was primarily mitchell there. Maybe our mom was there as well and Remember someone from google cloud reached out to me and said hey You look like you've made some contributions to entable Seem like you know go we need some help bootstrapping the google cloud provider And I remember getting in there hacking on this thing Doing it wrong And mitchell stepping in and saying hey, let me help you here's how it's supposed to work Etc. Etc. So to me it was very community oriented and I think a lot of people Contributed to terraform to either scratch their own itch At a provider that they thought was missing or helped rework its plug-in system, so it was Easier to use with other apis, but either way, I think a lot of us Volunteered our time On the other hand though is I got to drop those contributions off. Yeah, right. So I right Those set of commits I was done. I wasn't tracking the mailing list I wasn't looking at bug reports I dropped it off and I was out the people who were maintaining terraform I think they had to pick that up. They have to own it once it's committed It belongs to them and they are stewards over that project. Now. The question is How long Could they be Leading a project without being able to decide where it goes next without necessarily buying from the community That's where I think all of this stuff gets very tricky Especially someone that's been at google for about I was at google cloud for eight years the whole thing behind the scenes with kubernetes is that People the individuals or everyone thinks there's like this evil empire behind these open source projects Trust me folks Open source projects are not making executive board meeting discussions It's not happening. Well, and this was bigger. Yeah, totally again Kelsey just started about interrupt their embellishments for a second when this was hit home for me when craig mcluckie was like The reason that we need to get kubernetes in foundation. We google is so we can get some marketing budget For kubernetes i'm like don't you work for like the most profitable company on earth or whatever? It's like really you said something super important is because Things make zero dollars. Yeah They make no dollars. They cost money to run millions of dollars if you think about it If you have 10 engineers and really these are not just People fresh out of college. These are some of your most senior engineers Imagine taking just 10 of them average comp 400k you're 4 million in just on people costs Bootstrap these projects just on the engineering side So these aren't things that people are trying to like control the world. They're a big to be honest. They're probably more liabilities long term Um, then people realize them to be so when a company like that decides that they may want to pivot Have those people work on something else what happens to the project? Yeah, and so I mean is that a uh, I mean certainly an argument for One of the things I a decade ago. I was very jaundiced about things going into foundations And a lot less jaundiced about that now, frankly, I mean, I think that there are uh There's a time and a place for things to be, I definitely think OpenTF belongs to the foundation. I think that the Linux Foundation is probably the right foundation for it. Even though it pained one of my co-workers greatly to upvote my comment on Hacker News, saying, same, it's like, I upvoted that. That was extremely painful to agree with you on that. But I think that it does belong in the Linux Foundation. I think a lot of things do belong in a foundation. I mean, is that the, that's not a panacea, Kelsey, but is that part of the answer there? I think it is going to be the only answer for infrastructure, open source projects in particular, need decades of support. Yeah. Let's Encrypt, to me, is the golden example, in my opinion. It's not just a project, it's also a service. I think a lot of the contention we're having right now is around this service piece, right? This is, at some of the more popular open source projects, switched their licenses because of the competition around the service, right? I haven't heard a lot of argument around you're using my software. It's, you're using my software to provide a service. And so, at some point, we have to realize, we're not just talking about software checked into some repository anymore. We're, I think we're way past that. I think we're at the point now where there's a brand, brand establishes trust and credibility, then there's usually now service behind it. So, it's not just Red Hat Linux, it's everything that Red Hat does behind that that you want to tap into. I think that's the part that is becoming super, super tricky. How do you do that sustainably? And look, if I had to argue on behalf of Issue Corp, if I look at Terraform in my portfolio, let's say it's not making a ton of cash. I don't know what it's making, but let's say it isn't. How many people do you have work on it full time? The community would say, as many as it takes. You're a publicly traded company, do some of those revenues and pay people to work on it. Let's say you just want it to pivot, or the other thing, especially working at a cloud provider who depends on open source as part of their actual product portfolio that they sell to paying customers. It's only so far you can allow the community to dictate the roadmap. I think this is this anti-pattern where you're not super clear about what the governance model truly is. Yeah, what the leadership is. People believe it's a democracy. We will all vote on GitHub issues. That's not usually how it works. Typically, there's hard lines that says, hey, we can never let their project go in that direction. They're for legal reasons, commercial reasons, and the anti-pattern is not just being honest up front, saying, hey, this is a dictatorship. These are the dictators. This is what we're doing. This is what we're not doing. Fork button is up the right. Yeah, which is, I mean, Kelsey, you would definitely find a lot to nod your head out of my talk a decade ago, because that's basically exactly what I said, is that companies too often issue leadership when they shouldn't. I think actually the Hashi example, and I think some of these modern examples of which HashiCorp is kind of an example are, they're different though. Because so with, and I was actually surprised, I think, Adam, were you surprised when I was, I was definitely, I feel like I won't be doing this. Oh, I was floored. Like I think, like you, Kelsey, I thought that based on my experience with Terraform and my understanding of what I could pay for in the Terraform ecosystem, I didn't think it would be a huge chunk of their revenue. But according to them, that plus vault is 85% of the revenue. So Terraform, they call out in their 10K and 10Q as being actually the lion's share of the revenue, which is shocking. And they don't, because I think, Adam, you and I also both assumed that, and Kelsey, it sounds like the perspective you're coming from too, is that like your target in this relicensing must be one of the cloud providers offering a service. And it feels like, I mean, it not just feels like, I think it's pretty explicitly that like that's actually not the target. The target is these other folks that are offering their own Terraform variants, and they are building on the open source Terraform, and they actually are doing exactly what you described. If you don't like it, fork it. And the thing that I thought was a big reveal, Adam, that I definitely did not know about, I'd be very curious if you knew about this before we heard it last week, about Hashi basically closing themselves off to outside PRs for Terraform two years ago. And how that actually created a, there's a lot of kind of angst in the community. So I think that part of the problem to, Kelsey, to your point about like not being direct about where they wanted to take it, I think in this case, like where we want to take it is direct monetization. Like we want to actually sell this as software, which I actually think is one of my kind of modern corp, modern open source anti-patterns is if you are an open source software company, you do not want to run a software company playbook from the 90s or 2000s, and where people are paying to use it, and the more they use it, the more they pay. Because if you, one, you're creating a whole bunch of perverse incentives in terms of all the problems, Kelsey, that you outlined in terms of like not actually wanting to use it because it's kind of combined. But then you are also, because there is this open, you are built on open source, you are now, you're competing with yourself effectively, and you are kind of incentivized to denigrate the open source offering. And I talked about this a little bit a decade ago with license-based ports, where it's like, I'm going to, or rather a license-based offering where, hey, this thing's available under AGPL, but if you want to buy a proprietary version from me, I'll sell it to you. Same software, different license. What I think that we're, with folks that are heavily monetizing support, as Hashi is, they are saying, no, no, no, you can run the open source variant, but I don't know who's going to come help you in the middle of the night when Terraform doesn't work. Like, what, are you going to file a GitHub issue on that? I mean, no one's going to, it's like only I can actually service this thing, which is not a totally bad argument, but it also puts you in direct opposition to what you might claim about the software and has definitely created, I mean, can you imagine being like, sorry, we're not going to fix this data corruption problem. We actually need this to actually be able to sell more licenses, so. Yeah, this is a huge revenue generator in our services department. Totally. It's like, but this is a huge call generator. I think some good examples, I think some good examples that has a clear kind of line drawn in the sand would probably be Linux and Kubernetes. Linux isn't much without hardware to run it on. It isn't much without power. Isn't much without all the other things that go into it. So, you know, having a bunch of cloud providers agree to use Linux across the board makes a lot of sense because you're not trying to monetize Linux directly. You're trying to monetize as a component of something else. Kubernetes made a really great decision, which was to decouple the integration components, which is like the cloud provider module, the thing that, you know, what a node is, what a cluster is, how it auto scales, how it does networking. All of that is external. So when you get core Kubernetes, you still have to make, I don't know, 50 plus decisions about how it runs. And so when you go to a cloud provider, pretty much none of them are selling Kubernetes. They're selling a thing that is integrated into their cloud platform and give it a different name. And it makes it really clear what you're paying for. And if you don't like that, of course you can run it yourself, but you're going to have to make a lot of decisions and do a lot of work. I think the thing about Terraform is it's so good as is, right? You don't really need a UI to use it effectively. Totally. You don't need, until they have the cloud stuff, you don't really need like authorization and LDAP, all that stuff integrated. So I think the service providers actually do a pretty good job with like, if Terraform breaks, you can call us, because my guess is a lot of the things that are tending to break, the things that are like in the provider, right? And you can go to fix those API calls. I think that's what makes Terraform so tricky is that, yeah, they could actually see a market of people that can actually outclass them in terms of supporting Terraform and taking them where they want to go. To me, I'm thinking this whole move will be good, Terraform as a whole, because now we get to find out what is actually core, the content, the cloud provider modules, and the code you write. Is that stuff portable between this new thing, OpenTF? Terraform, and if it is, if that's going to be portable, I think HashiCorp now has two implementations. And I think the community has to remind ourselves. Terraform and HashiCorp came out pre-CNCF. If they were for that time period, and post-CNCF, those companies I talked to, those cloud providers I talked to, they would not use a piece of infrastructure technology unless it was in a foundation first. I think going forward. That's interesting to hear that from a user perspective, that CNC, because I always thought that the CNCF landscape was a little bit ridiculous. It's a roadmap, which looks all these postage stamps of technologies. But maybe I've been understating its importance, because it sounds like it makes a real difference to people that are deploying infrastructure. Because the CNCF, they don't tell you exactly how to govern your project. They don't tell you exactly where you must host it, even though a lot of people choose GitHub. CNCF gets a few things right up front. IP needs to be very clear. Trademarks need to be very clear. And once you get those two things right, plus the software, I think a lot of the companies that have gone through this, like the whole NGINX thing before HashiCorp, I remember NGINX being the big thing around, hey, no more contributions to core, especially anything that conflicts with our commercial endeavors. I remember that really put a stop to a lot of the momentum we saw in the NGINX community. So I think now that people have lived through this, I think going forward, people want to know, where's the IP? What are these trademarks about? Can I use them or not? Then what's the governance model? And I think CNCF now has shown that you can house a lot of these projects. Maybe they're not all getting all the attention and service that they need. But one thing is, if you're on the consumer side, you know what the IP is doing, you know what the trademark's about, and you know where the source code's gonna end up. So I think that part is, we're not going backwards from that. Yeah, and I think actually, there's another thing that you know, and I had talked about this in my talk a decade ago, but boy, has this been sharpened. You know that copyrights are held by their contributors. And so you know that actually, they can't stay in the CNCF and relicense. And for most of those projects, it's owned by all of the contributors, so they can't reasonably relicense anyway. I think that copyright assignment, I, again, felt this after our experience with Sun, when people assign their copyright to Sun, then Sun was bought by Oracle, and now you've actually signed your copyright to Oracle, which may actually not act in a way that is in accordance with your wishes, and they certainly didn't. I feel that that copyright assignment is a real problem. And I think that developers actually need to really start bridling, to the degree they're not already, at copyright assignment, and really understand what is in this CLA. Does this CLA, is it a DCO, effectively? Which is to say, Developer Certificate of Origin, which is basically like, hey, but this thing is, I've got the right to do this. Which, to me, satisfies this kind of boogeyman that we've never actually seen, where someone comes back and litigates against an open source project, because you've integrated my proprietary software into Kubernetes, and now I'm gonna sue Google. It's like, that didn't really happen. It's also worth, just before you breeze past that, that's used as a stalking horse in lots of these Busyl conversions. That we need to do this, some malicious or accidental copyright violation could sink everything otherwise. But worth noting, again, that this has not happened. It has not happened, and it's also soul-crushing for me to happen, for that Hashi's effectively making these claims, because Hashi is under the MPLV2. And one of the things I like about MPLV2, is there is a warranting of original work in the license. You actually don't need a DCO with the MPLV2. That's a beauty of the MPLV2. It's even more ludicrous to make that, and the MPLV2 speaks to patents. I mean, there's a bunch of things, and it's a great license. I like Apache 2 too, but I love the MPLV2, and you shouldn't be able to make a lot of these claims. And I think out of it, just kind of reveals the fact that people still do, reveals that like, oh, it's not actually about the substance of the claims. It's like, oh, we're actually just trying to be proprietary, so proprietary software, it's you. It's like, it's like, oh, it's proprietary software. I think another anti-pattern is our expectations of what open source needs to be. So, first of all, thank you, HashiCorp, because a lot of economic activity has occurred inside and outside of HashiCorp, because they chose to share their software. So, if a big company were to figure out some grand problem, all they did was just drop off the software, did nothing else. To me, you could appreciate that. Like, you could say, hey, thanks for this software. No company owes you great documentation. No company owes you videos. No company owes you bug fixes. That's extra. Getting that software, to me, is like that initial sharing of the ideas. Hey, here's a problem. Here's how we solved it. If this is helpful to you in its current form, you can use it, too, and if you wanna build from there, that's up to you, but here's what we've chosen to share. I don't know if we applaud that as much as we should, because we're so accustomed to that just happening, but I do think it's an anti-pattern that we look at that as not good enough in terms of what we're owed, in terms of everything else. I agree with you. I do think that we do need to be sure that we're being appreciative of this, especially infrastructure software that's open-sourced. I would say that, also, though, people need to, every one of those companies, I mean, like HashiCorp, itself was built on open-source software, and itself, like, they do not have proprietary compilers or tooling. They would have in an earlier era, but they don't. They were able to deploy on open-source operating systems with open-source tooling, and obviously, an open-source language in terms of Go, and so it's, which kind of dovetails to another one of my, I think, modern anti-patterns. Kelsey, I love your take on is the use of the term freeloaders. I think anytime someone is talking about freeloaders with respect to open-source, you gotta shut it down, because it's just, it's too reductive, you know what I mean, where it's like, look, we're all freeloaders here. We're all, at some point, like, we are all using, I mean, it is humanity's great collaboration, honestly, and we are, there is no company that is building all of their own software that you are, we are all actually collaborating, so let's not, let's just ditch the freeloader term. And you're freeloading. Freeloading on the shoulders of giants, exactly. We are all freeloading. Yes, we really are. Yeah, and we, and I think that, like, when that gets, when that kind of seeps into the rhetoric, so Kelsey, I agree with you that we need to be appreciative to folks that are open-sourcing their software, especially when they don't have to, but I also think it's important that we keep a perspective on the fact that, by the way, that software couldn't have been built had it not been for the shoulders upon which we freeload. Adam, sorry, butchered my line of work. I definitely agree with that. I mean, that freeloader logic is so crazy because, like, the earth, humans are just freeloading, right, we're breathing all this air, walking on all this ground, drinking all this water, and we just freeloading. So that's kind of nonsense. I mean, open-source, I mean, we've gotten to a point now where we are collectively building shared infrastructure. And I remember working at, when I first left CoreOS to go to Google, I remember being at Google and a lot of people really upset around Google adopting many other open-source projects and then commercializing them. And I was like, didn't you write that project in Golang? What did you pay? Did you pay anything to use Golang? Does that count? Does Go count? Right. I think it should. I think it should. C groups count. So, yeah, I think there's a... There's no JS count. I mean, because no JS also exists because of V8, which I feel like V8 is one of those things that definitely didn't have to be open-sourced and was. And it was really important to get that open-sourced. And, you know, that's happening kind of right at the time when, like, the expectation is around things are open-sourced. But, yeah, we are all building on this stuff. Yeah, that is pretty funny. But I'm pretty sure you actually... I think you bring up a good point around accountability. So there's the appreciation piece. Hey, thanks for putting this out there. You appreciate this initial drop. Now, we all got to be diligent about what this is. Is this a ticking time bomb? If I adopt this, am I going to be on an island? What's the legal ramifications for using this? What's the legal ramifications for contributing to this? I think we have to think about that long game. And then, look, I've been guilty of it as well. Sometimes I just drop off my contributions and don't think much about the license that I'm signing or what happens to the project going forward. I feel like I could do a better job with that. But I think the accountability piece is that you must be willing to exercise your rights of forking the project, taking on the responsibility, have it go in the direction that you want. And if you're not, and I honestly think if you're not, I don't know how serious you are about open-source, right? This idea, I think a lot of people like the idea of downloading stuff for free, having a community to learn from, place to report issues and see them eventually get fixed. I think we all agree on that part. The other side of that equation, when someone like HashiCorp does what they do, accountability piece. Honestly, I was like, hey, people are piling up on HashiCorp, this isn't right. And Brian, you shared this video on Twitter. Oh boy. The CEO of HashiCorp. And I was like, man, Brian be exaggerating sometimes. Not this time. I watched it. He used the word malicious to describe their open source strategy as if they tricked people like me. No. We're contributing my free time. I was contributing and writing unit tests because I actually cared about the quality of HashiCorp's tools. I was using HashiCorp tools. I just thought it was important to be a part of the community, not just as someone was downloading, using things for free, but as a contributor, was willing to step up, not just fixing my own issues. I spent time in those chats helping other people get on board. Maybe I fixed a bug or two, but to hear someone think that they were being malicious and that they tricked someone like me into contributing, then he doubled down on it by saying it again. I would say the topic of this is corporate or enterprise anti-patterns. That is the worst pattern ever. You are not tricking anyone at all. You should not refer to anyone who is taking their spare time to do anything in your project. I don't care if it's to correct a typo in the readme. You cannot think that you're some savvy 4D chess playing software mastermind. You are not. You're just continuing the lineage of how we've decided to build software together. I think that part, I'm surprised the video is still out there to be found. I am shocked. I definitely think that is. That's the one I would say they should sit down and say, hey, you should not think of these people as malicious. Honestly, that's the attitude going forward. I can definitely see the community decide that they'd rather go use something where there isn't a malicious motive behind it. You're paying customers. When you say malicious and then double down on it with like, it's the only word that fits is malicious. You're like, oh my God, what are you doing? I mean, Adam, you were obviously, I think all three of us were shocked by that. I was floored by that. Yeah. Floored that he doubled down as well. The truth is, you can probably make money for a long time even with that attitude. Let's just be honest. Like, Oracles of the World exists, you can probably make a ton of cash in the short term by scaring people into paying for licenses. You can probably get away for a little while. I think in the domains in which they operate, it is easier to move to another solution. Absolutely. You can replace console. You can replace Vault, and you can replace Terraform. So you have to have a different attitude when you're in that realm because you can be replaced. And honestly, you can be replaced with your own software. Vault button is still there. That's right. Right? And so you got to be careful with that. And you know, open source software did not invent community. Because we've seen people helping each other with software since as long as there's been software, unpaid, because they're so passionate about the software. And open source has just opened new avenues for helping and contributing and participating. But if you are lucky enough to be at the helm of that ship that has grown a community, where you have people so passionate about what you've built and what they use, that they want to help other people and fix typos and contribute code, man, you just got to say thank you and appreciate how fortunate you are. Because there are lots of folks who want to build communities and want to marshal that kind of enthusiasm and passion. And it's hard. And Adam, maybe this is the example you have in mind. But think about all of the community that Apple built in its most proprietary era, right? In the 80s and 90s and early 2000s, where you had people who were excited to help one another and to evangelize the platform. You cannot imagine Steve Jobs saying like, oh, by the way, this is like, this was malicious. This idea of having users help one another, was their suckers. Your suckers, your chumps, right? It was galling to me, because I think as someone who also pays for software, as we do, and we consume things, we've got a lot of suppliers. And boy, if one of our suppliers were to say that, it's like, sorry, a commitment to our shared success is the bedrock of our relationship, it has to be. And I don't care who you are, but if we have, if there's any economic transaction where Oxide is paying you, and you believe your strategy involves the word malicious in any way, it's like, no, I don't care if it's UPS, I don't care if it's a contract manufacturer, I don't care if it's a design partner, it's like, we have to be committed to shared success. And that to me was just like, yeah, Kelsey, it's, I mean, and it's, of course, like thinking from, I was thinking from my own, honestly, outsider's perspective, but from your perspective to think like, goddammit, like I did a bunch of things for you that I did not have to do. I was, yes, I was a, you know, I had a, you know, I was at Google or whatever, I was at CoreOS, I was doing this, but I like, I didn't have to do any of this stuff. I was doing it on my weekends, I was doing it because I wanted to help out people. And to think like, I'm a chump now? I mean, that must have just been gutting to hear. Yeah, and I also think, you know, whatever margins you end up growing with the proprietary software, if we look at the patterns for over the last 20, 30 years in the world of open source, next project is coming for the margins, period. You already know that the target will be there. And remember in the cloud, very particularly, whenever you have like, let's say you have a observability platform or container runtime, the moment that thing costs more than like cloud compute, it costs more than the VM that it runs on, it costs more than the thing that is being managed, that's when that profit becomes a target, by the cloud provider that has to go and lower the barrier of entry to that type of software, their customers, therefore a, them forking it or selling a competing version, or you're just as something that requires a lot of service. And at some point, you're going to see the service industry, it's pretty big, will come and try to fill that service gap. I think most people have to realize is that your open source game, you have to realize that your position is somewhat temporary. And the sustainability part is going to require a lot of effort. And I think that brand comes so important. So the one thing I would say, Shikorp has going well for them, is they have a wonderful brand and I'm going to be fair with them, they have a wonderful track record, at least up until this point of doing the right thing by most of their users. So let's see how far that carries them. But it could definitely be unraveled through. You want to see for the user community part is, we want the actual competition. Exactly. I mean, I think if you're a user, it's like, sorry, I actually would like someone to be providing pricing pressure on you, please. That's right. The benefit of open source is sort of the stalking horse of, I could do it myself if you go out of business. But even more compelling is if I'm using something open source and consuming and paying for services around it, if you, my vendor, starts being rapacious, well, other people will step in and provide the service more economically because they can. Just like, you know, the point of capitalism, as I understand it. Well, and I think that's a comment in the chat that talks about, and I actually somewhat agree with this one, a group of passionate contributors can also be a burden. Yes. And you can imagine a situation where I don't work at Google Cloud anymore, so I can use them as a hypothetical example. Imagine that you have a service, a compute service, let's call it Cloud Run, and Cloud Run starts to make a ton of cash, and not only a ton of cash, let's just say 10 years goes by, it has a particular API, has to be backwards compatible to some degree, and it needs to have some era of, or some guarantee of support going forward, and it needs to have very tight integrations for security reasons. Now, the community comes along and says, hey, we would like this project to go in a completely different direction. At this point, you have to say, no, this project will never go in that direction. To be honest with you all, this project is pretty much set in stone except for this roadmap right here. So when that happens, I do think the challenge of having people who really, really want to change things, really, really want to experiment, how do you tell them no? And I think that probably the other anti-pattern. So one thing you can do to help you be able to say no without necessarily shutting things down completely is to have a great plugin and extension system. One thing that makes Terraform so great, one thing that makes Kubernetes so great, one thing that makes Linux so great, they do have extension interfaces. So if you need a new driver, you need a new integration, you don't need to come to core or get permission from the core maintainers to do that. So I do think this thing around plugins and really first-class extensions, one of the rules of the Kubernetes project was, let's say we need to do something in the cloud. Like for example, integrate with IAM. Amazon has IAM, Google has IAM, a permission system that you want to integrate deeply. The thing we did well was put the hooks in core, put the implementation outside. That way, everyone can do what they need to do with authorization, authentication, and you don't necessarily have to have this situation where we start favoring one cloud provider over another. That's a good point, but it does require the project to kind of be interested in striking this balance of like, we still want to encourage this kind of experimentation that may be not where we want to take things, but we want to invest in the ability for you to go do that experimentation on our platform, which I think is not everyone wants to do, but I think it's important. One thing Brendan burned. Sorry, real quick, Kelsey, something you've now said twice, but I think is worth highlighting is having that be real explicit about what everyone wants out of the relationship. And I think people are afraid. I think companies sponsoring open source can be nervous about saying that it's a dictatorship, that we're never going down some particular path. And you might want it, but it's just not going to happen. But to your point, I think that that is setting everyone up for heartbreak later and being really explicit about what projects are and what projects aren't is really important. I never contributed to OpenStack. I was an observer of how much pressure OpenStack had to evolve. A lot of those evolutions required painful changes to the core itself. Made upgrades hard, it made contributions hard, was hard. Remember when Kubernetes came out, Brendan Burns, one of the original founders of Kubernetes was still at Google, was really adamant about the custom resource definition. Not a third party way of doing things, but a first class way of expressing Kubernetes APIs that if you did it, you got all the same integrations that the core things had. So number one, broke up the API into its own kind of domains. Then we had this concept of core, but it wasn't done in a way that if you were to build a third party thing, a new resource definition, you want to manage SSL certificates. The way you did it is almost the same way that the core worked. That release valve, I think one of the biggest anti-patterns is not thinking about that release valve. You know people are going to do networking different. You know people won't agree on the features and capabilities. If you don't have that release valve, it just becomes this pile of issues that only the maintainers can solve. So I think having that outlet and designing your API around it for growth, I think that's probably the thing that we will see permanently change also in the future. You don't want to release an open source project, especially infrastructure one, doesn't have a very clean and clear extension API, and you use that extension API yourself to build first party things. That way the community and the core benefits from the same improvements over time. Yeah, that's a really good point. And it's got to be that important to you. And I'm actually now really curious to know where, Brendan, was that coming from Omega or Borgman, or was it coming from other? It feels like that's the kind of wisdom that only scar tissue provides, and I'm curious now where that scar tissue would have come from in terms of, it feels like, because it does feel very wise, honestly, especially to have these APIs be used by the system itself. So they are first class APIs. My first experience with that scar tissue was maybe with Docker. When Docker came out, the Docker daemon was everything. You built images with it, you managed your repositories with it, and you ran processes with it. This API was very, very limited. I remember Solomon really doubled down on batteries included, but extendable. The problem was API that they would expose for networking was very limited, so you couldn't do very much. And you had to wait till Docker evolved, and that creates a lot of distress. In the Kubernetes world, I worked on CNI when I was at CoreOS, and I remember me and another person were designing this networking layer, and what should the API be? You go through your modeling, what object types, and I'm like, I think it should just literally be nothing. Let people slide into a namespace, configure the network, I don't care if they use Linux shell out commands, it doesn't matter. They return an IP address, and so that way you can support pretty much any networking stack, whether it was on the server or a larger fabric. You just made the API super open, and of course we could always have libraries that made it easy to do common tasks. I think the scar tissue from how Docker ran away with it all, but made it really, really hard to extend it in a way that was compatible with bigger projects. Absolutely. And then we took the Docker API and implemented our own de novo daemon. We didn't use the Docker daemon. We basically had the Docker API plug into our control plane. And Docker Inc was like, whoa, how is that possible? It's like, well, you have an API, we're just implementing it. But it was not something, that is also something that they did not view at all as a, they had no real commitment to the stability of that API, and it was just sloshing all over the place. And as you say, Kelsey, because of the batteries included approach, everyone was constantly kind of blocked on Docker, either on the API to evolve or on the daemon to evolve. That's interesting. I should of course realize that Kubernetes was a direct reaction, and it was in so many other regards that it was learning from some of the mistakes that Docker had made. So Kelsey, one thing I'm dying to ask you, because you kind of said this at the top around the importance of dev rel. And I think it is important, but I feel it's also there's a distinction between dev rel as done in a traditional proprietary software company in the Microsoft model, say, which McJanet, the CEO of HashiCorp sites directly as his inspiration. And in the video we were talking about earlier, they got 60 folks in dev rel, it's like, that's a lot of folks in dev rel. How much of that dev rel is actual community building? I mean, is that a, and I actually asked this as an earnest question, I'm not trying to put my thumb on the scale, because I actually don't, I mean, is that, is traditional dev rel the right way to build a community? Is it effective to build a community? Oh, I mean, look, I've never done dev rel until I got to Google. And probably still have never done dev rel, because when I think about what dev rel is, it's very dependent on the person doing those, that job role. If you're a person who used to use a piece of software in production, you're going to be advocating probably for other people that use it in production, or at least attempt to. And a lot of the things that you do, you may be focused on things like best practices, fixing bugs in the software, extensions, that kind of thing. Some people, very early in their career, don't have a lot of hands-on experience. They may be super creative, and you need that as well. That creativity could be creating killer tutorials, amazing video editing, all kind of things that really help lower the barrier of entry to a person that's trying to learn something. So there's advocacy in terms of, I want to make this material, this content, this software accessible to people. And you have some people that know how to build communities. That's what they specialize in. They've gone through great experiences building communities and bad experiences building communities. When those people enter into DevRel, they're going to focus on the health of a project, right? How many contributors do we have? Are the maintainers diverse across different companies? These are all different skill sets. I think what DevRel represents is software industry being very clear and intentional about that type of work needs to be done. Before it was called DevRel, I remember going to PyCon in the early days. All of those core developers used to give all the talks, used to sit with people that would have problems, help them fix their bugs, sit on IRC, give them examples. Some of them created videos and demos, documentation. They just did it all. I remember when Golang came out, Rob Pike, OG Rob Pike gave this beautiful presentation called Hello World. He just broke down every element all the way down to the assembly of how Go works by just showing people Hello World. To me, that's a form of developer advocacy. So I think you're going to be in this new era of software where people are attracted to community, meaning people prefer, if I had my choice between two open source projects that do similar things, I'm probably going to navigate towards one that has a community, meaning multiple people who use it in production, willing to share their experiences and teach people. Then I would like a group of people who can at least hear me out and say, no, we're not doing that. This is the wrong project. Maybe go try something else. I think that is now a necessary skill set. Someone who wants to really do a good job maintaining software, they expect other people to use. And other people to use. part is where the community piece comes in. So I think you're right. Some people have no idea what DevRel is. They're like, Ooh, um, big company X have DevRel. Let's hire some DevRel people. It's like, what do you want them to do? We want them to get us more GitHub stars. And you're failing. There's no guarantee they're going to get you more. I mean, you can buy them now I've learned, but I think when we say advocacy, some companies are in just different phases. Some people are in the awareness phase. We have this wonderful software and it's free to download the low bar of accessibility to get into the software, but no one knows about it. The person you want now, it's someone who can go out into the world and raise awareness and a lot of the people who maintain these softwares are these software projects have a huge following already because usually it's not their first project or maybe a domain expert. Has chosen to serialize their expertise into an open source project. But whether they admit it or not, they're doing a bit of evangelism. They're doing a bit of advocacy work themselves. So, okay. We have the awareness component. Other one is like the adoption problem. Like, Hey, no one is using this thing. He put it out there. No one seems to care. We have to go find out why. Then of course you have the revenue side. Got this thing. Everyone's using it. We have no idea how to get people to pay for it. So we need to go find out what's missing to close that gap. So unless you know where you are in those phases, different features in a same project can be in one of those phases at the same time, and that's how you want to think about advocacy. If you can afford it, sure. You can have a dedicated DevRel organization. To be honest, everyone at the company should learn how to do a little bit of advocacy for the things that they're building. I absolutely agree with that. And I also think, Kelsey, to one of your points, it's like, if you're going to have this kind of DevRel community advocacy function, please make sure it's sustainable and make sure that you are, like, if you are doing this to get product market fit, that gets scary. That's when you get to like, yeah, we don't have product market fit. We don't know how people are going to pay for it, but we know downloads are up and to the right and we want them to go even more up and to the right. So we're going to add a bunch of DevRel folks. It, you begin to get some sustainability questions about that, about, so what happens when you actually, like the DevRel folks are not going to give you a path to monetization. They're simply going to create more folks that are interested in the thing that you already don't know how to monetize. So it's not, I think you can create a path to monetization. So one thing I remember the first time I got into DevRel and my growth, my personal growth, as an engineer working on open source projects, it was always I'm the thing that I thought was most important to the community, whether it had the most upvotes or it's something that the community talks about a lot as like a showstopper barrier, either a feature or a bug as an engineer, I would fix that thing, it merged and then put it out in the world and hope people would actually use it, that was kind of the feedback loop. That was the cycle. And then sometimes that could represent, like when I was working at Puppet Labs, we would show people what we were building at PuppetConf, right? Every year or every quarter you can go to a conference and show people what you're working on. And then they would tell you what they were doing so you can figure out how to align everything. That's what I did from a peer engineering mindset. Then remembered, there's a difference between community and customer, right? One is willing to pay you money for what you do. They need something slightly different. So for me, I learned how to go from like, hello world to hello revenue. It's very different. For example, if you're doing advocacy at that level where you want to also influence revenue, you have to also learn how to talk to people that cut checks, that spend money or spend time that they could be using somewhere else. Now you have to go look at that gap and say, hmm, I notice 85% of our customers are using Active Directory, right? I look at our project. We have zero Active Directory integration. I got a feeling that if we added Active Directory integration, they would pay for it. There's the prototype. And then you have to measure it by saying how much revenue is coming in because of that feature. That to me is that same pattern that we use for everything else applied to the revenue end of the spectrum. I know. And I love that because that has, that's basically taking it that, you know, Hey, look, if you're in developer relations, you have this touch point with the way people are using the software and use that touch point to look around you and gather data and ask questions and talk to folks who are maybe in the community now, but want to become customers. And I mean, I think that when folks are like, well, how do I build a business on, on open source infrastructure? It's like, well, you, you need to actually like find a product that you're going to sell and you need to do that by like talking to people and getting out and understanding why are you using my technology? What's valuable about it to you? What are the missing bits? What are the bits that you pay for? How could I create, get more value for you? So ultimately you want to create so much value that you can go capture some of And still feel like a win for the customer. And I feel like that bit is like a lot of these companies are losing the plot on that. And it's like, you can't just take what you got and monetize it. It's a lot more complicated than that, but it's a lot more fun too, because you get to learn how people are using the stuff and go build things that they want you to build. So I think that's probably the biggest, sorry for shifting gears here. Is open sourcing the thing in the first place? We found the anti-battery. There were a number of times where I would meet with a team and they would say, we want to open source this thing. It's like, show me the thing. Sit there patiently. I'm like, I'm going to be honest with y'all. Nobody cares. I don't care. I'm surprised you care. This thing solves a problem that you don't even have. Are you using it? No. Kelsey, is it routine for people to cry in these meetings? Like, no, no, no, no, no, no, no, no. They laugh because it's true, right? I'm sorry. Did you build this because you had nothing else to do? Like, how'd you know? I said, okay, no worries. No worries. Now here's the thing. Let's just do a very basic open source checklist. Are you going to maintain this project for 10 years? Maybe like, no, I don't, I'm going to drop this thing off. Hopefully it lands on Hacker News and I'm out. It's like, hey, that's an anti-pattern. If you just want to drop this thing off, then the readme should say, hey, you're dropping this off. We have no intention of reading any of your pull requests, taking any of your bugs seriously. To be honest, we don't even use this thing. We are just trying to get the promotion and this was our best chance at doing so. Do not use this thing in production. That's the type of honesty that you need to give to a project like that, because I think the anti-pattern leads to brand damage. You have some of these larger companies that say, hey, open source project that isn't any good, I company X. It isn't helping. The act of open sourcing doesn't help all by itself. I think sometimes you got to have a slightly higher barrier. The reason why I think it's an anti-pattern, you open source at all, or in the cases, sometimes you're open sourcing a little too early. I'll give you an example. Let's say you do have a thing that your company actually uses, or you plan to have a commercial relationship with customers. Here's the thing. You need to get the roadmap right for the paying customer first. It means all the hard decisions. You don't want to be part of a democratic process. You need to go ahead and make those dictator-like decisions for the paying customer. Get it locked down, have a good idea of what V1 will be. If you have a clear path to V1, then when you open source the thing, you can be very clear to the community. I think the Go project did a decent job, at least the one that I was paying attention to. GoLang came out and said, listen, this thing is not V1 yet, but here's what it's going to take to V1. It was spelled out pretty clear. These are some things that we don't want to keep. We're going to break some stuff because this is our only chance. Because after V1, we want to keep it, of course, compatible going forward. I think having a clear path to V1, because I think for most enterprises and companies, it is your last chance to take everything you've learned during the early stages of development of that project and fix them. Because I see a lot of open source projects that get out too early. They get popular too early. It's really painful for you to change any of the APIs because it's going to disrupt a bunch of people. Yes. I think that people talk about the peril of having no one pay attention to your project, which is okay, that's one failure mode, but another failure mode is actually a lot of people pay attention to your project and people get really interested in it, and now you've got this constituency that you feel you need to serve, but you haven't figured out your product yet, Kelsey, to your point. And you don't actually know, and now all of a sudden you're getting pulled apart in two different directions. And there can be a lot of discord, honestly, in the community. I think that I would dovetail onto that. I would say that it's very important when you are opening something, especially something that for the first time, you're going to open source it. You want to be pretty clear about what's important to you, about not just like what's on the roadmap, but these are the kinds of things that are important to us and not important to us. You know, I gave this talk on software platforms as a reflection of values, reflecting on the divorce from Node.js and how it was really a values divergence more than anything else. And the fork was ultimately symptomatic of a pretty deep values divergence. So on this topic, Kelsey, a question that came up in the chat is like, hey, I'm kind of like, I'm not an infrastructure software. I'm in this case, I'm making software for teachers or customers or teachers. I don't know whether I should open source it or not. I mean, I feel that like if I open source it, it's a permissive license. People are going to take it. I'm going to get, you know, the old kind of concern about like I'm going to be everyone's just going to download it. No one's going to buy it from me. What's your rubric for when to contemplate open sourcing software? Yeah, like if I was selling, I don't know, let's say I was building an iOS app for my thermostats and I want to put it on the app store to charge money for it. It probably would not open source it until I figured out if there was going to be a viable business or not, because my goal is to sell it through the app store. That's my primary goal. And so I'm not going to even flirt with the open source component until I go down that avenue. Number one, I want to learn what people actually are paying for, because I think what some people forget is that initial drop is not the full lifetime of that software. What people really want is when new features come out, when new restrictions or regulations come up, I want someone there to be timely in fixing it. So if you're building software for teachers and more than likely they're paying for that. They're paying for you to do all the things necessary, make their requests and have a meaningful SLA. And in many ways it's like workflow insurance, right? Here's the thing I can do. A workflow needs to change. The district is now using a new software to keep students' grades and things. We are not developers, right? We are educators. We would like you to integrate with that so we can use your software and continue doing so for years to come. That's typically what people are paying for. And so that subscription piece becomes a thing. Now, here's the thing. Let's say you can't meet demand. You're maybe a one person shop. Um, the customers you can handle, you can handle, and now you have to, now you can make this decision. Do I want to create an ecosystem? That's very different than just having people do exactly what you do. I mean, if you're just a one person show, you may not be able to service Europe. You may not ever be able to service these other continents because you just don't speak the language. You have no context there. You don't have a sales force. So now the question becomes, do you create an ecosystem? Is there a network effect? If you create. There's a network effect, but also it's just one of these things like no one's getting that money. The pie is too small. The pie is too small. It's you don't even have to worry about someone taking the revenue because it's not there. So I think once you figure out what the business model actually is, is it actually support backed by the software? The software improves as a manifestation of that support. What I would do is figure out what's what, and then let's say, think about open source, as we've seen, it's hard to take it back. So let's say we take that same example that you're building software for teachers. You say, you know what we're going to do? I'm going to open source the connectors. The thing that connects to these weird school district, you know, proprietary backends. I'm going to open source those pieces because, you know, there's a lot of people probably going through this. I want to do something good for the community. You all can have my connectors that I also use in my software. You can slowly tease out the parts that you believe could benefit from an ecosystem, meaning there's other people that are helping you maintain these kind of nuanced little bits. That's a win for everybody, including you, but not a direct competition to your business. The other reason I would advocate for it is let's say you're done with this. I don't want to be in that business anymore. And creating this ecosystem means you don't want to leave the people who bet on you and that software high and dry. I think one pattern we've seen is that kill switch kind of situation where I'm done with this. I'm going to take the whole software package, clean it up, and open source the open source, the whole thing. And I'm going to support it for another year or two, but I'm going to try my best to have the district like find a new maintainer, pass this thing off. Maybe someone doesn't have commercial interests and they just want to keep the project alive. We've seen that happen with certain video games. I think my advice here would be you can't take it back. It's harder to take it back to give pieces slowly. I would recommend go that direction versus open source and I hope they will come. And I mean your feelings hurt when no one cares about your business. Totally. And I think I mean I just love the way you're phrasing that like know why you're doing this. Be able to answer the question of why you're doing this. And I mean for us at Oxide where we we have open sourced effectively everything we've shipped on the rack. For us it's important to give that transparency to our customers. We want we have been customers of proprietary firmware and software and it sucks. And we want to give that transparency for it. So there's this other goal that we've got that is and whether if people use our software we think it's great if you want to use our software that's terrific. But ultimately like the reason it's open is for our customers. It is so our customers can see what exactly how exactly this thing is built so it's not actually opaque to them. And that's that's probably not a not every company is going to have that goal in open source. And so for us there are a bunch of things that don't actually matter as much that we're you know we are not actually I mean we are not going to spend a bunch of time in you know we're not going to hire someone to do hubris dev rel. All right. If you were waiting to be waiting to be clear hubris hubris is our embedded operating system. I hasten to point out just for those who don't like that. Oh right. I promise no context. Sorry. Right. No context. Listen I'm sitting in the litter box and we're not going to elaborate on that. So I don't know why we would. Fair enough. But so. Yeah. Sorry. We should explain that first. Kelsey hubris is our is our Rost Genova operating system that we run on the service processor and the root of trust. And we would love other people to use it. We think it's great. But we also are not whether other people use it or not is not really part of our business. The reason it's open is so our customers have that transparency. And then someone else can fork it to people be able to do that. So we want to inhibit that. It's under the MPLB 2 so people can do with it what they'd like. But we are not going to be necessary. I mean we are going to keep it in a direction that's consistent with the product that we're building. We try to be. And you can let us know. We try to be very explicit about that in our read me's and our contributing documents because I think it is something you've hit on a couple of times Kelsey is just the importance of being direct with your community. Another question I was going to ask you just because it is the kind of the thing we've been circling. I mean I really do think that the copyright assignment is wrong in part because it allows for relicensing. I really do think this relicensing I think ignores the fact that you have a social contract with your contributors and those contributors contributed under the idea that this is going to be I assigned copyright because I trusted you to basically continue to develop this thing under this license. To me that social contract is really important and Kelsey is as the one that was on the other end of that social contract with respect to HashiCorp. What's your take on that. It depends. Really depends on my part because I think I'm being very transparent 80 percent of the time don't care. I'm just being honest. I just literally don't care. I remember doing a contribution to open policy agent integrate with Google's IAM and it's their project to have their own ecosystem. My only goal was to enable that ecosystem use native Google Cloud authorization protocols. I was like the only goal and wrote my unit test updated the documentation work with the core team got it committed got it merged. I'm not I'm not tracking anything else so honestly for me giving them the copyright felt like me giving them the responsibility and the burden they can do whatever they want with it in that scenario. But I were contributing under a different context meaning let's say I was let's just use Terraform since that's kind of the hot topic right now say I was a service provider and I was providing a managed Terraform service. And one of my customers a bug I chose to fund the development of the fix for that bug I am going to be looking over clearly I give you this contribution back to the whole I need to understand. That is my copyright. Actually, not just my copyright, but I can't have you lock me back out of the thing I just fixed. That's where I would probably care a lot more about this thing. But also, I'll say this, the other anti-pattern is, are you building businesses where you don't have this kind of clarity? That's the part where, look, actually court made a decision that some people don't agree with. And to me, a part of accountability, a part of this kind of democratic process we've used in some of these open source projects, have every right to voice your opinion. You also have to take accountability on the other side. How are you building businesses you don't have a clear or certainty around the IP, or the trademark? You built a whole business, you should have LLC, created a logo, opened a checking account, and the very thing that you built that business on, if someone were to ask you, who owns the core IP behind your business, and you say, I don't know. Well, Kelsey, question on that though, wouldn't you answer, it's open source. It's open source and stewarded by a company that has a great reputation in open source. Yeah, but here's the business piece, risk assessment. Now, I'll give you a good example. When Kubernetes came out, it got wildly popular. I was still a, I was contributing in my spare time while working at CoreOS because we had a competing offering called Fleet. Wasn't clear that Kubernetes would be super successful. Right, I remember Fleet, yeah. So, and so I was like, you know what, as I was contributing in nights and weekends, I went back to Alex Polovy and Brandon Phillips, like, yo, I think this is the thing. I plan to keep contributing to it. Hopefully that's not creating any bad blood at the company I work. This thing is winning. So we decided, without doing all the legal stuff, that we would pivot to this thing. Now, this is pre-CNCF. But when we did this, I remember shortly after, maybe six months later, after we made the big pivot, I'm joining Google and I'm like, yo, this Kubernetes thing has a clear path. Amazon was like, we're not doing anything until we understand what the IP and the trademark is for doing this. A lot of people don't know, but there's a popular operating system that's Linux-based. A lot of cloud providers didn't get this figured out until their customers started using said operating system. Then said operating system needed a chunk of that hourly fee. Never again will this happen, because people understand. So open source is a thing, but I think now doing the risk assessment as Amazon did to Kubernetes, what we need to see is X, Y, and Z. IP needs to be clear. Trademarks need to be clear. We need to understand what happened. So you start asking basic questions. Can you change the license? Can you limit the use of the trademark? We don't want to go and spend a lot of marketing dollars on this name, only to be told that we can never use it again. This is something we should learn now. Like we have too many examples now where we know open source doesn't cover all of those things. Trademarks and all of these other things are not covered. So now that we know, we need to start asking that question. So I would say anyone that's upset by that decision, hopefully so. You also got to go look at your own team and say, hey, maybe we don't understand the software business as well as we need to, because before we start ever again in the future, building value-added services or products on top of other things, we need to get clarity on the trademark and the IP. And look, I don't have experience at every large company, but just a few. One thing Google used to do pretty well is, people used to always criticize Google with these bad product names. They did it on purpose. The purpose was to solve the trademark problem as well. So think about, I'll use one public example that everyone kind of knows the story behind, but maybe they don't understand how it all links together. We were working on the new version of App Engine, aka now Cloud Run, which is container-based, takes a lot of inspiration from the Kubernetes world. We built all these nice extensions to Kubernetes, creating the foundation for Cloud Run. Now it's time to open source this thing. We kind of knew we were going to open source it. Also did the right thing when making sure that it was going to do enough for what our customers are going to be. And we also thought about version skew. What happens when the enterprise version needs to skew from this open spec API thing? The other thing we thought about was the name. We called it Knative. Everyone's like, that's such a stupid name. It doesn't really mean anything. It means a whole bunch. It means not our commercial product is what it means. So you can use Knative in your marketing. You can say powered by Knative, no problem, because we are not going to call the commercial thing Knative. It's just super clear. That's it. I mean, it's actually what we did with D-Trace too. We deliberately did not trademark D-Trace to allow people to use it. And we were not going to have a product named D-Trace. So it was part of a larger system. That's really interesting. And then Kelsey, how do you square that with things like, so I mean, Go is not in a foundation, right? Isn't Go just still a Google project? Well, it's interesting. I've never worked on the Go team, so I can't speak authoritatively for the Go team. I think Go was a lot like the majority of the years of Python to me. Python was a bit clear. This is a big, what is it? BDFL. Benevolent dictatorship. Yeah. I'm making final decisions. I understand what the project needs, but at the same time, we can only go so far. And I think having that pep process as the release file for people to at least, no, I think the thing that the Python project did some early contribution, right? Yeah, totally. The peps, the PEPs, right? I agree, yep, yeah. All right, no code. Do nothing. Specify what you want. Give us some examples. Let us iterate on the API. If you're willing to do all of that, more than likely, you're going to be able to change the language. Problem. Or at least have the assurance that the language is not going to, you're not going to wake up to the language trying to be rapacious suddenly. Exactly. I think that is a good way to kind of phrase it. Also, it's a great way to say no by saying yes. Hey, I would like this new feature from Haskell. No problem. Write up the PEP for it. Yeah, right. I'm not doing all of that. That's right. Okay, well, when you get around to it, we'll evaluate it. Go fetch those stones and let us know. Yeah, well, that's actually a good point that the foundation kind of gives you the assurance that there is at least some modicum of process for deciding what's in and what's out. And if you're going to build your, use this as foundation, knowing that such a process does exist is actually really important. And a foundation is one kind of easy way to assure that. There may be others, but yeah, this is interesting, Kelsey, in terms of like this kind of new era of open source. My personal preference, I like projects that have actual leadership. Yeah, me too. Because these things are typically reflective of the personalities who've created them, their philosophies, their way of doing things, their way of thinking about things. And ideally, the community then starts to take on that. Now, those people should learn, they should evolve. I do think a lot of people like curated things. When you go to a nightclub, you like the DJ. The DJ is important because they curate the music. When you go to a particular restaurant, the chef is important because they curate the menu. Things you actually like, even though you may not say them out loud, you actually like these things. And when it comes to open source, again, I think one of the anti-patterns on the community side is, you think this is a real democracy. You really think you can get enough support on a GitHub issue and I have to do it. Oh, close button is there. It will not fix is an option for me. So since that's how it works, I think the core contributors, the ones who probably are willing to be there long-term and stick out these issues, and to have a bit more weight. And I think it's fair, especially if the person leading the project, doing a good job. And I think in the case of Golang, going back to your example, Golang, I think their process, and I'm not saying everyone has agreed with it because I think there's been some hiccups. Maybe the Go team could have been a little bit more clear, like, hey, this is somewhat of, it's not a singular person dictatorship because I think a lot of people own different parts of the Go ecosystem. Those people tend to be trusted by the community to do the right thing. Like encryption, there's a person who kind of really focuses on that area. And so I think they've been doing a good job for over 10 years. The collection of people who have come and gone in those different parts, been a bit of a trust thing that has been granted to them. I think what the community is like, hey, how do we propose things and we know that it has been evaluated? Now I'm gonna give a lot of credit to people like Russ Cox here is that, remember when Go was implementing modules, right? We had no module system and the community stepped up, added one. And I think it was like Go deps. And honestly became like the de facto standard. Like most projects just started using it. Russ Cox looks at it and says, hey, hold on, hold on, hold on. I see what you got here. This is pretty good. I have some ideas too. Boy, did those ideas represent like a 7 trillion page blog post about the diamond problem, the advances in dependency management, all the things that you have to think about. When I read it, I was like, wow, this level of analysis is super deep. I think he was able to focus on that level of analysis because there was a little bit of runway afforded to him by having, in his eyes probably, temporary solution in place. Yeah, interesting. And it was a big rub about that thing no longer being merged into the core. We would do something else instead. Those kind of things will happen in a set up this way. I'll be honest with you, that's the reason why I think I like Golang. It has a clear personality of what it wants to be, what it doesn't want to be. I would hate, and I've been learning Swift. You know, the thing people use in the Apple ecosystem, even though it's a open source language. Swift has every language feature I've ever seen in any programming language. Swift has it all. I can't tell. This is my first and last day writing Swift or something like that. You had some tweet. I did push through. I pushed through. I gave it two weeks. I actually built some things and some mock servers and some UI stuff, and they have some wonderful frameworks. To me, maybe I'm just late to that ecosystem that I don't know the history. It feels like everything is in there. And it lacks identity and personality for me. Well, I think it's just as you're describing this. I actually, I just think so strongly that projects need to be very clear about their values, because not all projects are going to have the same values. And then I can give some predictive power about whether you're going to be receptive to this or not. I mean, in the Rust community, performance is really important. And if you have something that is going to be, performance and robustness are important. If you're going to make a big change that is not going to perform well or not going to be robust, that change is not going to go anywhere. And so it's like you, knowing kind of like what the values are, help me engage, help us engage as a community to have. And I think with Go, I think it's been sometimes, sometimes I feel it's there and sometimes it feels very fickle, but I would refer any and all to, I love Golang, I hate Golang. Is that the order of your blog post Adam? It is, yes, thank you. I'll tell you what it feels like as a maintainer for this to happen. I had a project called ConfD, and I built it for a company I was working with so we can actually have a lighter weight configuration management because we just didn't need everything Puppet did. Used it in production, I open sourced it, and people liked it and people used it. Actually, core team members used to use it as well. And I would do things like integrate console. My first target was etcd, console felt like it was also a key value store, no problem, multiple backends it is. Now, as someone who had experience at that time, I told and promised myself that etcd would be the only backend I would ever support, project didn't get bloated. I caved a little bit and just started adding, I don't know, DynamoDB stuff, it just got ridiculous. Remember, someone came from HashiCorp team and said, hey, we want to integrate Vault. Or yeah, it was Vaults particularly. And I was like, you know what? No, Vault is not a key value store. Now things are just getting too much and the answer is no. And so team responded with a thing called console template. Did. And it took a lot of inspiration from CompD, and I remember it was on Hacker News, it made it to the top. And someone said, this is a rip off of Kelsey's CompD project, they literally stole his idea. I commented, you can't steal what was given. It's an open source project for a reason. Here's what happened. They've contributed stuff in the past. And in this particular case, I said no. They did what they were supposed to do. Made a different project with the same ideas. It gave them a place to do the things that they wanted. How can I be mad? If anything, I feel kind of honored that I was able to nudge the industry in this kind of way. So this is what's supposed to happen. I said no, and they found a way to get to yes. This is what open source to me is also about. Yeah, and I love just, I'm on the Hacker News story, introducing console template with your top right comment of, hey, CompD author here, trying to bring some clarity. That's really, really interesting. That is really interesting. And I mean, I think honestly, a kind of a great spot here, I think, to Kelsey, thank you so much. I mean, you've been such a, I think, an inspiration to so many folks. And I think so many people, you've got such wisdom and really appreciate you sharing so much of it with us today. I mean, this has been really, really fun. And you're welcome. You're in the new post Twitter spaces world here. So, you know, no problem. I did think- I definitely think I would check it. I think I might use this going forward, but I want to end with one thing. Yeah, absolutely. One anti-pattern that I think we need to just remember all of this. Even though you think there's big companies behind all of these big projects, I know the title of this is like corporate open source anti-patterns. You wouldn't believe is that a lot of times, even if these companies have like 100,000 plus employees, typically, it's only like five or 10 people actually work on a lot of these projects. They have feelings and emotions. They pay attention to the good and the bad. Sometimes take a moment and realize that the maintainers are not necessarily pledging allegiance to the company. Doing this on behalf of you, advocating for you. And a lot of times they're putting their careers on the line, work on these open source projects instead of the things that actually make the company money. But one anti-pattern I want to make sure that we realize is that software doesn't write itself. So the people behind these projects, the community managers, the documentation folks, the people just helping out in IRC or Slack or whatever you're using these days, those are just real people. So just take a moment to pause. Just make sure you know that you're talking to real people when we're debating these things. Amen, amen. I think that is, these are all people all working together. And I mean, I think it's honestly, I think we talked about this a couple of weeks ago about the things that have been real revolutions in software and sharing are those things that have facilitated collaboration. And open source has facilitated collaboration on a way that we honestly haven't seen it done before. For the way we build things, open source allows us to collaborate across all these different boundaries. And it really is remarkable. But at the bottom of it, at the roots are people actually working together. People deserving of kindness. Absolutely right. Kindness and not malice. That's right. Yes, please leave the maliciousness, the intent to do harm. We can please leave out of the business strategy. If that's part of your business strategy, please never say it out loud. And definitely don't say it out loud in a recorded venue. But hey, Kelsey, this has been great. Thank you so much. Hey, we want to, so we're coming up on a big anniversary here, Adam. We are. On September 3rd, right? I think it was September 3rd, 2003 that we integrated D-Trace. And it's software that you and I still use basically every day. I mean, this is software that we both have continued to evolve and software that we are continuing to make improvements to. So I think next time we're going to be doing D-Trace at 20 years old and reflecting back on what it's like to live with the software you wrote 20 years later. There's a lot to talk about. Yeah, I'm looking forward to it. Looking forward to it too. Kelsey, we cannot thank you enough. That was absolutely awesome. And thank you so much, everybody. Speaking of community, we really value all of you and all the great engagement in the chat. So thank you very much, truly Oxide and friends. Thanks everyone. See you next time. "
  },
  "7250b7bf-202e-4d7f-8289-757b0e9d15a4": {
   "Title": "Settling Beef",
   "Description": "\u003cp\u003eRecently, a clip from Oxide and Friends was played by another podcast as something of a punching bag. Adam was called \"uneducated\" and Bryan, it was observed accurately, \"hadn't used C++ since the '90s\". Well, Conor Hoekstra from the ADSP pod joined us to settle the beef.\u003c/p\u003e\u003cp\u003eIn addition to \u003ca href=\"https://mastodon.social/@bcantrill\"\u003eBryan Cantrill\u003c/a\u003e and \u003ca href=\"https://mastodon.social/@ahl\"\u003eAdam Leventhal\u003c/a\u003e, we were joined by special guest \u003ca href=\"https://twitter.com/code_report\"\u003eConor Hoekstra\u003c/a\u003e and Oxide colleague \u003ca href=\"https://hachyderm.io/@cliffle\"\u003eCliff Biffle\u003c/a\u003e.\u003c/p\u003e",
   "Link": "https://share.transistor.fm/s/ed8cf641",
   "Filename": "7250b7bf-202e-4d7f-8289-757b0e9d15a4.mp3",
   "GUID": "7250b7bf-202e-4d7f-8289-757b0e9d15a4",
   "Published": "Mon, 16 Oct 2023 17:00:00 -0700",
   "Transcript": "Brian welcome. Hey, yeah, am I I realized that I had not actually ushered myself on the stage yeah, the reason yeah, you were waiting for me to join because It just thought you know, we thought we'd wait for you It's very courteous not stand on ceremony Claire how are you? I'm good. How are you doing? I'm doing well. It's good. Good to hear your voice live Yeah, it's nice nice to eat meet you ever and Adam as well and this is gonna be fun It's gonna be fun. So actually before we get started, so we had Adam we were we were off last week. We had the open source firmware conference last week, right? And I Had a bunch of folks up at oxide on Tuesday night And I gotta say we had a lot of fans of the pod as they say, that's awesome. That's great You sell some stickers, you know, I did I got some tickets but I gotta say, uh, you know A lot of people were uh, we're asking after you I to the point where I was like, you know, but I but I'm here They're like, yes Where's Adam? Yeah, fine. I know you kind of said that but earlier where's Adam actually? That's That's that's great. I was just entertaining my folks. So I Should have told them I had somewhere else to be. Yeah, you will listen like look you're a nerd celebrity gotta get out You know be with your people but it was great honestly it was it was very great it was a lot of fun to have Terrific conversations with folks that are loving the and and Conor I know you've gone through our back catalog just we've gone through yours and it's been a lot of fun to Be hearing from folks that we're having conversations that they're finding interesting. It's great Of course, we find them delightful So Glad you also enjoy it and then we were in the so that the conference itself was was down in Sunnyvale at the Google campus and I was driving all of the we had a couple of oxide folks out here folks that have been on the podcast before so Laura Abbott with Bethel and Matt Keeter We're all giving an event salts also out here the but was staying down there. But so I was Shuttling all four of us down from the East Bay and We were so we had some some long commutes. I mean, that's a that's a Widowmaker. Yeah commute from the drive. Yeah Just just brutal and I mean it was much better when we got in the kind of a high occupancy way and so on but we Were it was actually a good week to do it because we were getting the play-by-play of the SPF trial Are you paying attention to this thing at all? I just just the teeniest bit that filters through on Twitter and other things like apparently Shakespeare like mathematically overrated. Oh my god. Oh my goodness. Yes They did not they they didn't know I don't think they actually we heard them talking about that too much Connor have you been following this closely this SPF trial? I do not I see every once in a while a YouTube video that recaps the drama But no, I mean, I know the the high-level details but have not been following I mean, it feels like you're judging us those who live in the sewer Are you in my it might read that it like look look we need our we need our our drama Okay, we need we need our soap opera And so and you'll explain with you that the Shakespeare references cuz that was that was I mean, there's a lot that's bonkers about this I'll try so this was SPF basically saying that You know statistically because so many people have lived since Shakespeare that there's no way that Shakespeare could have been the greatest author of all time because surely like billions and billions of people have lived since and one of them must be the greatest authors of all time any Leaning that logic on Bayes which many hasten to point out had lived kind of a long time ago I I kind of love this idea of Adam Leventhal reads your least favorite positions and just like Listening to you squirm about a position that like I'd see I ardently disagree with literally everything about this But you're making me repeat it. So how do I do? How do I hold this up with as few fingers as possible? Totally unhinged first of all, it's like in response to the greatest straw man of all time like who who's he in an argument? It was so Unbelievably and also for a person who's like a master of probabilities he should you see the other one about like if there was a coin that you could flip and There was with a 50% odds that that the world will be annihilated and a 50% 50% chance that that everyone's happiness will be doubled. He would enthusiastically flip the coin and apparently at least what I what What Matt was saying is like no, he would enthusiastically keep flipping the coin What? But so it was we were gonna play by play it is it is jaw-dropping Matt had another great line, which is like I just want to live my life such that my chats are never entered into evidence because they They sound much absolute idiots the I mean and they are at some like some real level They are kind of all idiots, but they really sound like it and the so that the podcast I'd recommend on this Which is not one that I would normally listen to but it's a crypto podcast, which is like boy am I I'm I'm in okay Yeah, I know right. It is right exactly So this is unchained with Laura Shin and she's a She's got some very very good reportage on this and it's really and actually I love she's been basically reading elements of the transcript She's got some commentary on there. That's incredibly good. She has these two attorneys that that are on there as regulars This is One of them pronounces Alameda research as Alameda research Hmm. Have you heard Alameda people who say Alameda because I Live in Alameda. I've definitely heard Alameda or lots of variants there, right? So this is so and I mean Adam you live on you You and I both live in the county of Alameda you live on on the island of Alameda I mean, it's like there's a lot of we got a lot of Alameda's in our lives and it's right folks It's not Alameda, please Well, I will I will share because you mentioned that for like the early days of Like the SPF unfolding of the exchange of FTX and so forth I was like There's that woman who was you know, the president of Alameda research and I was like, wait a minute. She's not our mayor What's going on here as I kind of barely paid attention to this and got confused You got confused between the president of Alameda research and the oh just like I didn't realize Alameda research had anything to do with FTX I was just like I I just stopped at Alameda, I guess because I'm such a whole Alameda Homer Exactly. I know and people pointing out this may be the original Portuguese pronunciation You know, I did actually wonder and Adam it did remind me of your Gelsinger chassis on premise on premise It's super cut in that. Yeah Laura is very clearly saying Alameda over and over to him and he is saying back Alameda over and over to her So it's like you are each clearly aware that the other says I don't maybe work Maybe we live in Alameda County. Maybe we've been wrong all along Connor one of the things we've definitely learned in this podcast is that we mispronounce everything I miss I guess I should I should really make this much more specific when I just avoid any word that I'm not sure of So, I mean who who's really the fool here, right? Right. One of us is a chicken. The other is a jackass. You get to pick was it? Anyway, so that was fun. That was it that was a Fun week and I think a lot about podcast, but it's so that is not why we're here We are not here to talk about SPF. We are here to settle beef We are here because so Connor. Well, I was out at Monctober fest Which and Adam you've never been to Monctober straight this never been Almost went this year, but had to cancel again because the aforementioned visit from my folks yes, and the Great conference. Obviously, I'm very grateful to Stephen O'Grady and his crew. They're Red Monk They do a terrific job and have a bunch of talks that that we don't necessarily see anywhere else Which I'm very grateful for and I've had I've been privileged to speak there a couple of times I'm really excited to get the I have a talk On the humanity and engineering. So trying to to quell some of the fears about the the AI Singularity, so looking forward to that video coming up, but it was on the way back that I listened to this podcast And this is the algorithms plus data structures equals programs podcast Connor. This is your podcast Yeah, which I've definitely listened to from time to time and I've definitely enjoyed and I came across the transom and I We were we were getting called out a little bit a little bit of a bit of podcast beef Which I have to say Connor we were delighted by just like just to set the stage We really enjoyed it and we know that you and I've just follow you online and know that you're a big fan of Podcast so Connor I thought if you don't mind I thought we might start with the the thing that we said that you were quoting back to your co-host Bryce Is that a fair place to start? Sounds good. All right, so we're gonna start Adams that Absolutely. This is using soundboard technology, which we have never tried before. So let's give it a shot. Let's give it a shot So this beautiful c++ is to you is just like this is why we should have Russell It's I mean it is it is a I'd actually recommend it Raves I I did I did I do want to like see if I can get so the the authors are guy Davidson Kate Gregory and I would be very interested to see and I've looked all over to see if they acknowledge rust and The closest I could find on Twitter was guy Davidson saying I don't really have time to try new languages Which is such a shame, yeah, that's because these are these are folks who who really have nuanced deep thinking on on this, you know Very important language. This is not the disparity plus plus but one that they are themselves ready to acknowledge the burrs and the mistakes of and you know, I'd love to see what they think of rust just because I feel like Seriously, like every page is just more and more of an advertisement for and when you get into like concepts like concept Concept is a concept in c++. Whoa, and Yes, I had not what there's a thing called concepts There's a thing called concepts. There's a bit like a trait But people are gonna like big pillory for making that kind of like gross analogy there, but it you know, it's It's for describing the characteristics of a template You know the the type T needs to obey these these parameters, huh? Okay, all right, I really I gotta say people like this are the reason that that that people Dislike rust. All right. I'm not like on a technical level. What do you mean people dislike rust? It's the number one most loved language in the Right All right, that's the so Connor first of all, I we loved your I would Actually, first of all, first of all If you had told me that like there's a clip from the show about c++ that people are going to run with This I feel is you took one of our most gentle assessments of c++. I feel like we've said much worse about I'm aware. I'm aware You know and I gotta say I think thank you for not pointing out to your co-host being like, oh by the way I like sorry Do you want me to get like the actual? Deep cuts on c++ like they've said all sorts of like there's no analog in here to substance abuse to to teenage sexual behavior to The other things we've used as a metaphor for c++. I feel like it's all sorts of things we've used Yeah Yeah, definitely like drug use like with with your child or whatever and certainly when I think Brian you DM to me like Oh that one of our shitty hot takes was the subject of another podcast This felt like we got lucky Yeah, so tell us about like that clip and how can how it spoke to you and They can't take it from there. I Mean this is gonna sound absurd But yes, I I have a habit of the podcast that I I listen to you know 70-plus podcasts I'm a huge podcast fan and I have a short I have a short list I listen to these all at like 2.3 times speed and so and I spend a lot of time Running around like for exercise so huge podcast fan, but I was actually listening And and oxide and friends I wish way more companies like a huge kudos to to both of you and all the folks in the past that have you know spoke up on these there are very few podcasts like this and I mean I just Yeah This is like super light lift I Mean so, I mean part of the goal what we're going on a tangent here So what we'll get back to how I I came to splicing that clip in but you know Sean Parent who I'm not sure if either of you are familiar with but as a luminary, I mean, I guess You listen to the Sean Parent episode Which was delightful. Yeah amazing. Yeah, we'll drop a link to this but this And you've had Sean parent on a couple of times But yeah, yeah at the particular episode that I think Adam and I both listen to was this absolutely nutty story of a car crash that he was in and I read I mean, I'm not gonna I'm not gonna give any more context. So than that I thought it's an amazing story that definitely captures like a moment in history in computing history, honestly Yeah, but so he you know, I've looked up to Sean and I'm happy to like to be able to call him a friend these days, but back in 2017-18 to like to me. He was just a person that I had seen his talks online and Once I had gotten to meet him, I I asked him, you know How come you don't start a podcast like there are not I think you use the word, you know Seasoned in your social audio talk Brian like seasoned folks that have experience, you know, there's there's too many No offense to everyone with a podcast like myself included like, you know, I was born in the 90s Like there's too many young people, you know putting out their their thoughts and opinions and not enough folks with like real experience and decades of war stories or you know, Choose the better word for war stories and I asked him like how come you don't start a podcast and he just I think a lot Of those folks aren't interested and he said if you start a podcast I will be happy to come on like however often or frequent that you want me to so And so we've had him on I think four or five different times and we usually slice and dice them up and like most recently we were at a conference and folks in UK and June at a c++ conference and like over wine and like an hour and a half We like got to talk to him about you know How he ended up at Adobe when he was at you know Apple before where he likes to say like in between jobs and and he you know I think you've referred Brian to folks that have this just like amazing storytelling capabilities but then also like amazing stories to go with that and Sean is one of these people and It's just it's a blast. Anyway, so why more folks don't do it. I think it's just it's work and A lot of these folks aren't interested in you know, trying to set that up But like I think the key is it's like if you're interested in having those conversations you'd be surprised how willing some of these folks are To you know do the storytelling part as long as they don't need to do any of the work of it Yeah, I'm not sure if you want to add anything on your thoughts on why don't do this It's a great point and you can and we definitely had that feeling with on the metal where we had you know these kind of folks giving these unbelievable stories and Excited to do it excited to kind of volunteer their time to do it So and I would also say for whatever it's worth I think it's great to get folks in the 90s born in the 90s, too I think it's I love getting all those different perspectives and I do we encounter much of you saw I give a talk on on social audio and kind of what a Social audio as a vector for engineering wisdom based on our experience with oxide and friends that if you haven't seen would definitely resonate with you, but the I do actually I would love more folks to do this And if you do like let us know and Connor, I guess I also want to go back to 70 podcasts You were a regular listener of 70 different podcasts Yeah, I mean subtract maybe like 15 of those that like don't actively post So it's not but like in my counted in my app a few days ago because I'm always curious and and yeah Yeah, I just I think it's people Underestimate like the utility and like I did watch your social audio talk you recommended And I would have I mean, I think I thought it was fantastic preaching to the choir The only thing I would say is like it's it would have had like a catchier title with like the power of podcasting or something like that but I yeah, I wish I wish more people would do it and like These whippersnappers trying to trying to Gen Z up my title. I don't know Spicing up that yeah, it's it's unfortunate like on YouTube the number the two Things that affect how well a talk does or like a video does like number one is Thumbnail and number two is title like you'd think that the content matters most but like that's number three after those two Which is I don't know. It is what it is. I'm gonna have to bring you in as a title consultant Run it by my kids to see if it's if it's actually if it's actually cringy or not my teenagers who are Who serve as a Gen Z slang check for me make sure that I'm not being I want to you know I want to say things are lit out It just sounds ridiculous. Please don't Although I do talk once where kids were some young that was like Gen Z talk and I didn't understand at all What was what was said and like I was just like wow I guess I'm old now because this this this speak that they are speaking is foreign to me Well, so I do have to say yeah, I mean this is where Adam I do have an advantage on the one hand We are are older and this is not our generation. On the other hand. I don't really both have teenagers. So we actually Are a bit more is that a stone? Yeah, Rosetta stone and I there is some Gen Z slang that is delightful Adam the the the the two that I think are just Terrific are one mid as do you use a bit? I think bit is terrific. I don't know mid Actually look that up that was in the video and I I urban dictionary debt Yeah, a mid is good. You didn't be mid is what you would expect it to be like if I said like, you know How how's that burrito? It's like it's men. It's like it. Gotcha. Yeah, the other one's got to be Rizzi Rizzi's got the other one is Rizz. Yeah, the other one is right I think I think Riz and Riz to me is serves as like a testament to the English language about how Then Gen Z uses it. It's like all parts of speech and The and I actually I came across this when I went one of my with my son and one of his friends was looking at his father, and we are at an event where he is talking to two other women parents, and he said, look at that guy, the Rizzler. I'm like, the Rizzler? What is the Rizzler? But anyway, Rizz is terrific. My understanding of the word mid is actually, or according to what I googled, was that mid is actually a very bad insult, because you would rather be at the extremes, like the best or the worst, because that'll track online, whereas mid, it's actually like you're just in the middle of the bell curve, and no one's going to care. So you'd rather actually be really bad than mid, which is confusing to me, but hey, kids these days. Yeah, so actually my criticism of GPT from a writing perspective is it's writing is mid. That is actually the problem with GPT. I mean, almost analogically, is that it's mid. I'll consult you, but then I hear what you're saying, that the titles simply are too descriptive. It reminds me of the criticism we heard from the original Oxide pitch deck, which is like, this is very good, but it's full of words. I'm like, it's okay. Yes, it is. Yeah. To be clear, as opposed to there being any pictures? Well, okay. No, there are, but there are words. I'm just like, look, I'm pro-literacy. I'm just, I'm long literacy. There you go. And yeah, they're words. Maybe not so many pictures, but definitely words. So yeah, so Connor, so you listen to a ton of podcasts, and I guess I would look to you then as an early barometer for some of the ones that particularly stand out to you, because I would love for a bunch of others to be like us and like you, and kind of capturing these narratives from technologists. And you've gotten a lot of them. You've got a lot of different folks on ADSP. It's pretty awesome. Yeah. I mean, so yeah, second tangent, and we'll get back to when I was listening to that episode. But I mean, I think it's very individual. I'm a huge programming language enthusiast. My favorite languages over time, at one point it was Haskell. In the last four years, it's all been array languages, of which I think the very first time I came across your name, Brian, was not a talk. It was actually the article where the article-ification of your interview with Arthur Whitney, who is- Arthur Whitney? Yeah. I wondered if you'd seen that, because you had a podcast you're talking about, Q and K. Yeah. My second podcast, Arraycast, has been going on for three years now, 60 episodes. It's all about APL and other array languages like J, K, Q, BQN. Very recently, a language that just came out in the last couple of weeks, Wiwa. That's U-I-U-A, which is super interesting. It's a symbolic language like APL that combines a stack from concatenative languages like Factor, Fourth, and Joy, and the APL array paradigm. That's a whole other episode topic. I love the programming language episodes, for sure, especially the drama ones. I think recently, or in the last couple of months, when the Rust leadership stuff was going on, and open source stuff. You've had a couple of different episodes where you brought folks on. I just love that intersection of drama, and the inner workings, or inside baseball of that stuff. I also love all of the books episodes. This was one of them, where you go through different books. I haven't actually read the next book with Steve Jobs, but I have a bunch in my audiobooks, or Audible account, and on my list to read. Especially just the history ones, where you're talking about your time at Sun Microsystems. That's the stuff that's, in my opinion, going to be forgotten in the annals of time, if it doesn't get recorded on a podcast. Which is why I think it's so valuable. There is a YouTube channel called Oral Computer History, but those are pretty dry. From the Computer History Museum. Computer History Museum are amazing. Those are three hours in length, and YouTube videos. I haven't watched a lot. I think that kind of stuff, but the way it's packaged here, it's more interactive with folks in the crowd, and it's just, I think, more entertaining. Whereas, I've listened to some of the oral ones, and they're definitely not. It's just a back and forth kind of storytelling. Anyway, the book ones, the history ones, the programming language ones, those are probably at the top of my favorites. That's awesome. I'm really glad that you like that. I think, Adam, you and I both love books episodes, in part because we come out of every single one of those with a really interesting cue, and then it's great to go read some of those books and come back for more. I'm glad that you like this. Those have been really, really fun to do and to learn. Again, I've also learned that I will basically take whatever Ian is reading. You can just move that cue right on over to me. There have been some great recommendations on that. It's great. Speaking of which, it's a great way to circle back to, I was in Vietnam for a wedding in September, and this gets back to how I was listening to this. I was in Thailand before I was in Vietnam. Without going into detail, I'm an obsessive podcast listener, but also an obsessive runner. I actually wasn't on a run. I was on a walk because I had run that morning. I was just walking randomly next to this highway because there's a website that I'm addicted to right now called citystrides.com that tracks your completion of streets wherever you go, and you get ranked on a global leaderboard. If I ever have some free time and I'm in a new city, I just want to go walk around and collect nodes to increase my ranking. Here I am walking on the side of this highway to get to this really dense cluster of streets. My podcast cue of new episodes is empty, and I'm going through the backlog. And I am expecting a great episode because I love these books one, but then, boom, sure enough, in the first 10 minutes, you're talking about a book that both my co-host Bryce and I have talked about before, and Kate Gregory, one of the co-authors we've had on as a guest. She actually lives just outside of Toronto, Canada, which is where I currently live. She's involved in running the CPP North C++ conference that's happened for the last two years. Kate and I know each other very well. Anyway, it's just like the colliding of worlds. It's on top of a lot of discussion around successor initiatives and languages such as Carbon out of Google, CPP Front or CPP2 out of not really Microsoft, but Herb Sutter, who is the chair of the ISO committee. There's Hilo, which was formerly named Val out of Adobe. There's a next-generation, bleeding-edge compiler called Circle out of one individual by the name of Sean Baxter, who's in New York. There's all this stuff happening around, and then you can add Rust as contributing to the discussion of is C++, has it had its peak and it's now sunsetting, or is it going to go through a winter? The 20 aughts or whatever up until 2011 was kind of a dark period for C++. There's a lot of discussion that's been happening over the last year. I just finished listening to a CPP cast episode where they were talking about some of the work on the next big language features. It had been stalling in the committee. I'd heard that clip and was like, oh, that's not great. Then I heard this episode, which technically is from the history, the backlog. I had the biggest grin. I think I was even laughing while you guys were like that. There's the two bits where I knew I was going to cut in, where one, it's basically just an advertisement for Rust, this book. People in the C++ community are saying, oh, this is a great book. Actually, what it does is it takes 30 of these guidelines that are recommended in what are called the modern C++ core guidelines that came out of Microsoft, but it's an open source thing that people contribute. It's this, okay, we have all these modern features, but here's some best practices that you should adhere to. They took 30 of those and bookified it and basically added examples. Never mind. You have a fact of C++ then, Scott Myers' book. Yeah. There was four or five of those. He has famously said that the fact that those books exist are like a stain on C++'s history. A good language shouldn't need a book telling you like, oh, here's how to avoid this anti-pattern. We just introduced universal references or forwarding references, and here's all the pitfalls with these and how to avoid them. I've never talked to Scott personally, but I've heard him on interviews saying that I would prefer if I didn't have to write these books. It's sad these books exist. Have you ever seen Scott speak, Adam? No, never. We shared an alma mater with him. He was getting his PhD. He had just finished his PhD at Brown when I was an undergrad, if memory serves. He's very funny. In particular, what I definitely remember on him is he had a Pascal rant. Conor, I hate to do this to you, but Pascal, Pascal, please. We mentioned the pronunciations earlier. It is really not Pascal. Just listening to the most recent ADSP, I feel like you were going into that conversation saying Pascal, and then you were changing to Pascal. You reminded him, like, my wife is from New Zealand, that when she would talk to her mom, her accent would become more Kiwi. I think we say Pascal. I have the same problem with Java and Java. I think I switch between the two when I'm talking about the language. Well, that's a north of the border thing. Yeah, isn't that a cultural thing? I feel like you're entitled to Java and ZFS. That is your birthright as a proud Canadian, I think. I've got O Canada in my head. All right, Pascal, going forward. You know, I've got my Molson light in my hand. I'm watching the Argos take on the tie cap. Have you ever watched a CFL game? Adam, have we already had this conversation? I've only watched clips of the CFL. The CFL is amazing. It is amazing. It is amazing. And I hear your tone, and on behalf of all Canadians, I find it offensive, and I think that you would love the CFL. No, no, no. I mean, I mostly watch it like I watch all sports, which is on John Boye as clips. John Boye would love the CFL. Has he done something on the CFL? He does love the CFL. Yes. He would love the CFL. I love that man. I absolutely love John Boye. CFL is terrific. Anyway, you are entitled to your ZFS and your Java, but you may not have Pascal. That is not a Canadian thing. That is a- A step too far. A step too far. You can have- You know what? They also- And I'm not sure if this is a Canadian thing or not. The Canadians that I worked with called it called VI Vi, which is kind of a wild one. I don't know if that's a Canadian thing or not, but I think- I'm just going to have to clip this from- I have to cut this from the show. It's going to be too controversial. We're going to get lit up. It's like in our attempt to settle beef with one podcast, we picked fights with 15 others. We're going to be on- Yeah. We're going to be on Bouchard. On the C.I. Daily. As it turns out, it has a podcast that has got a- We're going to be on a Quebecois podcast. Lucien Bouchard, humor probably doesn't- I don't know if that really plays with the Oxide friends' audience. Perizot, where can I go here? Jean Chrétien. These are actually- You know what I realize? These are Canadian politicians that predate you, Conor. You may be like, I don't even know who these people are because this is like- Sorry, I'm just not up on my early 90s. I was alive when I think Jean Chrétien was PM, so I definitely know who he is. Yeah, I got to make a- Finally. Exactly. I got to make it like a- Brian Mulroney, I think we can all forget. Sorry, we'll get off of Prime Ministers of Canada here. Scott Meyers had a rant on Pascal that is terrific, and in particular- I take it from your podcast, you've never implemented a Pascal, Conor. No, I have not. It's one of- I was going to say few, but it's one of many languages I have not written. Yeah, and it's not like- I mean, this is not like a bucket list thing. This is not like- Although I do kind of like the idea of just like your gamified running of city streets. We need like a city strides for programming languages maybe that like you've got to do. We can gamify that. So this is not necessarily a bucket list item. I would say that because one of the questions that you guys actually pose, and we're going to go a little bit over here, but one of the questions you pose in your follow-up podcast is in terms of like why C versus why Pascal or why Ada. Pascal actually was the systems language for the Mac in particular, and not just the Mac. There were actually quite a few systems for which Pascal was a systems language. You can view Pascal as basically C more or less. It is the moral equivalent of C. It makes- And now we're going to have to actually remove that too. We're going to end up- It's going to be a very short episode. We're going to have to create a war on the Pascal podcasts. They said, what? No, this is war. This is war. We actually have beef. But Pascal is very, very similar. But one of the differences is that in C, I mean infamously, famously, you have the open brace, closed brace nomenclature to denote a block that's obviously been used by lots of other languages. In Pascal, it is begin and end. And every end in the program has a semicolon, except for the last end in the program, which has a period. And the program begins with program, and it has to end with end period. And there's just this great Scott Myers rant on like, why? Why does the last end have a period? By the way, every Pascal compiler knows this. And if you make this mistake, it will tell you, by the way, the last end in your program has a semicolon, it needs a period. It's like, you're a computer, you know it's the last end, you put one there. It was actually really, really pretty funny. And Dan is calling me out that it is a statement separator, not a terminator. Well, and there you go. So Dan Cross in the chat, very strongly supporting Pascal's period as a program terminator, as opposed to a statement separator, which it sure is like delightful to explain to somebody who's just learning how to program for the first time in Pascal. But anyway, Scott Myers is someone I really enjoyed. I'm not sure how much of his stuff has kind of, is he still active in the C++ community, Connor? No, he retired a few years ago, because when I first started, I think attending conferences in 2019 was the first one I went to. I think I'd heard that, yeah, he was in retirement and no longer actively attends or speaks or is writing or anything like that. He has moved to a commune in Vermont and will deal with an operator that's more than a comma. I'm trying to make this all from the machine. Yeah, I will no longer overload. I've overloaded my last operator, says Scott Myers. All right, so you got the clip. You played it for the co-host. I guess we were a little surprised at the reaction. I think you were a little surprised at the reaction. Is that a correct statement? Well, definitely. Well, I should circle back and say to the second clip that I just was killing myself laughing while on this walk in Thailand was when, Adam, you said, there's a concept called concepts. And then you go, whoa, there's a thing called concepts? And then you say, yeah, there's a thing called... So in five seconds, I think concepts is said like six times. And just the bewilderment of you, Brian, that there's a concept called... It was just podcast gold. And I knew I was going to tell Brian this, and I knew we were moments away from who's on first. And it was going to take like 10 minutes to unwind. Yes, that's the concept. What's the concept called? Concept, that's what I'm asking. It was so good. And so the whole podcast, start to finish, is amazing. But that first 10, 15 minutes. And so I knew I was going to go and instantly after listening to it, I was like, I got to play this for Bryce to get his reaction. Because I think we are both on the same page, as is indicated by our discussion that followed, is that C++ from a process perspective is in a very bad place. And there seems to be a lack of acknowledgement of every other modern language, Russ Swift, insert modern programming language, that development happens asynchronously, not in person three times a year at these committee meetings that are very gatekeepy in terms of like having the money or the sponsorship to go. And, you know, it's the folks that are in power, you know, and don't get me wrong, they are volunteers that are putting in their volunteer time, it's nothing against like the individuals that are going, it's just, it's been shown that there's a better way to do language and library evolution, that it does not require hopping on a plane with like, you know, a huge carbon footprint, etc, etc. And so I thought he was just going to agree with basically everything I said. And I'm not sure, I mean, Bryce, he probably won't listen to this, because he famously doesn't really listen to podcasts. He, I think maybe because he said he gave the book his endorsement, that he felt like he kind of had to defend the C++ side of things. And also to at the tail, because we had recorded two episodes back to back, and we had just finished saying that we thought, you know, C++ was in bad shape. And I think he had said something like, you know, they weren't going to ship any language features. And so yeah, I was a bit surprised at his his reaction. And also to I mean, he did acknowledge that, that it was a not to call Bryce hypocritical, but, you know, he also has a ton of very hot spicy takes, which is why I think he makes for an amazing podcast co host, because he says things that gets reactions out of people. And I think it's all definitely mission accomplished. I mean, he did. And you got to give I got to give Bryce credit. He did say one thing. I mean, I guess like, because you didn't give him any context. And he didn't ask for any context. He's just like, Alright, that's all I need. Like I got this loaded revolver time to start firing it. And I gotta say he did like absolutely nail the target in one of these. Adam, do you have a clip of Bryce just absolutely nailing me? Yes. Yes, I do. Brian Cantrell was one of the voices. And he actually was a C and c++ developer from years ago, but Has just not used the language. Yeah. Well, he hasn't been a c++ developer since like the 90s. I'm gonna guess I mean Yeah Yeah, so just to be clear I have not there was actually a time when I had developed more much more c++ than c So I did a lot of c++ in it, but it was all in the 90s. So bryce has As an undergraduate right like yeah, yeah Okay, just just checking When also I was like a big advocate for it. So like I moved the operating system course from c to c++ and The did you not know that? Uh, no, but i'll talk about that later. I I that's that's actually when last week discussed that Okay, but like you you it sounds like you are. Okay. I'm not actually now I know who to blame is what i'm saying Exactly. Yeah, that's what I um and I just you know that because I took this is in like 93 and C++ was the kind of the hot thing and uh, it was the hot thing for a bunch of I mean There were a bunch of interesting ideas in there And I think that actually kind of I would love your take on this I think that part of the challenge that c++ has had is they've To the best of my knowledge never really discarded an idea that like when an idea gets into the language it stays Because more than anything they have enshrined compatibility compatibility with c Compatibility with old c++ maybe this has changed in the last I mean Be very reasonable for this to change the last 20 years. I know a lot has changed Um, but certainly at the time the fact that you could compile c as c++ Was really important and that uh, but then it also led to a bunch of things that were then Going to be design decisions that we're going to have we're going to be pretty consequential because of that compatibility No, that's that's that's entirely correct and I will say uh, because I want to comment on I I do know I think one of your best talks brian is the summer of rust and I think when I watched it a couple years ago The top comment at the time was because I think it's an hour and a half or two hour talk The top comment at the time was i'm 50 minutes And the talk is entitled the summer of rust and the top comment was i'm 50 minutes into this talk And this guy hasn't mentioned rust once and i'm absolutely loving it Um because yeah that that and and then the reason I bring it up is in that talk, I believe that's the talk where you use the Slightly edgy analogy of c++ being like an ex-girlfriend That took all your clothes and threw them out on the street and lit them on fire And I I understand that c++ is doing great. Now. They got all these new modern features I'm happy for you, but I just like because of my experience. I can't go back and I just I thought that was hilarious That is exactly it. I mean it is it I mean almost like literally I mean I had a Uh, it was it was it's like it's like this relationship from my past that that was Important to me at the time but also crazy in hindsight that like left me with some wounds Uh that took and I think also because I had been such a c++ advocate that when I kind of flipped I and Also at a time when to kind of like the prevailing zeitgeist was that c was absolutely dead I mean honestly like c was much more dead in 1995 than say than c++ is today. I mean, I I don't know what the analog would be today, I mean closer not quite cobalt, but um, I mean it it was just like no one should ever do any c that is clearly not going to be the future at all and I had kind of when I myself had this moment, which I came like hours in To I was trying to instantiate a list template and was running into two separate compiler bugs So this is another important thing to know about my own personal experience is the compilers didn't work Reliably and adam, I mean you were I mean, I don't think they were completely working You mean you were a couple years behind me, but not so far behind me. I'm sure you had some of the same issues with compilers Yes, and we were deep into like, uh templates being in vogue And that's right. So even when they did work you would get I mean, I guess glass houses now with rust but Uh, you would get inscrutable error messages that went on for pages and pages and ended in a segfault Right and then and then the fix was to blow I mean at least in my day Anyone would tell you like have you blown away the templates.db file yet? I mean, it's like you would need to like constantly having of course Blow away the compiler's internal state and then like then it would work and it is You know as as a developer, you know those things really and this part of the reason why tooling is so important because like that begins to chip away at you and because it's like this is not related to my like what i'm actually trying to do and the whole purpose of Using templates is to save me time as a developer. I guess ultimately we're trying to do We're trying to allow me to deliver a high quality high performing software Artifact faster and every time I need to blow away templates.db we undermine that particular value proposition and I just broke after this like I had this I I was trying to debug the these these and I realized I had two separate compiler bugs and adam you know like when you when you are you've got like two bugs in play and it feels like They kind of reinforce one another In ways that feel random that you can't kick it's like third behavior And I was just like I was so frustrated And i'm like, why am I I know how to write a linked list? I can just like when you start like losing sight of like what was the actual problem? I was trying to solve before I went six levels deep in this bug stack Right. Yeah, like why am I here? Why am I here and that's when I kind of like walked away and i'm like I and my career wasn't see from that from more or less Then on and I actually kind of thought with java that there would be no more c++. Honestly. I mean I With the kind of the rise of java i'm like, I don't know why one would write c++ I think the answer to that is like people were trying it was really around performance. I mean connor I could read me What kind of your read is on? C++ development post java. I think the emphasis is on I mean adam. Is that a is that a fair read? Is that the performance? I mean, absolutely Remember early days you'd even have like a hotspot or you know, some of the jit stuff was very You know new So right. Yeah, I mean you were not writing high performance java Right, right, and I think that like You know the It's it's it's a challenge because like at what time Should c++ Probably have broken from its past Uh, and this is the what I would call the underbar underbar init underbar underbar problem so this is the because the python the name of a constructor in python is underbar underbar init underbar underbar because When they introduced the the idea of an object in python, which I mean someone who knows python Well can tell me this but this is like in the early 90s When there are when there is certainly, you know, one one thousandth of one percent of the total python had been written and They didn't want to break things understandably And but now you've got this work that you've got to bring forward Forever and you know my daughter learning, you know, my 11 year old daughter learning programming is like what is this? It's like yeah, it's an underbar underbar and underbar, right? Sorry. It's just like don't get me started. I'll point you to a talk You're right on you're right on like c++ I mean the point of or one of the big points of that beautiful c++ book Was hey, we've been we can compile knrc that From 1971 probably not literally true. But um, and we've needed to carry on that legacy So all of the defaults are busted And you should do hold it this way instead um so yeah, anyway connor when you played that clip, I I feel like there was both agreement, but Reluctant agreement, especially because we've got the the stink of rust hanging on us and I think that I think you know like accepting Observations even observations just parroted from c++ books by folks associated with rust is like tough to handle Yeah, no and and to get back when brian you mentioned about backwards compatibility like that is completely correct And is going to I think Retrospectively looking back on it play an important role in like how these languages like how the cookie crumbles because Inside the inner c++ community. It's a well-known thing that At one of the three committee meetings that take place annually One of them was actually the last one before the pandemic was in prague czechia Uh at the beginning of 2020 in february It uh, there was a big meeting so I could and for those that aren't um, uh that are listening that aren't familiar the way that C++ uh, it has an iso Standard and there's basically a collection of folks, you know back in the day It was I think only 30 or 50 that would meet at these meetings, but now it's up to 250 300 And it's a week-long meeting that they rotate between europe and north america And they have three meetings a year once every four months And there are a bunch of different groups that meet and focus on library evolution and language evolution And so one of these was in 2020 Uh in february right before the pandemic or right when it was starting And I was at I for a couple years was attending these And was at that meeting and there was this I think it was a two or three hour session talking about should we? Change the sort of status quo of not Breaking backwards compatibility like and there's some people listening that they're thinking. Oh, I know this feature that feature we technically did Uh, you know take out there are there are a handful of things you can point at but in general It is an unspoken rule that you do not break backwards compatibility because that's one of the strengths and reasons that c++ Became so popular was because of its backwards compat with c Right and true, right? I mean that is really true. I mean that that is certainly a very important It plays a very important role. Yeah, and and this this You know, uh question of how to evolve is uh playing a large role in the design decisions of these different successor initiatives You know cpp front or cpp2 Is aiming to just basically be at the moment take the cp the c front route Which is just basically a syntax that transpiles down into existing c++ code Whereas carbon out of google is aiming to have a really good interop story, but it's going to be a different language Whereas rust, you know doesn't really have a great at the moment c++ interop story but uh to wrap up, you know long story short of this meeting took place and The the vote that happened at the end basically was like we're not going to change the status quo and that was the meeting That google who was one of the largest investors in c++ they the uh The chair or the the editor of the standard worked at google Chandler caruth along with that that individual was richard smith who was one of the three people sort of Leading the leadership team on carbon and chandler caruth was I believe running one of the the the groups there Like so a lot of very senior people with many decades or years of experience Uh, basically I don't want to say pick up and left the committee, but that's essentially what happened and you know You know modulo a few details. So it was a couple really important folks as well as their co-workers basically Pivoted from well, we care about perf. We have our own library at google called abseil that has all these you know data structures that aren't standard but are faster because The hash map that we implemented, you know isn't able to do x y and z because we can't break backwards compatibility And now they're working on carbon and in hindsight some folks I'm, i'm sure going to say like that was a mistake in c++ history like The folks in the room, I don't think understood the implications of making the decision to continue maintaining backwards compatibility and that's not to say that like google and the folks there want to break every three years, but like They were like c++ was not solving The problem that they were using it for and so now this is why you know, uh carbon is a thing and i've heard Out of multiple folks on the committee basically start to talk about maybe we should have like a once every 30 year Abi break, um that gives us the possibility of you know, every 30 year Something like that break. It's like a jailbreak or something. That is like a It's like a solar flare, I mean it's like i'm trying to think like what's the analog it's like, oh my god, we're coming up It's like hilly's comment. Yeah, exactly Yes I sort of enjoy the hubris of it like brian maybe every 30 years on the podcast. We should do something special I think I do yeah, exactly, uh, like without fail probably every 60 I feel I mean sure I mean For a podcast that will last 10 000 years that you know, that that already adds up that's a lot Yeah, um, I mean it is and I boy do I see both sides of that because on the one hand I mean, yeah, obviously like we need to evolve the the language and we made to do it in ways that break things But I got the other side of it. Honestly is like hey, wait a minute if we're like the value of this thing Is it's backwards compatibility and if you're going to eliminate that I will just go to a different language that actually doesn't have the I mean, I mean this is like You know that that they they say that the totalitarian regimes are are most likely to be toppled when they try to reform because you know you You are trying to actually not I guess I mean not to compare c++ to a totalitarian regime But I I guess I just did But the the you know that when you have glasnost and perestroika, it's like yeah it's most likely to lead to the fall of the soviet union because You know people don't want to have like a little freedom they want to have a lot they want to have all of it and it's like I would say that I uh I would question if I were in c++ i'd be like wait a minute if i'm Like if we are going to add on the one hand, I want to add things like patterns. I mean and I mean for me in i'm rust. I know adam, you know, i've talked about this in the past but boy like just just pattern matching alone just pattern it's like so So Changes the way you write software at such a deep level that um I would not want to not have that and I I kind of think that that was one of the things you're saying is like That it's not going to happen. Um, or is um And I don't know if that's for backwards compatibility reasons or not I mean how many of these things are not happening because it's impossible to make them backwards compatible. Um versus uh, because I think the other thing that is you can have the kind of the The the the scepter of backwards compatibility where you can actually do quite a bit without breaking it Um, but that that said c++ has got a lot of really strange behavior that it's got to be backwards compatible with I mean pattern matching is in the evolution pipeline and it was first brought to the committee back before the c++ uh 17 standard in fact It was initially brought as a single proposal with uh Variant aka c++ is some type if you're familiar with algebraic data types aka the equivalent of enums and rust And the committee said this proposal is too big split them up Variant ended up getting in as a language as a library feature in c++ 17 and pattern matching Has had a whole history of initially there was one proposal then there was two competing proposals I think there's only two active competing proposals, but at one point like while there was two competing there was a third one that showed up um that Herb sutter Was proposing like is and as which I definitely don't think is going to happen Um, but anyway, so now there's multiple competing proposals, but you know, this has been going on a decade now of You know trying to get this in and I you know, bryce says he doesn't think it'll ever ship. I do think at some point Uh pattern matching pattern matching will get in but also it's it's not going to be anywhere Like if you read the proposals the syntax, so that's the thing is I don't think really there's much that c++ can't implement because of backwards compatibility other than like changing the defaults and you know, like we got lambdas in and c++ 11 and That was already on top of like a bunch of stuff Some people would say a ball of mud but like we got it in the syntax for it is absolutely atrocious compared to A language like haskell or even rust like you need every single type of of you know, i'm i'm a A pedant when it comes to the naming of braces and brackets and parentheses But you made every single one of those you need, you know the the brackets for your capture list Even if you're not capturing anything You need the parentheses for your parameter list, which you can omit if you have no parameters before that you need your uh chevron You know angle brackets, uh, which was I think added in 14 or 17 if you want to templatize uh your parameters and then you need your braces for the body of the lambda plus a couple semicolons at the end of your lambda Unless if it's a medium immediately invoked anyways, like You know c++ engineers they're paid well but it's like it's to learn all this stuff and and then you look at a modern language and you're like wow like I look at haskell and my mind is blown is like You need two parentheses and that's it to form a section which is just like a shorthand for for and so like c++ Does and is able to implement these language features? It just ends up looking You know, I will I don't want to say horrific compared to other languages, but it's just a lot worse because we're doing it on top of you know, 30 years of history, which Uh is unfortunate, but you know, so I pattern matching will probably show up It's not going to look as beautiful as rust or you know any functional language that has first class support for adts and pattern matching and such but You know, it is what it is. Uh The the the committee is doing the best they can you know with what they are are trying to achieve which is Backward compatibility and so what is the disposition towards rust because I did think one of the thing it was interesting, I don't know how representative kind of price is on this but um the fact that adam is emblematic of everything that's wrong with rust because Um, I the uh, adam rust super villain, um Because I did think it was kind of interesting that there was a bit of othering going on in terms Uh, and and this is where you do get to kind of uh, some of the of of the tribalism that I do think is problematic right when you I think it actually is really important that we Develop our own domains of expertise and languages and systems and so on but we also need to look outside of them for innovation That's happening elsewhere to kind of bridge the and I don't know connor I mean, you're obviously someone who who has done that because you are in In different languages and so on But it feels like that's not always happening. It's true of all communities I think I think all communities have this problem to a greater or lesser degree Uh, first of all, is that a fair read what what is the disposition actually let me ask this what is the disposition Towards rust in the c++ community if there's a prevailing one I think it is a Morgasborg like it depends on if you ask the community as a whole like you're not going to get a singular answer Yeah, right, right, right. I definitely know there are a number of folks that are actively on the committee that are huge fans of Rust. I won't name any by name, but I've definitely seen folks on panels and seen folks in talks that are alluding to like, look at how Rust does this. Isn't this awesome? I wish we could have this. So there are definitely people that are actively working on evolving C++ and paying very close attention. And I think for some of them, they actually like Rust better than C++. But they work at a company where they're not going to be taking their tech stack, which has millions, if not tens or hundreds of millions of code written in C++, importing that to Rust. So there's definitely folks like that. I think that there are other folks that are not big fans of Rust. I know several people personally on the committee and off the committee that there are just certain things that Rust does not have the capabilities of doing. I think the number one thing that comes up is variadic generics. And I've literally heard this quote that a language without support for variadic generics, it's just a non-starter for me. And I've asked this question to a lot of folks to try and appease those people. How do you deal with a kind of problem? The easiest one, or my favorite because it's kind of algorithmic, is we got a new quote unquote algorithm in C++ 23 called zip transform, which basically is the combination of zip and map. So instead of having to destructure the tuple that a zip will give you, it'll just automatically apply your binary or whatever arity operation to your zip together sequence, which is a nice convenience. But if you try to spell that in Rust, it looks OK in the case where you're zipping together two sequences. But what if you're trying to do that over three sequences or four sequences? And I asked a Rust pro this, and he said his answer was I would just zip twice in succession so that the type, the tuple type that you end up with is a tuple where the first element is a tuple and the second element is just your element. And so but because you have destructuring in the parameter list of your lambdas in Rust, you know the shape of that tuple. And so you can just destructure everything, call the internal elements A, B, and C, and you're done with it, which is not as elegant as what you can do with C++ because our zip transform is variadic. You can you can zip as many sequences you want and apply the corresponding operation with an arity that is equal to the number of sequences you zip. So like in this one tiny example, like because C++ has variadic generics, we have a more elegant way of solving this problem. And when I pointed that out to the guy, he was like well honestly that's true, but like this is a very specific example. And the niceties that I get from the tooling and the language and the memory safety and like everything that I get with Rust is like I would rather pay that cost of like having to write that, you know, or there's an iZip macro if I really don't want to zip twice in a row. And so like his sort of response is like I acknowledge this isn't as nice in Rust, but like I don't care. Rust is a way nicer language and like I will pay that cost when I have to pay it. And so yeah, I'm not sure that was a long-winded answer to some folks love Rust, some people won't touch it because it's missing certain features. I think others have a ton of experience and not like a sunk cost isn't the right word, but they don't want to be in a situation where Rust is now the go-to systems language and C++ goes the way of COBOL because then their 30, 40 years of experience is going to need to be translated. And I think that's actually a huge issue. Like I've talked to some folks and it's very hard to have a conversation about Rust because it's almost like an emotional reaction. Like you're trying to like, you know, devalue all my expertise and it's like whoa, I'm not trying to, that's not what I'm trying to do here. I'm just trying to like point out that Rust has a lot of great stuff that like C++ doesn't. Sure, it's missing X, Y, and Z, but does that make it not as good a language as C++? Anyways, I feel like someone joined this speaker table and I'll let folks respond to what I said. Yeah, and yeah, we're going to get Cliff in here in a second. So a couple of things come to mind. One, just to take your latter point there, and I think that this is really important because I've seen this in a couple different communities, definitely saw this in C when Java and the kind of when it was Java, Java, Java. And as we were, Adam and I literally ate at a cafe called the Java, Java at Sun and everything was Java, Java, Java. And it felt like anything that was not Java was legacy. And there's a sense of fear. And I think that, you know, I've recommended this talk in the past, but Rachel Stevens gave a terrific talk at last year's Munktoberfest on the root of much kind of bad behavior is fear. And being able to express that fear is really important. Because I think people feel personal fear, they feel like, I mean, just to counter to your point of like, wait a minute, if we're going to discard the language, I mean, am I getting discarded? Is my expertise no longer valued? If we no longer value this particular artifact, and that's really tough, you know, that's really tough to kind of confront directly. And, but I think it is actually really important to get on it directly. The other thing, I think it was coming to mind, because you're talking about variadic generics. And I guess I've never, I've never used variadic generics. So I don't know how life changing they are. This is where I'm going to want to turn it over to Cliff to get to get his perspective. But it does seem to be like the narcissism of small differences, where it's like the difference. I mean, like, okay, so if we add variadic generics to Rust, I mean, what or if they are added, I should say weak, I would have nothing to do with that. What would be would be the next thing? It wouldn't be an even smaller difference. But Cliff, you've used variadic generic and C++, you've done a lot of C++ work, and obviously a lot of Rust work. What's your what's your kind of take on these two different communities? Okay, so the end of that sentence kind of changed the question. I'm sorry. I miss variadic generics. Holy crap. I was saying this in chat, like they're one of those C++ 11 features where you mostly only use them inside of libraries, like if you're writing a boost library, but the effect that they can have on ergonomics for your end users is just massive. And when people say Rust doesn't need this, I point to the function types, which effectively, sort of like how Go has generics as long as you're Rob Pike. C++ or Rust has variadic generics as long as you're writing the support for the function types, which effectively are variadic generics for the arguments. Now that's not really how they're implemented, but the thing this would let us do if we had it, and I'm not sure that we should add it, but if if we did, is to be able to implement like a trait for all possible tuple types without having to write it for two tuples and three tuples and four tuples and so forth. Which is kind of awkward, but at the same time, is this enough for me not to use the language? Well, certainly not right now. And I did want to add something about fear. So I've been trying to figure out how to talk to your kids about Rust. I've been trying to figure out how to talk to people about Rust in a way that they'll be acceptable for several years now since I was trying to do it at Google. And I think you're absolutely right about fear. And we also run into a problem, which is that due to the demographics of systems programming, and I'm saying this as an aging white guy, we're not great at talking about fear. Totally. I have brought up fear as an origin for this, and I have had people explode at me and end the conversation. It's fair. And I totally sympathize with fear. Like it's the same sort of thing I feel like if I'm like, if I've invested a lot of time getting good at Rust, like if another language, if carbon were to went out, would my time be wasted? Which I don't think it would, because I've learned a bunch of stuff, but I sympathize. So I think if we could get better at talking about the things that we're afraid of and the things we're trying to achieve and not focusing so much on turning it into adversarial, I think it would work better for all of us. I think also if we can kind of find ways to allow people to move into a different world. And I mean, Cliff, you and I have talked about this in the past about kind of bringing, what elements of the old world can they kind of bring with them as a comfort? And certainly the one that comes to mind, and Adam, I don't know where you are on this, but certainly when I first started implementing in Rust, all of my comments were C-style comments, or I should say, I guess, PL1 style comments, but were of the slash star, star slash variety. And I don't know if you've went through this phase or where you are. I did the same thing, but I embraced Rust format, I think much earlier than you did. And actually also tried to convince some of our other colleagues like Dave Pacheco about the beauty of Rust format. And Rust format sort of cured me of my C-style comments because it fucked them up every way. In fact, I've contributed multiple PRs to Rust format basically as an apology to Dave for forcing him to use Rust format with his C-style comments. But yeah, I brought a little bit of the old world with me too. And I felt like that was psychologically important for me personally, as I was kind of venturing into the new world of Rust. And this is obviously coming from C and not C++. And then it's also true that C++ comments, it's like now you get to the college relationship with that ended poorly. And I'm realizing, Adam, this is going to completely come full circle because you and I find myself missing is now C++ style comments in DTrace. Which is, well, well, well, look who's adding it. I've got to get that fixed at some point. And Cliff, I'd be curious about what your thoughts are having dealt with, I mean, you've dealt with a lot of folks coming to Rust from different languages. And what have been kind of where you see them having allergic reactions that are like not well-founded, that are just kind of like part of this, like this is different and therefore I'm attacking it only because it's different versus like, hey, just take a second and learn it. Oh boy. So it's super easy for us. I think people who interact with code all the time as our job, as our hobby, as a significant fraction of our life to be really sensitive around syntax. So I'm just going to skip right past that because I think that affects every language. And I don't think it's very, I mean, on some level it's interesting as a human factors issue, but it's not very interesting in what it tells us about Rust or C++ or anything like that. It's just unfamiliar bad. Some of the things I ran into early on have since been fixed, but like, so Rust has opinions about the fact that types should be capitalized for instance. And this actually caused an engineer I respect a lot to completely bounce off the language first thing because that seemed incredibly foreign to him. And at the time the link you had to turn on to get the compiler to shut up about that was called allow bad style. So that was kind of rude and we fixed it. No, it's not a value judgment. You just have to disable value judgments in order to be able to compile your code. So what's that? Yeah. Wow. Yeah. So that was, I think whoever did that in the compiler probably didn't think about it that way. And it is now different. Other than that, I think a lot of people bounce off of Rust because of the complexity. Coming from C++, you're less likely I think to bounce off due to complexity, but Rust has more going on than C or than Python. And it's at an interesting sort of point of irreducible complexity if you want to have certain goals. Memory safety and trait-based generics are the two big ones that have interesting interactions. And I feel like you could write an entire book on this. I was actually talking to Brian about this this morning, but I think Rust is complicated. I also don't see what to remove and maintain the goals that I'm trying to get out of the language. So Zig, for instance, decided to punt on both memory safety and race condition safety in the language design, which is a trade-off you can make. And Zig is a much simpler language as a result. But I want freedom from data races and memory safety, and I would love to see how much simpler language achieved those while maintaining Rust's bare metal performance characteristics. I'm just not sure how to do it. I haven't seen any existence proof yet. So when somebody has it, please send me a link. Yeah. And I think that it's... I mean, the other thing, just because of this kind of grand bargain that Rust makes with you, I mean, Rust brings so much to you, but you've got to meet it a little bit. You've got to travel a little bit. And I think that the distance that you have to travel, I mean, I do think it's... You've got to learn it. I mean, it's very... And Adam, I mean, this is like your original Rust blog post from back in the day, that if you try to kind of like bounce around... And when you were learning it, like the compiler was in a different state, there were less resources available, there were a few bugs on it, there was no narrative to go on, and it was just harder to not like bounce through it. But you really do need to sit down and be like, I'm going to take this time to really learn this. You just can't copy and paste off the internet the way you can with some of the languages, frankly. I mean, you can do that with Go, I think. I mean, I don't mean that... And that's not pejorative. I think that that's arguably a strength. And you can certainly do that with JavaScript and not really know what exactly is going on and still have a functional system. But then you've kind of shifted the cognitive load away, and then it comes to bite you later, is kind of the Rust thesis. And that's not a fit for everybody. I do think it's actually really important to know that bargain going in. Because I have to say, the programming Rust book, the O'Reilly book, makes this really explicit about this bargain that you're striking. And it did really help change my disposition to the borrow checker of like, okay, I need to really just... Instead of just trying to kind of throw myself at this thing and bloodying myself against this immovable object, I need to step back and appreciate what it's giving me and be willing, in particular, to change the structure of my program. Because Cliff, I think that's a pretty big and important thing in Rust that if you've got a preconceived notion of how you're going to implement it coming from C or C++, Rust may want you to consider a different approach. Absolutely. And there's a lot of data structures and even some algorithms that don't work well in Rust because we haven't yet figured out how to explain to the compiler in a formally provable manner that they don't violate aliasing, that they don't reuse pointers outside of their appointed lifetime. And I write, particularly in things like graph algorithms, I approach things very differently than I would in C++, and I have to. And that was a hard learning curve for me, consisting of a lot of cursing and going back to other languages early on. But is this a good feature of Rust? Not necessarily. The code I produce is sometimes more efficient than it would have been, but sometimes it's not. And I think different languages want different shapes. This is probably not going to resonate super well with the audience, but Forth is my go-to example of this, is that Forth really is a language that needs different approaches to things than most other languages. And the way that you do something ergonomically in a way that will be maintainable is very different from how you do it in C. And I feel like the C to Rust gap is in many ways similar. Less similar than the C to Haskell gap, for instance. But yeah. C to Haskell being a bigger gap, in other words. C to Haskell is a much larger gap, yes. Yeah. I mean, I was just going to comment on what Cliff said, is that I've had this conversation with a luminary of the C++ community who has, I won't name, but has given keynotes at large conferences. And almost any C++ developer that watches talks and listens to podcasts will know their name. And their opinion is that what Cliff just said, and I know, Brian, you've made this point, I think it was in your Rust OS talk, that the folks that show up at Rust's door and try and do a doubly-linked list and then have trouble with it, and they say, okay, I can't do this, Rust bad. This person's opinion is that if you're telling me that I can't implement a linked list or a doubly-linked list easily, then it's just a bad language. You're telling me I can't express that? How should me needing to go down a different path, how is that the correct way? Anyway, so I've had this conversation being like, trying to quote, basically paraphrase what you've said before, Brian, and what you just said, Cliff. And there, it's just like a stone wall, being like, you can't tell me that I'm not allowed to program the way I know how to program. And I'm like, well, okay. And it's an impasse. I've had zero success with certain individuals, telling them and paraphrasing what you've said in your talks and what you just said, Cliff. They just don't accept that as an acceptable answer. I actually completely agree. And I think that's an underappreciated thing people bounce off of, is bringing a data structure you're very familiar with. For me, it was intrusive doubly-linked lists, which in an operating system kernel with real-time requirements, intrusive doubly-linked lists are a great data structure. They're also really difficult to get right for an expansive definition of right. And so, one of the things I've been doing recently is trying to write a correct one in C. And the definition of correct that you use there is really important. The number of things you have to document that you cannot do, for example, struct return, struct assignment, that the compiler won't stop you from doing. But anything with internal pointers, struct assignment is not safe. Rust knows this and as a result will reject your program. That's not great. It'd be nice if your program would work. But I think one of the things that's underappreciated about particularly intrusive doubly-linked lists in other languages is they are relatively error-prone and pretty easy to come out with dangling pointer errors. And that's actually the reason why they're hard in Rust, more or less. Totally. And it's funny you should mention that because that was basically, for me too, it's like I was re-implementing this thing that had used an of AVL tree, which we use all over the place in the kernel, and they ported to Useland, and it's super easy to use. I am really curious, Adam, because you obviously use AVL a lot too, what implicit things do we know to avoid with it? I'm not sure. I think that the big thing that you give up there is that it leaves much up to the thing that it is being embedded in. So there is no locking in libAVL. It's like, that's up to you. And Cliff, I don't know, maybe from your perspective, that'd be like, well, that's easy to get wrong for sure. And it is. As long as something in the type system prevents you from using that code across threads, but that's not a feature in C, unfortunately. Yeah, that would be a negative. I mean, when you're deleting something, an entity that exists in multiple trees, I feel like that's a guaranteed parsecs in terms of getting that right. And there's a great power in that you've got an object that can be on five different data structures simultaneously, which we definitely do in the kernel, Adam. There's a lot of CFS data structures in particular that were on a lot of different trees at once. And yeah, easy to get that wrong. Easy to forget that you are. So there's a peril there for sure. I haven't used that particular library, but off the top of my head from your description of it, I suspect that there's a couple of things that are potential foot guns here. One is that you've got very, what I would describe as challenging alias situation there with your thing in multiple trees that may have other overlapping nodes. And so deleting things, as Adam pointed out, can be very challenging. But even just mutating things safely could be challenging because of aliasing. The other thing is, particularly if you've got an object that can be a member of multiple intrusive data structures, like an intrusive linked list or an AVL tree, you always wind up needing to upcast. I guess it depends on your, or downcast. You need to be able to go from a link, a node that's reached by the pointers in the generic data structure up to the container type. That method, which is either punning and assuming it's at offset zero in the struct, which please don't do that, or a container pointer, which you can totally afford, please use a container pointer. That in itself is another thing that is easy to get wrong, particularly if the struct is moved or if the container pointer is corrupted or otherwise initialized wrong. So these are a couple of things that if I were interacting with a library like that, I would be keeping in mind to try to avoid doing wrong. Totally. And when you create the AVL tree, you're indicating the offset in the structure that contains it. So that's very explicit in the contract. Oh, wow. So you're calling offset of and telling it on creation? Yep. That's right. I'm sure nobody ever gets that wrong. Well, I would say it's not that... I think you don't actually get that wrong because if you do get that wrong, it's just like nothing works at all. I think what it does mean though is that there are just huge compromises that you're making that then become... And in particular, obviously, because it's an intrusive data structure, you've got no ability to turn that into a smarter data structure. That's going to be an AVL tree, not a vtree at the end. There's just no real way around that. Plus, since you're working in C, you're inevitably going to wind up casting a void star to some specific type. So if you insert a thing with the wrong type, that can become very exciting. Yeah. The reason we did that, obviously, is for memory efficiency. The reason you use an intrusive data structure is for memory efficiency, for performance. And for me, the thing that I had to let go of when I was... Well, one, I had to let go of this. I actually really tried hard to make this work in Rust, and I'm just not smart enough. That's what it boils down to. I am just getting mulled. Of course, there's that blog entry, so you really want to write a doubly linked list in Rust. And the tone of the blog entry is like, don't do this, which apparently... And I'm like, yeah, yeah, don't do this, page down. Okay, yeah, let's do this. They're like, no, seriously, don't do this. I'm like, yeah, yeah, but I want to go do that. It's like, hey, how many warnings do you need, pal, before you're just like, don't do this? I mean, part of it is that until fairly recently, the semantics around that were formally undefined in Rust. So I've got one on GitHub that's a worked example of a doubly linked intrusive list that I believe to be correct-ish and that will... I see Ben came up in the audience. This will actually pass tests on Miri, which is the undefined behavior checker for Rust, one of the undefined behavior checkers. But I use that data structure because of the determinism it provides, but it is... Implementing it in Rust certainly makes me make very explicit all of the things that would have been comments in my C implementation. And I agree with that tutorial that this is not a beginner task. It really is not. And then it's... And when... If you were to bounce off the language then, it would just be sad because it's like you're bouncing off the language for kind of the wrong reasons. It's like you have kind of accidentally put yourself into something that is just... That the language makes really, really hard because of the things it gives you on the other... And I think if you kind of go into it thinking of like, I'm going to get these kind of magical things if I'm willing to change my thinking. It's... And I think that we... And Cliff, you've got a terrific blog series on learning Rust the unsafe way for C programmers in particular as... And what's been the reception to that actually? I mean, the people I hear from, the reception's been pretty good. I don't know what the reception's like among the people I don't hear from, obviously. Yeah, I guess that's fair. I suspect... I mean, I guess I could go search the orange site, but I don't as a matter of policy. And that's actually my second attempt at convincing my C programming friends, because most of my friends are systems programmers, at least work friends. And convincing my C programming friends that maybe they should give Rust a try, that it's something that might be interesting at their level, because my first one was... Well, it's still on my website. Shall we say less tactful and was far less effective. So I regrouped and took a different approach and tried to be... And this comes back to some degree to the fear thing we were talking about earlier, but also to the cultural holdovers and cultural comforts that you mentioned earlier. Seeing that you will be able to do this and still apply your skills, that you will be able to take some of the data structures from your past life and apply them. And this is actually a point that I think is underappreciated that I was hoping to get to in a future section of that, except that I got a different job instead. There are a lot of data structures I use in Rust that I would not use in C. And it's because they would be cowboy in C, like loaning sections of my stack to other threads, like sharing aliased pointers to my stack with an interrupt handler. There are things I can do in Rust that I can do that I know would fail at compile time if I got them wrong, that I would never have reached for in C. So it's not like there's a one-sided trade-off where you can't do the data structure in Rust. It's each language has data structures it's better at and data structures that it's less good at. Yeah. And I think that just to how you kind of think about how to phrase some of that. And I think it's interesting about your less effective approach versus more effective approach. Because I think it is really important to let those that are kind of coming to, I'm going to take on a bunch of change with this new language. And to know that this does not invalidate your previous experience and this doesn't invalidate what you've done. And to the contrary, it's like you want to bring some of that with you, but you need to kind of, there's some that you're going to need to leave behind or at least phrase differently, things like the double-linked list. But then there are other things that I think are going to be really valuable. And I think one of the things I like about Rust is it does take from a bunch of different languages in terms of like, it borrows wherever it can, I feel. And when things are- That's a good Rust pun actually. What's that? That's a pretty good Rust pun. But I think that that's really important. And that I think is part of why you're going to find things, whatever language you come from, you're going to find things like, okay, there are things here that actually, this actually makes sense. Someone was here before me that had my same disposition and has left something that's added to the language that I am delighted by. And I think there's a lot of that stuff, but you got to get over that initial hump to get to it. Yeah. I initially underestimated the fact that for a lot of us, particularly those of us who have been doing this for decades, adopting a new language is not an intellectual argument. It is an emotional argument and you have to approach it as such. People will take it very personally. People will identify with their language, even if they don't realize they're doing it. And I should have seen that coming because I see people in the Rust community doing the same thing. So we all do it. So you have to be careful attacking C to make sure that you explain that, no, you're not bad for writing C. I've written a lot of C. I still do it from time to time, but here's a different tool you might consider using sometimes. I also think that Rust will make you a better C programmer. It'll definitely make you a more frightened C programmer, speaking for myself. Rust made me the world's most annoying C++ code reviewer, to be perfectly honest. This started to be a problem at Google. Once you are reading people's structures and back annotating the lifetimes that you would need to express to do these things in Rust, I don't know. The number of aliasing bugs that you can find reading an average code base is quite high, or potentially. I could imagine you saying, well, how do you know that this operates in this particular way, or has this particular lifetime, and those arguments probably ending with, because I said so, or because I'm pretty sure that that's true. Enough already, Cliff. Yeah. So the review tends to end with, well, can you please mention that in the comment on the function? Yeah. I think it's another reason to, and I think it's also just valuable to get out of, to try other systems, no matter what. To implement new languages and to try out different things, try out different systems, because if nothing else, it tamps down some of the fear associated with tech tribalism. And I think when that fear begins to feed on itself, that's when you get to, I think you just get into a bunch of really bad behavior. It's just not constructive. That's when things get gross and we don't make progress as a trade. We don't make progress as industry when we're too focused on that. And I see a lot of people in the Rust community criticizing C++ who probably don't have significant C++ experience. And I think it would probably be really helpful for a lot of these people to go spend some time writing some serious C++, which might sound like a weird recommendation for me, but C++ has things to teach you. Rust has things to teach you. I don't know that you should write C++ in your avionics firmware or anything where it could kill people. That's my well-known bias, but go learn C++, go learn Haskell, go learn Erlang. These all have things to teach you. And frankly, Haskell will make you a better C programmer. I don't know how, but it will because it'll stretch your brain. So go play with C++ and see what you bring back. One of my favorite quotes is from Guy Steele when he was doing an AMA at PLDI. I want to say it was 2020 or 2021. It was one of the ones that was virtual during the pandemic. And he just had this one small quote that was, I love all programming languages. And then he went on to follow up to say that there's too much, not like dunking, but just folks and communities like to go back and forth. And he thinks it's a real shame because there is something, regardless of your personal feelings of insert any language, there's always something to learn from that language. Even if it is a language that is sunset, even if it's a language that you would never use to solve whatever problem that you're currently solving, you can learn something from every single programming language. And we would be in a better place if we did more trying to understand what are the superpowers of this language versus why my language is better than your language. And I think that is my personal ethos is that I don't think folks should go and learn insert language, APL, Haskell, whatever, because they should go and convince their company to start using that language. But there are things to learn from every programming paradigm. And one of my favorite tweets is by Ben Dean, who's one of my favorite speakers. And he has this tweet along with a blog that says, everyone should go and learn one of the following languages from this paradigm. And it's like Smalltalk for OOP, Haskell for functional programming, APL for array programming, Prolog for logic, et cetera, et cetera. His point being that I'm not telling you to go and learn this so that you can tell your company to switch. I'm telling you to go and learn it so that you can learn how to solve problems in that paradigm. And it will enable you to put tools in your tool belt to then use those tools in whatever language that you use day to day. And if you know C++, going and learning Zig or Rust is not going to teach you as much as going and learning one of those other languages from a different paradigm, which I love that tweet. And I wish programming communities would act more sort of in line with that. Yeah, I forget the term. I think it's disdain culture. But there's a thing that a lot of us in the Rust community historically have tried to avoid and not necessarily succeeded. But the notion that you can like a thing without having to be shitty toward its competitors. You can like C++ without having to dunk on Rust. You can like Rust without having to dunk on Excel spreadsheets. You can learn C++, right? And for systems programmers in particular, for the people that I mentor, one of the things that I recommend is that they write a fourth implementation, like from bare metal. And I explain it as the fourth and particularly a hand-rolled fourth implementation. It's like a lightsaber. You should build one. You need to build one to sort of fully understand your trade and then hope that you never have to use it for anything. Boy, so when the fourth interpreter comes out, I've got this kind of image of you, Cliff, as Obi-Wan, with your fourth interpreter. And I think implementing a fourth interpreter as well, that's something that everyone can go to. And it's also educational about why fourth has been used, where fourth has been used. Because, yeah, you can implement a fourth interpreter in not much memory, as it turns out. Well, I think this is a great note. And Connor, I think we have settled the beef between our two podcasts. As you say, it's good for ratings. I feel that it was. But this has been a lot of fun to have you on. And I think that folks should check out your podcast. It's not just ADSP, but also it's Arraycast, right? It's the other. And then I think, Connor, we've got to have you back on to talk about more of those 70 podcasts that you find. If you find good podcasts, definitely point us to them. We've got, obviously, folks here that are also podcast listeners. So we'd love to hear that, your recommendations there. But I just think that you're, I mean, I think getting out of your comfort zone, learning about different communities, learning about the shared history of the domain, I think all of these things are really, really effective for us as a domain, as a craft. And the beef is settled, and I think we all have learned how to settle beef in the future. If I may give a quick plug, Adam, for in the vein of arguably not settling beef, but stirring some shit up, I've got a talk at P99Conf on Thursday. This is a free online conference. We had that great conversation with Kelsey Hightower on corporate open source anti-patterns, and I'm giving an update to that, and then hosting a panel with Adam Jacob and Ashley Williams, who are regulars on the podcast at P99. So that's going to be on this coming Thursday. And hopefully, if you're listening to this with enough time to attend, you can join us live. And I'm not sure that we'll be settling beef. No, I think that's going to be the opposite. But yeah, it was a brief moment. It was a nice moment we had there. It was a nice moment. Now it's time to go pick some fights with some bad actors out there. But no, I think that there's some things that need to be said. So looking forward to that. And Connor, thank you again. Cliff, thank you for joining us. Great to get your wisdom, and excited to remain a listener to ADS-P. It's really terrific stuff. Yeah, thanks for inviting me on, and also continue to do this. I hope that this serves as a, what do you call it, a mold for other companies that potentially are having meetings that there's no reason they couldn't hit a record button and put them out. It's honestly not as much work as folks would think. And this is the first of its kind, I think, that if other companies were doing this, it would be awesome for folks that don't work at that company to be flies on the wall for those conversations. Yes, please. And please point Connor and us to it, because we'll be fans of your podcast, too. Absolutely. All right. Thanks, everyone. See you next time. "
  },
  "75442df5-1cf5-4d1e-9f95-8898f3af2f3a": {
   "Title": "No Silver Bullets",
   "Description": "\u003cp\u003eBryan and Steve Klabnik discuss Fred Brooks' essay \"No Silver Bullets\"--ostensibly apropos of nothing!--discussing the challenges to 10x (or 100x!) improvements in software engineering.\u003c/p\u003e\u003cp\u003eIn addition to \u003ca href=\"https://mastodon.social/@bcantrill\"\u003eBryan Cantrill\u003c/a\u003e speakers on included \u003ca href=\"https://twitter.com/steveklabnik\"\u003eSteve Klabnik\u003c/a\u003e, \u003ca href=\"https://hachyderm.io/@iangrunert\"\u003eIan Grunert\u003c/a\u003e, and \u003ca href=\"https://mastodon.social/@aka_pugs\"\u003eTom Lyon\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eSome of the topics we hit on, in the order that we hit them:\u003c/p\u003e\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://worrydream.com/refs/Brooks-NoSilverBullet.pdf\"\u003eNo Silver Bullet\u003c/a\u003e by Fred Brooks\u003c/li\u003e\n\u003cli\u003eSub-podcasting (it's a thing!) \u003ca href=\"https://redplanetlabs.com/\"\u003ethis\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003evideo: \u003ca href=\"https://www.youtube.com/watch?v=HWYrrw7Zf1k\"\u003eFred Brooks speaking on No Silver Bullet\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=Gzj723LkRJY\"\u003eRuby on Rails demo\u003c/a\u003e (2005)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://futureofcoding.org/\"\u003eFuture of coding podcast\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Amdahl%27s_law\"\u003eAmdahl's law\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition\"\u003eFizzBuzzEnterpriseEdition\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://matt-rickard.com/instinct-and-culture\"\u003eKnuth and McIlroy Approach a Problem\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003cp\u003eIf we got something wrong or missed something, please file a PR! Our next show will likely be on Monday at 5p Pacific Time on our Discord server; stay tuned to our Mastodon feeds for details, or \u003ca href=\"https://sesh.fyi/api/calendar/v2/iMdFbuFRupMwuTiwvXswNU.ics\"\u003esubscribe to this calendar\u003c/a\u003e. We'd love to have you join us, as we always love to hear from new speakers!\u003c/p\u003e",
   "Link": "https://share.transistor.fm/s/d584546b",
   "Filename": "75442df5-1cf5-4d1e-9f95-8898f3af2f3a.mp3",
   "GUID": "75442df5-1cf5-4d1e-9f95-8898f3af2f3a",
   "Published": "Mon, 14 Aug 2023 17:00:00 -0700",
   "Transcript": "Oh, so much going on in the world, Steve. Yeah, I know. I got all these people trying to tell me that Cobol does pay very well on Twitter right now. Hi. Hi. What was the context of that? Did you? Where do you answer that? Earlier today, a discussion with some people over chat, Cobol being the meme of Cobol being a good job you can get paid for heavily came up. And one of my more harmless conspiracy theories that I believe in, not that I believe in harmful ones, but a conspiracy theory that happens to be harmless and not something terrible, is that Cobol is not actually a well-paid profession. It's just a thing people say. Because if you try to go look for a high-paying Cobol job, they're like, oh, yeah, it pays extremely well. We pay $50,000 a year, which, outside of the context of software, is a great job, of course. But this isn't the like, don't learn Rails because the banks pay Cobol programmers extremely well because there aren't any of them anymore. I can't actually find evidence that that kind of job exists, other than a couple unconnected anecdotes. OK, the mean salary for a Cobol programmer in Austin is like $70,000 a year, or whatever, for example. And are you certain that this is not denominated in $1963, which would actually be real? Yeah, yeah. It's possible. There's a local hot dog joint here in the Bay Area. Should we go to Top Dog? Steve, you've been out here to go to Top Dog? I have not been to Top Dog, but maybe in a couple of weeks, whenever I'm out there, we'll go. I don't know that it's worth it. Top Dog is kind of an experience. So it is run by an ardent libertarian, an ardent libertarian of admirable purity, that I feel like we were all once. It's like, wow, this is like me when I was 13, just like straight up. And then there's kind of like this libertarian propaganda around the hot dog joint. And if you wish to pay for your hot dog in the currency from the last year in which actual proper silver was used in the coinage, which I believe is 1969, then you can pay 1969 prices. So if you wish to pay for a hot dog with a dime, you can do so, it just has to be a 1969 dime that has silver on it. And so I'm wondering if the Copal programmers, it's like, no, you get $30,000 a year in silver. It's actually, no, it is, it's a great gig. I feel like it's a good sign for this podcast that both of us had to immediately take a step back and qualify a statement halfway through like the first sentences that we both said. Is that, wait a minute, is that foreboding? I said, I think it's good foreboding. Oh, yeah, it's good foreboding. It is, it is. Yeah, yeah. It's good foreboding. Okay, so we, so Adam is attending to sick children. Adam very much wants to join us, but his household duties have called, nurse duties have called, and Adam is of course doing terrific work as a parent there. They're attending to the ill children in his household. So Adam, to a speedy recovery for all in your house. Um, okay, so we, we got here, so the tweet here is apropos of absolutely nothing that we're talking about Fred Brooks's classic, but of course, it isn't actually apropos of absolutely nothing. In fact, it's, it's, it's the opposite of that. What, what is a podcast episode that is a subtweet, Steve? Do we have a, is that a sub episode? What do you call that? When you have an entire podcast episode that is a subtweet? I mean, I mean, aren't most podcasts kind of sort of subtweets when you're talking about it? You know, yeah, that's, that's true. I, so, okay, so, and I think I definitely, some people were hitting me up about like, what have you been like subtweeting so much about? And so just to be, just kind of have it out there. So we're all kind of, so it's actually not what we're going to talk about, but I, this, this is actually important context. So a company, Red Planet Labs, is going to announce tomorrow at 1059 AM, a time that comes up quite a bit, that they will be releasing a programming platform that promises 100X programmer productivity. And I think it's fair to say that I personally am skeptical, but that's not important right now, as Airplane might say. I am skeptical, I also, and by the way, I think there is absolutely going to be a real technical depth to whatever they announce. I like, there will be technical depth for certain. And the question is, is it 100X programmer productivity? And also, and I'm sorry, Steve, I just, I can't, I know, I would like to think that I'm above this kind of a pot shot, but apparently I'm just not. In the email that they sent out to folks in their email list, they believe it is the biggest paradigm shift in software engineering in at least 30 years. As if the internal debate was, is this the biggest paradigm shift in 30 years or 60 years? And they kind of split the baby with at least 30 years. So you know what, who knows, it's possible. But maybe it's a problem. But the important, the part to like bring this up is basically like, this is not what we're going to talk about for the episode, but this is what got us starting to talk about like, what does a 100X platform, like how would you evaluate if this claim is true or false? How would you evaluate if this claim is true or false? I mean, do you have to get into like, what does it mean to try to like enhance someone's productivity 100X? What does it mean for 100X? I also would like to say that 100X is the new 10X. I swear when I was coming up, this was 10X. And this paper only talk, Brooks's Classic does talk about factors of 10, not factors of 100. We actually did a 10X on our 10X, literally, to get to- 10 years, they did one 10X a year, and so it's going to be 100X total. That's right. Which is, I mean, I think it's fair to say like, step function in the software engineering paradigm. And you know, as someone had kind of mentioned this, that the, like, hey, this is, you should go back and reread No Silver Bullet. And how do you, Steven, you read No Silver Bullet back in the day? I was required to read it as part of one of my earliest college classes. And like, I hadn't seriously revisited it since then. I mean, obviously there's sort of like the meme-ified way that we take a lot of these texts and then kind of like, you know, talk about their conclusions without going back and reading it again. But like, I hadn't until this morning, when we were talking about this, I hadn't like revisited it at all. I was in the exact same boat. I had not revisited it. One thing we do need to revisit this quickly, because Ashley's asking in the chat about Split the Baby. And now I'm very concerned that Split the Baby is not enough of a popular idiom for me to be using it as casually as I'm using it. I thought you were mixing metaphors between splitting the difference and like the parable of the Judgment of Solomon or whatever. I think that's right. Yeah, Steve, thank you. And thank you for being willing to chalk up to basically just linguistic incompetence. The, oh, the baby in the bathwater, splitting the baby in the bathwater. Yeah, I kind of had Split the Difference but I feel like we talked, but splitting the baby is like the compromise. That's not a compromise. I don't know. It's, all right, it's, I think I need to stop dissecting this. Let's just say it was not the bone marrow. The best way to explain a mixed metaphor is to mix even more metaphors in there. You start, you know, making a good metaphor stew and then everything is very comprehensible. A little metaphor booyah base. A jambalaya, as Adam would say. We've got a proxy Adam in absentia. I believe that Adam would say that it is a metaphor jambalaya. So Adam, I hope we've done right by you by representing the jambalaya. So yeah, Steve, I was in the exact same boat. I think I'd read this, like, I guess as an undergrad. I know I read the Mythical Man Month like some number of years into practicing as a software engineer but I basically had not gone back and read it since. And just, so just read it effectively recently with all this coming up. What'd you think on the reread? What was your take? So I think that this is classic Fred Brooks in the sense that when I read his stuff again now it is like so on the money for so much of it. It feels like contemporary but then there's just suddenly an example or a detail that's like clearly it's very old and it sticks out like even more than it would otherwise. And so it kind of like, it's a very like emotionally jarring like thing to read because like so much of it seems like it could have been talked about last week. And then he's like, well, of course, you know there's not enough screen room to see more than one document on a screen. So like, you know, nobody's really gonna be able to do that. And you're like, wait, hold on a second. Like I thought we were talking about how AI is not going to like make programming better you know, at the time or whatever. So that's- He is like a time traveler that actually doesn't want to get caught but a painter like trips up every once in a while and says something that reveals his true origin. Like, wait a minute, are you from the, and Mythical Man Month is this way too. So that's asking in the chat, is it worth the read? I do think it's worth the read but you definitely have to factor out the bid on secretaries. Do you remember this, Steve? Or there's like- There's a whole bunch of pop from like what the secretary should do. And I'm like, yeah, we don't, okay. No, we do. No, that's not, that's not traveling as well. Yeah. I mean, I think part of also like in terms of is something worth it to read like it's like 15 and a half pages. You can read it relatively quickly. So I think it's worth reading just cause it's it's not like you're like, is it worth watching all the extended Lord of the Rings movies, right? Like you're not putting in a lot of effort for what you're getting out here. So I think that the worth it is very clearly on the side of, yes, you should read this. Yeah, I think it's worth being aware of. I think that this essay is actually, I kind of didn't like, I just don't remember it really sticking with me. But the essay, I think the essay is arguably like the best part of Mythical. I mean, if you're only gonna read one part of Mythical Man Month, like this essay is not bad. It travels pretty well. And there are some things you just like, get like, wait a minute. Okay, did you just refer to Constantinople? We don't actually call it that anymore. But it's, I think it broadly travels pretty well. You know, I was looking for other kind of discussions online. And actually it's funny, I found a podcast called the Future of Coding, which I had in my queue before, but not listened to. And they did a really in-depth discussion of it that I enjoyed. It was super long, like four hours long. And I gotta say, like, I was starting to listen to it as I'm in like Costco, buying a bunch of stuff for a Scout barbecue yesterday. And they talk about like, you know, well, it's the first podcast of the year, we should make predictions. I'm thinking to myself, hey, we make predictions. That's cool, another podcast makes predictions. And then they're like, yeah, you know, I was listening to the Oxide Friends and they make predictions. I'm like, hey, wait a minute, that's what they're talking about, that's what we need. So Future of Coding folks, thanks for the shout out. And really enjoyed listening to your podcast as well and the discussion there. It got very philosophical. So Steve, I don't want you, I think of you as more than just my go-to for philosophy. I want you to know that. I just don't want you to feel insulted that I, exactly, that you're not just the philosophy role player around here, but. It's not just when your co-host is sick and you need a philosophy person. It's more than that specific circumstance. I knew that was gonna come up. Look, look, okay, I, okay, it's true. But here we are, look, here we are. Let's just make the best of it, you know? So they were really into kind of the Aristotelian dichotomy between the accidental and the essential and as a kind of a thrust of the paper. And I didn't quite infer that as the thrust of the paper, but I don't know, but then it did cause me to kind of go back and reread it more closely. Okay, can you give us some key philosophies to do that on demand? So this is not exactly what they said, but it's close enough. And I think it's a good way to ease into it. So I'm gonna start slightly somewhere else. The Larry Wall has this idea called the waterbed theory of complexity. Now, I don't know if you've ever been around a real waterbed, but if you push onto one side of a waterbed, it makes the other part rise up, right? You have a bunch of water inside of basically a giant balloon. And so the amount of cushion doesn't disappear. It just gets displaced into a different area. And so Larry really strongly believed that with complexity, there's essential complexity and accidental complexity, which this also makes reference to. I'm not sure if he got it from here or if it's just a similar thing or whatever, but the idea is kind of like there's some parts of problems that they just are complex and it's not actually possible to simplify them. It turns out that the real world is a messy place and complexity exists. And therefore, you can't really get rid of that complexity. You can only move it around into different places. And so I see this come up a lot when discussing, for example, why some people talk about why they don't like the Go programming language is because Go kind of says, we can introduce this simplicity. And a lot of people will say, I don't actually believe that it's reducing the complexity anywhere. It's just moving it to other places. And so you get endless arguments. And so I thought this section of No Silver Bullet was really interesting because they also talked about this general idea of there's parts of a problem that are irreducibly complex. And I liked specifically, not just because I went and saw Oppenheimer three freaking times and Einstein was part of that, but they make reference to this Einstein quote. Let me grep for this real quick. So should I say that before? Yeah, so Einstein repeatedly argued that there must be simplified explanations of nature because God is not capricious or arbitrary. But no such faith comforts the software engineer, which I thought was pretty solid. And so they get into this kind of like, where can we, if we're trying to simplify things, can we even simplify stuff and all that? And I thought that was pretty good. Yeah, I thought that was great. And he kind of gets to the, I mean, I think Brooks is, to me, Brooks is fundamental thrust is against those that kind of offer these single solutions because his kind of point is, if you don't attack the essential complexity and you only attack the accidental complexity, the upper bound on what you can do from a productivity perspective is the elimination of all accidental complexity, which is not enough to give you a factor of 10 increase unless you're spending 90% of your effort on accidental complexity, which I was like, I mean, that's a good point. Yeah, kind of like Omdahl's Law style argument, which I continually cite as like the most important and useful thing I ever learned in my computer science degree is Omdahl's Law, which is. Yes, getting Omdahl, yes, absolutely. And I actually, it caused me to reflect, I'm sure you as well, Steve, in terms of like, to take something like Rust, Rust really eliminates a lot of the accidental complexity and you are left with the essential complexity. In fact, you're staring the essential complexity like dead in the eyes, I felt. I think on Rust's best days, that is true. And it's not always, you know, that's the aspiration, right? Like I don't think it always lives up to that, but that is where a lot of the complexity does come from. It's like, well, it just turns out this domain has some irreducible complexity into it. Yeah, and I think, I mean, even when you think about like something super basic, like how does this function return an error? And the, you know, Rust really forces you to confront that accidental complexity and kind of, you got to boil it down to the essential complexity. Like you're not allowed to actually like, no, we're not gonna use sentinel values. We're gonna actually have some types and you're actually gonna do this in a way that you actually have to go deal with it. Actually says, you know, strengths, totally, oh my God. And there's so many times when I, especially when learning Rust, when Rust felt really, really pedantic, you're like, oh Jesus Christ, Rust. It's like, come on. I mean, it's like, you know, yeah, I mean, you know, you're technically right, but can't we just like, can't we let this one slide? And then you realize like, no, no, this is actually forcing me to deal with what I'm actually doing and the consequences of my actions and what is the essential complexity here. So I don't know, it did cause me to kind of rethink it. I think it also feeds into a lot of the beginner anxiety when learning Rust, because when, you know, virtually every function that you call returns a result and you feel like, oh God, do I gotta figure out how to handle all these things? You know, there's sort of like a, kind of almost wanna make those like bell curve memes where, you know, where you start off, you're just calling on wrap on everything because that is like, I am overwhelmed by this complexity. I don't need to think about it. I'm just gonna blow up on any error whatsoever. And then kind of when you get to be an expert, you're like, yeah, just toss a question mark on it because I don't need to handle the actual error here. And I don't care what kinds of errors they are, just like pass it up the stack. And then there's kind of the middle area where you're learning and you're like, I didn't realize that changing the current directory of a process could fail. Like, I didn't know that was like a thing that could happen. And now I do and like, oh God, there's like 15 different ways that this function can fail and, you know, figuring all that stuff out. So yeah, so I think it's, and I think that like that's where a lot of the folks that are trying to either improve Rust directly or come up with successor languages to manage this complexity. Because there are some folks who do believe that Rust's complexity here is not actually accidental or is not actually essential and have several strategies for trying to reduce it. And I'm excited to see how those like develop further on in the future. So we'll see, but yeah, totally. Yeah, that's interesting. I think you can get like a kind of that interface between the accidental and the essential. You can, there's definitely debate to be having, which is which. But I also feel that like at the extremes, it's very clear that like, no, no, this is accidental or this is essential. And I feel that what Brooks is addressing is like the things that are going to really take a big swing at that accidental complexity are the things that are going to kind of hit this stuff that is indisputably accidental. And I mean, and there are. To like, to make the argument Brooks kind of makes in some parts here, if you made the borrow checkers trivial for every programmer, Rust would still have things you would need to learn about it. It's not like you would be, it would be a hundred times easier to learn Rust if the borrow checker was just trivial. Like there would still be a bunch of different things that, you know, depending on what your background is from, you may not have dealt with before or like all sorts of other things. So like, even that would not necessarily achieve, you know, the goal of a order of magnitude improvement in ability to learn Rust. Totally. And I think that actually the thing that impeded my own ability to learn Rust is I was trying to port something from C to Rust. Something I rather, I wasn't porting it per se. I had implemented it in C and I wanted to re-implement it in Rust. And I had, I mean, I was truly latching on to my accidental complexity and trying to implement it the same way I had done it in C, namely with a doubly linked list. And Rust does not want you to do that. Rust is like, you need to leave that accidental, that is accidental complexity, my friend. And you must leave it in the past now. That is, we need to get to the essential complexity of your problem. We need to get, you almost want to compile a message that tries to coax someone out of their accidental complexity but I was really latched on to this implementation detail that in hindsight was accidental complexity. complexity, even though I don't think I would have thought it at the time, you know, and I thought that was like, so eye opening about rust, it's like, Oh, wait a minute, that actually is accidental complexity. And what is the essential complexity? What am I trying to do? And what would I do? Were I not concerned about performance? And I put that in quotes, because that rust program outperformed the C program, which is totally surprising. Um, but I just think it's really interesting to kind of like take the like, look back on rust as taking on in particular this accidental complexity. But on the essential complexity, I mean, it's not like you're on your own. But like, you know, kind of hard, you know, it's like, I don't know that rust really aspires even to take on that essential complexity. I think it really aspires to get all of the accidental complexity out of the way. Is that is that a misread? I am unsure. I definitely think that some people would think that I don't know, to what degree it's being accomplished, if that is an explicit goal. But also, I have been sort of out of the loop for long enough that I'm not entirely sure what current leadership's thinking is on this topic. Exactly. I do think it's really interesting that we sort of, I mean, obviously, we latch on to rust, because it's the thing that we both love. And, you know, this is the oxide podcast after all. But like, the number one thing that Fred Brooks is like, so I was gonna, I was gonna ask you what you thought the like, most jarring example and the most current day example things would be in this paper. And I think one of them to like half before before you get into your picks, just to transition to talk about rust stuff, like the number one thing under the hopes for silver is ADA and other high lingual advances advances. And I think this one kind of walks the line because it's very old, because it's sort of like, we'll see if this ADA thing shapes out shakes out or not, which, you know, we know now the degree to which ADA has shaken out or not. But like, you could today write the same section and turn the examples into rust. And I'm pretty sure I've like read it as a hacker news comment before. And so it is like very interesting to me that, you know, one of my favorite, maybe not literal silver bullets, but let's just say, you know, 60% silver, seriously wounds werewolves instead of, you know, totally getting rid of them is one of the things that Brooks is like, nah, totally worthless. In terms of ADA itself, or he says ADA and other high level languages, like his argument, again, is this 80 20 argument where like, he basically said, like, going from assembly language to structured programming was the 80% increase in like, programming languages as a way to tackle these problems. I forget, but he does, he does actually, he ends up being in terms of talking about object oriented programming, he thinks that object oriented programming does do this, ultimately, that it's not a silver bullet, but it is a hope for silver in that it actually, so I think he's, he's kind of got both sides here in terms of like, I think the ADA thing, okay, so hot take, I think he may be taught, even though he says ADA and other high level languages, I think that may be a reaction to ADA itself. And I think that ADA hurt itself by being too preachy. I think 80 ADA. And I think, you know, I think we all have kind of a natural resistance to the rust evangelism strike force and people talking about, you know, rewriting everything in rust and kind of the, the damage that it can do when something is kind of being sold as a magic bullet. And ADA was sold that way. And definitely object oriented programming was sold that way. I mean, it was absolutely sold that way in the 90s, especially. And then Java was absolutely, absolutely sold that way. Java was the magic bullet. And, you know, Java was really important in a lot of ways, I mean, obviously, but the, I think that it was a mistake to think of it as a magic bullet because it didn't actually, it didn't actually solve all problems. So yeah, I thought the, so I was wondering to what degree it's ADA itself. He clearly, you know, he did a papers we love, I don't know if you caught any of that. So one thing that is funny, I guess, did you watch any of that by any chance? I did not have the chance to watch any of that. So, okay. So I'm just going to tell you, so you can make your own informed choice. You will be eating the fruit from the tree of knowledge and good and evil by watching that. Have you ever heard Fred book speak before? I don't believe so. Oh, I don't, I would say that if you, if you're not sure you definitely haven't, the guy has got a crazy syrupy Southern accent, like super therapy, which is, and he has, and there's no love lost between him and ADA. That thing is like recording. He's like 88. And he is like still going back for more with ADA. He's still just like, yeah. So he definitely is like ADA definitely rubbed him the wrong way. He also, there's also a really good in interesting point about that. He's like, you know, in the responses to my essay, I know that there were many people that said, I have a silver bullet over here, but nobody said, this is the silver bullet I'm using over there. I know I sound like I'm an antebellum. That's wonderful. Honestly, that makes the whole podcast already. As far as I've been certain. Oh, it is. But I, but I thought it was actually really interesting that he was making that like, Hey, that's funny. Nobody is talking about the silver bullet of someone else's that they're using. Oh, it's always your silver bullet. Huh? That's it's, it's always the snake oil, snake oil salesman and never the snake oil affiliate marketing. Totally. Totally. It's never the snake oil testimonial. Is it? It's always the, uh, it is, it's always to say, well, and I think that's like, that is like part of the issue is that like there, we have so much abstraction that we are, and we get mired by it and frustrated by it, that somehow all of it does leave us amenable to oversimplified answers. And sometimes those are oversimplified answers that we think that we have found. I have found that this, this thing that has been important for me is going to be revolutionary for the universe. It's like, well, it's actually important for you on this problem, but maybe it's not as revolutionary. Uh, I don't, there's something about software that does leave us, leave, leave us kind of amenable to this kind of stuff. You wake up one day and suddenly you've got a fuzzbiz enterprise edition. I don't know if you've seen this before or not. I pasted it to the chat, but it's like, how could we write fizzbuzz in the most like enterprise Java way possible? Um, like there's like seven config files and like, yada, yada, yada. It's really, it's really something. That is, that is pretty funny. Uh, hold on. I'm trying to get you up here and, uh, cause I want to give other people's take on this as well. Um, the, um, so Steve, you were asking about kind of like the, in the specific technologies, cause it is amazing that some of this stuff does feel super current. Um, so, okay. One thing he talks about as like the, I think this paper is misperceived to be pessimistic when he's like, I'm not saying that the improvement's not possible. I'm saying it's not going to be a single thing that is, that, that yields that improvement. Um, and in particular, cause to me, like what this is really before and the thing that, what this predates that totally changed software is the combination of open source, the internet and distributed version control. I argue that those three things together did fundamentally deliver a big multiplier. Is it a hundred X? Is it a thousand X? Is it 10 X? I don't know, but it's big. It ain't small. Um, Keep in mind that at the time that he wrote the essay, he also was no longer writing software for IBM. He'd already transitioned away from being a professional software engineer to being a professional educator. So the things that he's talking about is also from, uh, sometime prior and he put a, like a decade long, um, proviso on, on the prediction. So he was explicitly saying, yeah, within the next 10 years, we're not going to get a 10 X improvement. Um, but I would know that I think that the, the real interesting insight is the, like, um, just the ratio, right. Is like, is, is what we're doing right now, nine 10ths accidental. If it's, you know, less than nine 10ths accidental complexity, then there is no way that we can get a 10 X improvement. There's not, you know, 90% of work that we can just throw away, which, um, you know, it's I think the thing that I was kind of curious about reading it was like, um, thinking about it from the lens of a single programmer versus a team of programmers or a company and where the complexities lie in the, in the communication between, uh, individuals. Um, cause the, you know, nine 10ths, um, likely, uh, bears out over the course of an individual, but over a team, um, there's some real interesting stuff at play. Totally. And that's a very good point. And I think things that allow people to collaborate more easily can get to these big multipliers. I mean, that is what like open source internet distributed version control together. They allow for a much better collaboration and Ian, to your point, you know, we talked about it when we had, uh, David Crespo on and Justin about how the open API and using progenitor allowed them to much more easily, they didn't have to guess about what the actual specification was because the specification is derived from the implementation. So yeah, but I think that's a, that's a good point in terms of like the, all the complexities that come from operating on a team, which, and so Ian, do you think that, uh, of these kind of, uh, purported magic bullets from the past, um, how many of the ones that have been, how many of them have kind of addressed that element of it, that kind of team complexity element? Oh, um, I think that there's been a few like, um, I would know like in the paper, uh, books talks about buy versus build and the fact that over time you'll, um, the best thing to do is likely to buy a module off the shelf, um, and use it rather than write it yourself because of just how expensive it is to produce software. And that, uh, you know, he missed at the time, um, in the, yeah, the, the open source and Yeah, exactly. And, you know, he's also still talking about the next decade, so he was pretty, you know, on the, on the money there, but like in the years since then, yeah, I mean, open source has definitely made it significantly easier to, uh, buy at, um, you know, zero, uh, monetary costs on day one, uh, an open source module off the shelf that can do some of what, uh, you want and that, and the assembly of those modules is kind of a big part of how we write software today, um, by and large, you know. So you kind of got me thinking here about like this essential accidental complexity, if you will, of the team dynamic, which is this really important complexity in the construction of software. And as I'm just like thinking about like, what are these big, big, big step functions? They are things that either deliberately or essentially or accidentally do address that complexity. In other words, like the, the presence of open source internet distributed version control actually allows us to meaningfully collaborate as a species in our fight for the light cone against the AGI. Um, but the, it allows us to actually meaningfully collaborate in that I think that the, you know, the obviously distributed version control, just allowing for much easier collaboration. I just, I almost wondered, it's like, if you're going to have a, maybe off my rocker here, but if like you're going to have a big multiple in productivity, it's gotta have a kind of a, a collaborative angle to it. You know what I mean? Oh yeah. It's got to be a way for, um, multiple engineers to, to be more productive working together. Um, or be able to align the challenges in, um, relying on another team to do work on your behalf and, you know, erecting, um, API boundaries between those teams and the, the efforts of those teams such that, um, you don't have to know as much about what's going on behind the scenes. Um, and you know, there's things today that, uh, incredibly effective at that, like S3 is a amazing API for, um, determining for, for like abstracting over storage. You don't need to know that your, um, your, uh, files are now stored on, you know, a thousand or 10,000 or a hundred thousand or a million hard drives. Um, that's all kind of hidden behind the API and all that effort is hidden behind the API. And I feel like, you know, that's a extremely effective example of like how this can work, um, to be able to allow a small group of programmers to, um, deliver software, uh, capability to a significantly larger audience. And, um, I suspect that stuff like that is where, where there's some real interesting gains, particularly in this, uh, like that's in the large. And I kind of wonder how much of that can be scaled down to like within an individual company when you have, um, you know, teams relying on platform teams to deliver capabilities and how you can get those, um, you know, delivered more effectively. Yeah. And that's a really interesting example because with S3, S3 took a kind of a radical approach that anyone versed in storage would have counseled probably against, which is like, yeah, we're not going to actually allow for partial updates. We're not going to allow for partial writes, which would just seem like, what? Like, no, any storage system has to allow for partial, partial updates. They're like, eh, we don't think so. And that was a big gamble and a big win. And it's interesting to think about S3 as one of those technologies. Steve, one of the ones that I've got to ask you about, because I think like one of the ones that I've seen in my lifetime, I think Rails was a, was a really big deal and was a really big step function. And I mean, it was a big enough step function. I basically quit my job. Like I was like, I was like, I, I mean, I was currently at, I was currently, it's pretty funny. At the time I was at an internship writing PHP and it was fine, but I saw Rails and saw Rails happening. And when I brought that stuff to like work and was like, Hey, we should like consider doing these things. And they were like, no. And I was like, okay, I'm going to do something else instead. And I went and I started a startup so I could write Rails. And I was like, that was like, and it was extremely fast and like so much easier to get going. You know, I got a lot farther than I would have at the time, especially 2009. So, you know, a lot of the current technologies didn't really even exist at that point. And, and Rails was super fantastic. I was going to ask what year it was because the DHH video is 2005. Is that right? I think it's 2005 and I actually wanted to go back. I didn't get to just rewatch that video before today because I, it is difficult to find on the internet, but which is crazy. That's like, that's a part of our history, but I, yeah, I, Oh no, is it not? Is it, Oh, is it, is it a milkshake duck? Is it, it's not a milkshake duck thing. I will just put it this way. I've heard a rumor that it's for personal reasons for David to take it down. And he doesn't really like people watching it these days. I won't get into the details because they were rumors said to me and I don't want to say anything. But my understanding is it was deliberately made hard to find these days, but it is like basically, you know, the magic of it in the moment, like you don't even necessarily need, it's, it's, it's almost boring to watch because rails dominated the space so heavily and one so thoroughly, like conceptually, obviously I don't really think rails is still dominant as a technology, but like the stuff that it brags about are things that we take for granted today when building web applications. And so when he shows like how awesome it is that you can do this, it, it like doesn't have the same emotional resonance just cause like, yeah, of course, of course you can do that. Um, so I, that's interesting because the thing I was trying to remember, first of all, I remember where I was when I watched that video, really big deal when that thing came out, it was one of the YouTube was still really young. I mean, it was only like, it may have been the first year of YouTube even. I mean, it was super early YouTube and it was the first time that I had a demonstration of a technology over YouTube and it was arresting. I was like, oh my God, it was like, it was 14 minutes long or something like that. Yeah. 15 minutes long and pasted it into the chat. Oh, nice. Oh yeah, yeah. Okay. That's good. So it's DHH and, and his agents are going to have to work a little harder to hide it from hide it from oxide. So yes, it's 15 minutes. And, um, the, it is the thing that I was trying to remember. And actually maybe if you've seen this recently, maybe you can recall, but I don't know to what degree the tenor of the video was, I have revolutionized all programming versus I have built a block engine in 15 minutes. I just remember being like, like here is a very useful approach for this kind of problem that by the way, happens to be a problem that a lot of people have, but I don't remember being sold to me as this is going to revolutionize everyone's productivity. It was more just like, Hey, here's how I did this. And it was really effective. And an important thing to understand about David is that he does not care if other people use his thing. Like he wants to tell you, I haven't rewatched it recently, but like, I would not expect him to be saying like, you should also use this thing because rails is first and foremost, his project for him to do with as he likes. And it was written for him and for his taste. Everybody else is incidental. So I would expect it to be like, I have built this thing that makes building websites incredibly fast and I'm going to be using it. But I don't think I would not expect it to be a salesman, as you would expect from someone making a use my framework, please today, because I don't really think he cared then or cares now if people use rails. I got to say that is pretty common for these things that are these big step functions. That is kind of their genesis, right? I mean, that's, I mean, that's great. And Rust, it's not like use Rust. It's kind of like, Hey, this is the, I mean, the gradients presentation from Mozilla was 2000. When is it? 2012. That early. 10. 2010. It's kind of like, here's some interesting ideas I'm experimenting with. I mean, it's just like the way it's, I feel like Unix was designed to test the file system. I mean, I think, you know, not to put myself in this kind of hallowed hall, but I guess that's exactly what we're about to do. I mean, for DTRACE, we ultimately designed DTRACE for us. Like, it was ultimately like, this is the thing that we are using. Like, I actually know this is effective because I'm using it to do my job. And if I would love other people to use it, but I also kind of, like, if they don't, that's fine. I mean, I'm happy. And I mean, this has got me, as you can imagine, reflecting on DTRACE as well, in terms of, like, the, because I think what DTRACE does for debugging, which is a very narrow problem, or a narrow subdomain, is DTRACE eliminates all of the, most of the accidental complexity in debugging, and leaves you with pure, distilled, essential complexity that does not necessarily make the problem easy. And so one of the things we heard early on in DTRACE is, like, oh, I'll put DTRACE, I'll, like, I'll use DTRACE on this problem. It's like, well, you can use DTRACE to debug the problem, but you are ultimately going to need to have, like, you are gonna actually have to understand the problem. Like, DTRACE can actually help you understand it. All it can do is make it easy for you to phrase questions of the system. It doesn't actually tell you what questions to ask, which is honestly the much harder bit. And I kind of feel, which is part of the reason, like, why I would never talk about, like, a 100x gain, because it's like, it is an elimination of a bunch of tedium for debugging, but your ability to debug the problem is gonna blow it out of your ability to debug the problem, unfortunately. What question to ask is actually why Brooks in no server bullet says AI is not going to help programmers. That section felt chillingly current, didn't it? Yeah. The hard thing about building software is deciding what to say and not saying it, right? This was a year before the next AI winter as well. So it was, I think the tide was like turning against the current state of the art of AI at the time. The first snowflakes were falling from the late 80s AI winter. So we got Tom and Alex here, so I wanna get them in. Alex, actually, if you don't mind, we'll start with you, because you would actually, when we were talking about no silver bullet in our internal chat last week, you had mentioned that you'd read it, and it sounds like more recently than Steve and me, and it definitely had an impact as the way you were thinking about problems. Could you elaborate a little bit on that? All right, now, Steve, now we use you to debug. Do we know that Alex is- The current state is Alex is not muted, but is not getting audio from their thing into Discord, because the little green ring does not appear at all. I mean, now you're remuted again, so you wouldn't, but I would be debugging whatever your connection is to Discord itself, Alex. All right, we'll go to Tom, then Alex will come back. Yeah, exactly, Tom. Yeah, I posted in the chat, but when I was first looking for this paper, which I'm ashamed to say I never heard of before, I found this weird version hosted at UCSF with a different productivity equation, and it's about groups, where it goes down as the square of the number of people, but it has all these, I posted this equation. It's got these very weird constants in it, no explanation of where it came from. And when was it changed? Yeah, and Tom, so when was that, and did this kind of resonate with your experience up to that point? Well, yeah, clearly productivity goes down with large numbers of people, but yeah, I don't know when or where this paper came from, but it's a version of Brooks's paper. That's interesting. I also wanted to say, I got to meet Fred Brooks back in about 1980. Oh, wow. He was a character even then. In his office, he had a big row of timers, mechanical timers, and whenever he switched what he was working on, he'd hit the appropriate timer, so he could try to keep track of his own productivity. Wow, he was like a Taylorist for himself. Yeah, it was pretty strange, but also the incredibly sugary Southern accent. Okay, do you feel that I was overplaying that? I mean, do you feel- No, no. It is possible- I was a young whippersnapper at the time, so I was just in awe that I got to meet the guy at all. It's possible the discrepancy is because the version you found is supposedly a direct reprint of the IEEE computer, volume 20, number four, April 1987, whereas the version that we linked is reproduced from the Mythical Mammoth anniversary edition with four new chapters, 1995, and so I wonder if this is a modification that Fred made in between versions or something, or is like, yeah, different versions of a preprint, because it's like, it itself is reprinted from some conference in 1986 or whatever, so. The only thing I want to mention, which he dances around some, is this whole specification is the hard part, and I've always maintained that if you could formally specify something, you can just compile the specification, right? Right. It seems like people don't say that directly enough, but that's kind of the whole point of software. Yeah, is to kind of be in that gray area. When he talks about- I do think it's interesting in terms of you talking about conformity as a constraint, and how the conformity is a- I can't even remember if he refers to it as axonal complexity or central complexity, but it's complexity at any rate, that a magic bullet, silver bullets, are going to have a hard time addressing the conformity requirement, and I feel like those have only grown over time, those conformity requirements have gotten a lot more complicated over time. It's a day-to-day engineering thing, you know, the principle of least surprise is you should conform with what other people are doing, or else it just slows them down. Yeah, and actually, Tom, as long as you're here, so two other kind of points that I'd like to make about this, kind of put it in its 1986 context that people may be, I think, confused by. One is he talks about rapid prototyping as if it's a totally new idea. Because it is a totally new idea in 1986, there was a- things were very, very waterfally, and the idea that you would- I think he talks about this in, I think, is it in the update for No Silver Bullet? Where he talks about how the big insight that he had is that software is grown, not built. Steve, was that in the original essay, or is that in the update? That may be in the, yeah. Yeah, if you didn't read that- Alex mentioned in the chat, his audio is not working, but he wanted to say that, just so we get it in the actual recording podcast, that he thinks the essential thing of Brooks is the quote that I just said, the hard thing about building software is deciding what to say, not saying it. I think that that statement generalizes to everything about the construction of software. That's why communication systems, collaboration tools, et cetera, can help so much, because they help people decide what they need to say. That's a very good point. Hopefully, Linux audio will work for you in the future, Alex, but thanks for leaving this comment. Linux audio, essential complexity or accidental complexity? We have a half an hour social meeting at Oxide, and almost every morning, somebody joins and can't talk for some reason, and then when they finally get to talk, they're like, sorry, it was Linux audio, my bad. So, it's a common issue. Says the Windows user, like, look- I wasn't saying it. I was just acting smug. I wasn't going to go so far as to be like, my audio always works. I wasn't actually saying it. It was nearly dripping from every word. I will say that once I switched giving presentations, like, oh my God, this projector just works now. I went from like, I literally handed someone who runs a theater in Denver, like, if some weird Linux person comes in, hand them this piece of paper, and I wrote the, like, command line to set the freaking, like, X settings to be the same as their weird refresh rate on their projector or whatever, and to go from that to just, like, I plug the computer in and it projects things has been very nice. So, there are obviously lots of other limitations to Windows, but multimedia working by default is not one of the problems. It may be a 100Xer in terms of your projector productivity. Moving from Pulse Audio to Windows is a default sound, yeah. Yeah, it's a big bump. So, and Tom, when this came out, oh, and the other thing I wanted to say, because I think that this came up in either in the revisiting of it. So, Brooks revisited the paper 10 years later. It's really pretty interesting. But he, and maybe I think it's actually, sorry, it is in this paper, because he talks about, like, kind of the great hopes for the future. And one that I think people have latched on to is this idea of great designers is finding folks who can really develop great software. And I think you've really got to take that one in its 1986 context. And Tom, we'd love to get your perspective on this and feel free to disagree. But software really was very subservient to hardware for a very long time. And it was not its own domain. Most universities did not have a computer science program until the very late 70s or 80s or 90s in some cases. And so, it's not thought of as its own domain. And so, the idea that you would actually specialize in software does, it is kind of ridiculous in 1986. And that's part of the reason why he's expressing it like it's a novel idea to develop, to actually, like, focus on this as its own craft. There was a lot of professional software recognition in the mid-70s. But, Tom, what is your degree? Your degree is not computer science, surely? EE and computer science, they were the same department. It's computer science, all right. All right, I stand corrected. Which I think they added, I'm trying to figure out when they added computer science to the EE name. But it was early 70s. Yeah, I mean, tell us about your entire... I graduated in 78 and went to work for Amdahl. And, you know, the mythical man month was the first required reading there. Oh, that's interesting. So, you would read it when you arrived at Amdahl? Yeah, it was the Bible. Huh, and did Amdahl... And Brooks cites this incremental programming reference from 1971. So that's kind of how far back some of that goes. Right, and this is in the paper, incremental development. Row, not build software. Which I think actually is... That is important. Yeah, that's a really important insight. Well, I also love the fact... I mean, Steve even talks about Demo Day when he says the morale effects are startling. Enthusiasm jumps when there's a running system, even a simple one. And I actually think that's what DHH is tacking into too. Oh, yeah, absolutely. I mean, it's a real running system. And now I can like, yeah, you can make it better now. And you can understand what it's doing. One of the biggest things Rails did was to marginalize databases, basically. And part of the reason for that was just that to get a web app up and running, you had to deal with database crap before you could even get your hello world on a page. And just being able to be like, you don't even need to start a database or write any schemas or do any of that. You just kind of write a couple of commands and now all of a sudden your thing is working was like, shocking how fast you could get to something useful. And the morale boost, the concomitant morale boost. What are some of the other things he talks about in terms of specific breakthroughs or putative silver bullets? He talks about AI, he talks about expert systems. How much have you been exposed to expert systems? Is that something you'd... Not directly, but I'm aware of the term. And I thought it was really interesting that he chose to partition AI into AI and expert systems because I found the AI thing to be pretty on point for what we talk about with AI and then the expert system things to be like, oh yeah, that's right. That's the thing that people thought would be good or something. But I haven't had any experience. I don't think I've ever used something that was sold as an expert system. I've just, I heard about it. Very 80s and 90s, as Matt is saying in the chat. Yeah, and expert system. And I think that actually, I think they're kind of due for a resurgence as, I mean, in terms of like dealing with this kind of AI hallucination problem, you actually are going to need some expert training here, whether it's an expert system or not. I bet there's some interesting lessons to be learned from expert systems. But it was very much the fashion of the day, was expert systems and distinct from AI, for sure. What did you think about, well, yeah, graphical programming and program verification? I'm eager to get your, and automatic programming. I'm curious on your take on all three of these. Yeah, I mean, I think it's really interesting. I think the last one is probably the one that I thought was like very accurate for today. Like I was just thinking co-pilot, co-pilot, co-pilot with the automatic shenanigans. And like also the AI stuff. But I don't specifically remember the graphics part that well, to be honest with you. Oh, graphical programming, not graphics. Graphical programming. Yes. Not graphics programming. Yeah, like it's one of those things. So like the only graphical programming thing I've ever seen to succeed is Scratch and maybe LabVIEW, if you consider that to be a success, graphical and programming. I think I do. I think I do. But like outside of that, I definitely feel like that definitely seemed to be sold as a thing that could make, like it was kind of a precursor to no code is sort of feel like the vibe was about how graphical programming was going to like fix everything. But it's just not there for like getting actual work done, right? So I felt old to me, but like a thing that was old enough that I still experienced that discussion. But I don't think anybody, we'll see what gets launched tomorrow. But I don't think anybody's selling a graphical programming thing as being the next productivity leap. So this felt outdated, but like in a more familiar way than some of the old. OK, but you do, but no. I was born in 86, too, also. It's just a small, you know, from the perspective. One of the things Brooks talks about is the flowchart stuff, which is like really primitive attempt at graphical programming, I think. But invented by Von Neumann himself and that gang. But it was taught all through the 60s and into the early 70s. You know, flowcharting was a terrible thing. And Brooks comes right out and nails it by saying software does not conform to 2D or 3D abstractions. Amen. I would say that you would struggle to find a software team today that didn't have somewhere a architecture diagram that was boxes and lines in an image of varying degrees of accuracy or potentially outdated. But like people do use images to confer, to communicate with each other about the shapes of things. And that was probably, that was not necessarily true of 86. Like he's talking about the fact that you just didn't have the pixel real estate to be able to do that kind of thing. But like people were trying hard to do it in 86 because the systems were smaller. I think people were actually trying hard to represent. I actually do think that people were trying to represent systems this way. Do you, Tom, do you remember Borland object vision back in the day? This is like, there are a couple of these things, these graphical programming environments where we are going to like program by visualizing. And I agree with you about the diagram that people have, but those diagrams take different slices. And I don't think you can take any of those diagrams and use that to generate the system. I think that the flow charting was really taught as a kind of a necessary step for almost all programs. And really diagrams are a great, great way to explain things, but they're not directly related to the code. It's certainly relative to like a schematic where like when you have a schematic, that actually like that is a, there's a very important spatial representation. And actually this future of coding podcast, Steve, they get, they are debating whether, I shouldn't say debating. One of the hosts, I believe it was Ivan was like, no, no, I think I'm going to die on this hill that software has like a spatial representation software has like spatial coordinates. I'm only exaggerating slightly. And the co-host is basically like, well, you're going to die on this hill because like I'm going to show you that you need to prepare to meet your maker. Again, I'm exaggerating slightly, but I actually do think it's important that we don't have good, this idea of using a spatial representation is a very limited power. And Steve, I'm going to give you a hot, hot, hot take that's just going to get me blown up on the internet. I actually, I really questioned the utility of Scratch. Having watched all of my kids do it, they are, Scratch has got a super low ceiling, super low ceiling. And then they don't know where to go. Like they bonk into the ceiling and they're like, I don't know how to like, I can't connect this like thing I've made with this cat bouncing around with like the other software that I use. And actually they go to Minecraft and they build things in Minecraft, where there is actually like, there is, it's like totally like frameworks versus libraries. You know what I mean? Like in Scratch, you're super frameworky and then you're going super library in Minecraft where you can like, and that has been more engaging for my own kids. And I'm not that like Scratch is a net negative, but like, I think it's pedagogical utility is pretty limited. To maybe just like add to the fire, note that I didn't say like, was the best software in its class. I said, this is the most successful example of the software being written. So I agree with you. I do think there's a lot of things that Scratch gets really right. But the, I mean, kind of inherits the sins of Smalltalk, right? Like can't get out of that little box because you were too, you know, in the system as opposed to outside of the system. Like, yeah, like all that stuff and going to Minecraft and Redstone makes so much sense for all of that. So yeah, I definitely like agree that maybe there's a little bit of damning of faint praise going on there on my end. But I also feel that like this gets to like the fundamental problem that I feel like Brooks also hits on that if I'm going to make you a hundred X more powerful as a program. 100X more productive, I am almost certainly going to do it by really raising the level of abstraction. And if I raise the level of abstraction, I'm also going to give up some of that generality. You're not going to be able to do it in any language. You're not going to be able to do it with any database. I'm going to make a bunch of decisions for you. And those things can be great, but then you are losing more and more and more of the power of software. So you can do things quickly, but they are the things that I have preconceived of. And I think a lot of these things fall into this trap of like, yeah, okay, it does make me, you know, an order of magnitude more productive for the problem that you are envisioning me for. But the problem that you're envisioning me for is actually not the problem that I have in front of me. Which is certainly the case with something like Scratch. And it's not going to surprise me at all if that's the case tomorrow as well. I just think it's like, have you seen Dark, Steve? Oh yeah, I am very familiar with Dark. Do you consider Dark to be graphical programming? It kind of is, isn't it? Sort of, yeah. I mean, you're not wrong. I have to think about that for a second. It definitely suffers from the problems that we've been discussing. I don't know necessarily from like the act of programming it, if I think about that way exactly. I'm mostly familiar with the like internal stuff rather than the actual like interface of Dark. Because they were in Rust and then they rewrote into F sharp or whatever. Right. I had like looked at the Rust version relatively in depth, but have not done as much lately. I want to mention that people in the chat have been coming up with other good visual software systems that, or I should say good in their domain, but maybe didn't break out and don't think a ton about. Like Lineshawn says Simulink, which is like a pretty good example, although it's very narrow. Emily is referencing HyperCard, which is near and dear to my heart. Literally, like some of the first quote unquote conference talks I ever gave were as a kid about HyperCard programs to some computer science professors. Pittsburgh, Pennsylvania had a really good science program, yada, yada. But I feel like there's another one somebody mentioned that was very good too. So HyperCard and Simulink are both really good examples because they are content to confine the solution space a little bit of like, all right, I'm going to solve like a slightly more domain specific problem. But then we can actually bring some of these tools to bear, which I think is kind of interesting. In terms of like, tone down the ambition a little bit and make it a little more, and sharpen it a bit. And then you got something that can actually, because I think, I mean, like HyperCard was used to build all sorts of things. But I think, okay, four of these things, surely they are used beyond the original intent of the designers. I mean, I got to think that HyperCard was used in places that its designers didn't intend. Well, I mean, HyperCard was like born out of an LSD trip. So I don't think that the designers intended for there to be that much constriction on what you could do with it. But yes, yeah, like Mist being the most famous example, as Emily brings up. But like, they thought it was going to like replace the web. Like it was, it was viewed by the creators as being very, very broad. Very expansive. Okay, nevermind. Opposite of that. Well, Q, this is where Tom would recommend what the Dormouse said, just to learn that all of computing owes its history to people who were dropping ass in the 70s. Yeah. Okay, so another one they mentioned that is also near and dear to our heart is program verification. And again, this was done as kind of a, on the one hand, okay, Brooks is, he says, I do not believe we're going to find the magic here. So like, this is not a single magical concept. But he does say it's like, there's like hope for this. Like this can actually improve programs. And I think, you know, with the TLA+, I mean, there's a lot of things that we can do that actually can, we can be much more rigorous about the way we verify programs. Here's my super hot take on this. This is just types. Like we, the like revolution in program verification is not so much about what we think. It's almost kind of like the AI thing where like, AI is perpetually just like what we can't do with computers, right? Like the definition keeps moving. A lot of the stuff that we do today would have been considered AI in like the 60s. It's the same thing with program verification. Like the rise of, like, I think the history of type systems has been a little up and down, I think. But I think in the current historical moment, we are on a spot where we started to find the sweet spot of type systems that are expressive enough to not get in our way as much, but also give us a lot of the benefits of program verifications. This is like, yeah. Dependent types are another example that are a little further on this step that Blaine has mentioned in the chat that I'm still not 100% sure is ever going to be real, but we'll see. But like that, the exact same problems that he talks about in this section are true of types. That's funny. Acknowledging the downsides too, right? Like, I don't think we'll find the magic. Verification is not about, program verification does not mean error-proof programs. There's no magic here. Mathematical proofs can also be faulty. It can reduce the testing load, but it can't eliminate it. Like, those are all statements that are absolutely true of types as well. And, yeah. Totally. What I love that idea of, like, you take someone from 1986 and take them to a time machine in the current day. And they're like, oh, you solved the formal verification problem. I just, like, I looked at this message that the compiler just generated and clearly you've solved it. It's like, no, no, no, that's just the type system. It's actually giving you a, that's a really interesting idea. So, yeah, so those things. And then where did you net out on AI? I mean, the AI, it's just amazing how current that discussion felt. Yeah, I think that was probably one of my areas that felt most correct. And I tweeted about it whenever I read it a couple hours ago. And I got one or two good responses from people who had pointed out, like, that they kind of, like, think, yeah, it is true that it doesn't tell me what to think, but if I can quickly generate 10 different options and choose between them, that still could help me clarify my thinking, even if it's not directly telling me what to do. And I thought that was a particular, I forget who replied to me with that. So I'm sorry that I've forgotten in the moment. Maybe I'll find the link and put it in the show notes. But I thought that was an interesting comment on, like, a pushback on this that I think is an interesting idea from the current, like, AI stuff that we use. But definitely, I have not really used, I've used chat GPT a little bit for funsies, but, like, I have not used any of the, like, programming assistant tools yet, because I tend to be a little bit of a laggard when it comes to adopting this kind of stuff. So I don't have a lot of practical experience. But yeah, I don't know. I definitely, what he says here resonates with me in general. Totally. And then we, and we had, I think, a great discussion on the promise of large language models for software engineering and what it could mean. And there's definitely stuff it could mean, but it's not as simple. It's just like, it is not a silver bullet. I think we can say that with some confidence. And so what happened, we've hit on some of them, but are there any of the things that have been big step functions in your career that we've missed? So we talked, I mean, I think Rails was a big step function, right? I don't think I'm exaggerating that. I think it was, I think Rails was a big deal. I think, yeah. Matt says in the chat, GC. That actually is a very, yeah, and I definitely agree with that. Sorry, is that what you were going to say? No, but it's close enough, which is, like, so I learned GW Basic and then, like, C and then C++ and Java was sort of my initial slate of languages I wrote stuff in. And then someone showed me Perl and specifically closures, and I went, like, holy crap. And I started churning out Perl code, like, far faster and got way more done than I was getting done in, like, late 90s C++ or, you know, those early, early Javas. And so that was, like, a personal step function. I don't know that that fits into, like, the history of computing and was true for everyone, but I kind of had this situation where I started with static typing and then went hardcore into dynamic typing for a while, and now I'm back on basically purely static typing. But, like, because I think that the dynamic typing was giving me a step function over the static typing at the time, and then now I think that the static typing that exists today is giving me a step function over dynamic typing had been. But that's just, like, a personal thing more than something I'm willing to generalize to the industry at large. I mean, for whatever it's worth, that's my path too, right? So that's, like, a hardcore C, and then, like, realizing, like, oh, wow, JavaScript could be used for a bunch of these things, not just on the browser, and then realizing, like, maybe that was actually a few too many things. Maybe we can—this Rust thing is pretty interesting. And to kind of, like, bring that into the GC thing too, like, Patrick Walton has this really interesting thing. I hope I don't misrepresent what he said on this before, but it's, like, Java did— like, as much as we did say Java didn't save the world, like, earlier in this podcast, for example, like, it did seriously eat into the market share of, like, application software for C and C++, right? Like, that's not a big problem, no. But, like, those used to be the default choice. You're building a desktop app, you write it in C or C++, and then in that time period, it moved to Java, and GC was a very large part of that being true, right? Like, for software that didn't need every single last bit of performance, it allowed a lot of people to get a lot of work done. So... You can say it's good or bad. Well, no, but my first impression when writing Java was this is the end of C++, because this eliminates— I mean, I didn't think of it this way at the time, because I had not read Brooks's paper moments before, but looking at it in hindsight, Java eliminated so much of the accidental complexity of C++ and distilled you to the essential complexity. Of course, it generated accidental complexity of its own, but I'm like, this is going to be the end of C— why would you write in C++? And, of course, I underestimated the C++ diehards, that they would definitely have their own resurgence, but yeah, I think Java was a very big deal in that regard. And I mean, Java made the mistake of overshooting a bit, but it was a very big deal. And then, I mean, I think we didn't talk about cloud computing, but cloud computing is a huge deal for accidental complexity around infrastructure, right? I think, hard to argue— orchestration feels like we haven't yet had— I mean, Kubernetes is super complicated, and I'm not sure that Kubernetes is in the book, as Paul Erdos used to say, of proofs that he felt to be sufficiently elegant that they'd be recorded in the book of the Supreme Fascist, which is his name, for God. I don't feel like the Kubernetes is in the book. I'm not sure, though. Yeah, we'll see. I kind of feel like— You know how Apple never releases something, but they— Sorry, never releases. They're never the first— The iPhone was not the first cell phone, or even smartphone, but it just became product-defining. I have not used Kubernetes in anger enough in production. I kind of got into that whole working on a programming language thing around the time that that became sort of the cool kid thing to do for web apps. But I feel like there's going to be a sequel or a second system that comes out that makes it better. But I don't know what that is, and I'm not willing to bet that's true for everything. Is it coming from Apple specifically? No, but just that sort of an outside— Not like them turning it— It's not like Kubernetes 3 or whatever is going to be the best. It's an outsider seeing the space and then reworking all of that stuff to be on some sort of simpler or better primitives. We will see. Yeah, and I think that these lurches that happen, I mean, they do have some things that they have in common. One is that when they— They're not being pre-announced as 10x or 100x improvements. They are kind of pulling together— I'm just thinking about the things that we've been talking about, Java, Rails, Rust, I mean, DDoS for that matter, where you're pulling together a bunch of existing ideas and kind of packaging them up in a way that is expressing their usefulness and eliminating a bunch of accidental complexity, but done in a way that the creators really did it for themselves. Java was done for Gosling, more or less for Oak in the set-top project. Rails could have been done for DHH. Again, we talked about Unix, and certainly— So I feel like these things have something in common. There are some properties that these big step functions have in common as individual technologies. And then there are these other step functions like internet, open source, distributed version control, which feel like they're even more broad-based and are even more radical over time, but just take a really— It's not like there's some grand reveal for it. And now, ladies and gentlemen, the internet. It was more like, this is something that was available and then became more ubiquitous and a bunch of things unlocked that. I don't know. In terms of these— Indisputably, a huge step function, but took a long, long time to unfold. Sharing software was always a big part of the buy versus build, if you could get it for free. But the internet made sharing, the mechanics of sharing, so much easier. Totally. Yeah. And then distributed version control, even easier. You could actually like— You're not downloading tarballs from SourceForge. What did we used to do, Tom? What did we do before GitHub? FreshMeat. I don't remember. Yeah, SourceForge. C-SPAN. That's right. Right. I have some books that publish the software in the back of the book. Right. There you go. Invite only BBSs. The discords of their day. Yeah, yeah. JBK said something in the chat that is reminding me of one of my favorite quotes, actually, from the paper. JBK says, I don't know if it counts for programming productivity, but going way back, what about the whole concept of pipes as an operating system concept? And in the ADA section, Brooke says, Operating systems, loudly decried in the 60s for their memory and cycle costs, have proved to be an excellent form in which to use some of the MIPS and cheap memory bytes of the past hardware surge. And having people and companies argue, I don't need an operating system because it uses too much resources, it's not worth it or whatever, is a thing that we just now take for granted as a tool that we build software on to be productive. And an OS is itself a platform. That has a bunch of, as it turns out, a bunch of useful things associated with it. I mean, things like McIlroy was obviously a big lurch forward. And yeah, Matt, it's funny. I was just going to mention the same thing. Have you heard about this with the Knuth-McIlroy showdown? Oh, yeah. Yeah, exactly. Where Knuth writes a five-page algorithm and Knuth writes it as a pipeline, which just feels like, I always thought was, I think practitioners everywhere, even though people are right to point out that like, well, that wasn't really the spirit of that. And it's like, I don't care. I just find it very entertaining. As a practitioner, I'm entertained. I want to jump on the opportunity to correct your pronunciation. It's McIlroy. It's McIlroy. Thank you, Tom. Is it misspelled? No, it's just a weird spelling. It's a weird spelling. All right, McIlroy. Thank you, Tom. Listen, an important theme in this podcast is correcting my pronunciation for essentially everything. As we've learned, I mispronounce absolutely everything. Well, if it's like a... Yes. Listen, you can probably spig out of my cold, dead fingers, Ian. It's been great. Steve, thank you very much for being willing to jump in here as philosopher and podcast host. Podcast host. Thanks for having me. Really appreciate it. And Ian and Tom and Alex, thank you. Sorry that the... And thanks to everyone for all of your contributions. A lot of interesting stuff in the chat. We're going to be definitely interested to see the magic bullets of our... The silver bullets of our future. I'm sure there will be some, and I'm sure they will be somewhat valuable, but I think we can broadly stand by a lot of the conclusions here that Brooks made. I mean, coming up on, what, like 40 years ago. I mean, this is pretty old to be able to make things that actually remain really quite current. Very, very impressive. For sure. All right. Thanks, everyone. We'll see you next time. "
  },
  "b7b38642-ffe9-4efe-bc0d-eb9f0b767e7a": {
   "Title": "DTrace at 20",
   "Description": "\u003cp\u003eBryan and Adam reminisce about the DTrace journey 20 years after first integrating the code into Solaris back in September 2003.\u003c/p\u003e\u003cp\u003eIn addition to \u003ca href=\"https://mastodon.social/@bcantrill\"\u003eBryan Cantrill\u003c/a\u003e and \u003ca href=\"https://mastodon.social/@ahl\"\u003eAdam Leventhal\u003c/a\u003e, we were joined by \u003ca href=\"https://m.unix.house/@jmc\"\u003eJosh Clulow\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eSome of the topics we hit on, in the order that we hit them:\u003c/p\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Hungry_Jack%27s\"\u003eHungry Jack's\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBryan's \u003cem\u003eother\u003c/em\u003e online dating profile\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://cray-cyber.org/old/systems/e10k.php\"\u003eThe Sun E10000 (E10k)\u003c/a\u003e, the world's worst router\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eLeventhal's Conundrum\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eDTrace as \u003ca href=\"https://www.techradar.com/news/gaming/half-life-3-release-date-news-and-rumours-1290663\"\u003eHalf-Life 3\u003c/a\u003e, eternal vaporware\u003c/li\u003e\n\u003cli\u003eMore on SPARC, it's TLB, the %npc, and dtrace_fish from \u003ca href=\"https://github.com/oxidecomputer/oxide-and-friends/blob/master/2021_05_10.md\"\u003eOxF May 2021\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eSolaris 9 was the completion of the Solaris 2.0 vision\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://dtrace.org/resources/bmc/dtrace_ktd.pdf\"\u003eDTrace Kernel Technical Discussion (2002)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://simpsons.fandom.com/wiki/In_Marge_We_Trust\"\u003eMr. Sparkle\u003c/a\u003e \u003c/li\u003e\n\u003cli\u003eFirefox? Mozilla? Firebird!\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.usenix.org/legacy/event/usenix04/tech/general/full_papers/cantrill/cantrill.pdf\"\u003eDynamic Instrumentation of Production Systems, Usenix 2004\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/rust-lang/rust/issues/6816\"\u003eGraydon on DTrace in Rust\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/oxidecomputer/usdt\"\u003eRust USDT crate\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/dtrace\"\u003eDTrace on Windows\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://dtrace.org/blogs/ahl/2006/08/07/dtrace_on_mac_os_x/\"\u003eAdam's blog: DTrace on macOS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://dtrace.org/blogs/ahl/2011/10/10/oel-this-is-not-dtrace/\"\u003eAdam's blog: DTrace for OEL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://illumos.org/opensolaris/ARChive/PSARC/2003/index.html\"\u003ePSARC cases from 2003\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003cp\u003eIf we got something wrong or missed something, please file a PR! Our next show will likely be on Monday at 5p Pacific Time on our Discord server; stay tuned to our Mastodon feeds for details, or \u003ca href=\"https://sesh.fyi/api/calendar/v2/iMdFbuFRupMwuTiwvXswNU.ics\"\u003esubscribe to this calendar\u003c/a\u003e. We'd love to have you join us, as we always love to hear from new speakers!\u003c/p\u003e",
   "Link": "https://share.transistor.fm/s/bdfd0524",
   "Filename": "b7b38642-ffe9-4efe-bc0d-eb9f0b767e7a.mp3",
   "GUID": "b7b38642-ffe9-4efe-bc0d-eb9f0b767e7a",
   "Published": "Mon, 11 Sep 2023 17:00:00 -0700",
   "Transcript": "Okay, let's write down how the other sounds on a piece of paper and both look lower at the same time Well, you sound terrific like a millennial podcaster that's what I had on yours that's what I had for you All right. We're good. Everyone's wow. All right, perfect nailed it So here we are 20 years later 20 years after we integrated detrace in Uh to me because you know, it's amazing You know, I because I got married shortly after we integrated adam. Yes. That is amazing It is okay. Wait a minute. That wasn't I don't think that's actually where I was What I remember What I remember is that I actually managed to like actually made and he's been He's been holding it in for 20 years to be fair You know, I I think you had both of these deadlines looming Both involved a bunch of work I remember someone at the time kind of commenting on it and you saying that the detrace deadline was much more stressful I think sort of because The the like the wedding was going to happen one way or the other like It didn't matter what kind of shambles it was like if if everyone was getting Take out hardy's at or the australian equivalent for dinner Like it was going to happen as opposed to detrace integrating like it was only going to happen if it was done First of all, I believe the australian equivalent would be hungry jacks Josh correct me if i'm wrong now now look Hungry hungry jacks is was a spinoff of burger king Is spinoff the right word? well There was a franchise licensing thing that happened because eventually Like decades later the burger king people showed up and started trading under their own name and I feel like that. Uh, Did hungry jacks go away? I don't know that it went away But it may have actually by now like they may have figured out how to fix all that up But for for a long time it was hungry jacks. Certainly And for an american australian like does is burger king aware of hungry jacks? This is this looks like no, they definitely they definitely were because that was it was the the home. It was our home of Uh what you would call the whopper. I believe we also called it the whopper Yeah, what did you call it? I think you called it. I think it was the whopper I think I don't think there was anything substantially different about the menu I think the whopper is actually I think the whopper feels like a it's almost a name that That australia would come up with I think you'd be very proud of the whopper now We'd call it that we'd call it the whopper No, that's the right exactly be less as rotary cars in in the fair enough So yeah, adam, I thought it was gonna be all hungry jacks the wedding fine Who cares the meanwhile detroit's not integrating would be a real problem She's saying one of these projects was was date driven. We pretty much, uh Did I verbalize this relative anxiety around bridget? I can't remember if this was no but like around a lot of colleagues And I think actually one of your one of your helpful colleagues Not me did mention this to bridget and she was like absolutely like date driven. The other one was quality driven Look what i've ended up with You know, I like to say we've been married for 20 years in october so it's We're doing all right, we're getting all right. Yeah, exactly detroit's and america both doing well actually pretty amazing uh so I mean, I think it's amazing that it was 20 years ago because it still feels so recent and I feel it's like we're really Lucky to have software. I mean how many people get to have 20 years of experience with their own software? And get to like look back and you know, what do we do? Right? What did we do wrong? You know, what were some of the things we regretted? I don't know how many of those there are but there are a lot of things we got right. Actually. That was it was fun Yeah, and remarkable to literally still be using it and and privileged to see it Living on in systems that we didn't build, you know, every time I fired up on my mac. I feel very grateful that that has continued uh in their You know mostly true to the principal's fork of it and it's been great And you feel slightly less gratitude every time you have to go into sip or whatever to go There is that they're like, oh good a new update. Oh like a new problem Oh, I have to do the sip dance to be able to use this thing again. There is that I am grateful. I am grateful That's right Yeah for those unfamiliar apple has detrace and has had teachers and we'll get into that but uh, it is locked down in ways where you have to Break a bunch of warranty voiding, you know glass in order to get your way there, but it's not so bad It's not so bad and it is uh, and we are I think we feel very lucky to have a technology that people Uh are willing to root their macs to use Yeah It's strange. It's terrific. So, um, how did that happen? I think we wanted to uh, Reminisce a bit about some of those early days uh for sure and especially with like the things that kind of benefit from 20 years of hindsight, uh of um, Because there is a lot. I mean, it's actually we we have had to extend it Uh, we've had to rewrite remarkably little of it Um, yeah Josh yeah in the chat. Is that a reference to That's not a reference to be crude. No, never mind. I'm I No, I was we were we're still on hungry jacks Okay, you're so hungry. I actually okay. This is where my brain went the because you know Bridget and I met online this was but it was it I now know this is how everyone meets but this is uh, and uh in order to uh, This was at a time when you couldn't see Other profiles like you could only see, you know, if you were a man seeking a woman You could only see women not men. So I wanted to scope out the competition. So I created a Fake profile Did I tell you this item? Yes Oh, I did tell you this that the on one of the lab machines named beak and I had The the the the account that I created. I'm sorry that you do this I this is we got nothing to do with the choice but it's right. Yes It has a lot to do with getting married. So i'm sorry We're just gonna we'll be here quickly. Then i'll get back in the car The uh, so I created this account. I used the root account on beak. I named this profile beak root It was very important to me that it get no interest from Because this is i'm going to i'm going to create a basically a fake woman to to see what my own competition was And I I wanted to be sure that that this got no actual interest So I wanted to create the and I you don't actually I didn't have to upload a profile photo I basically didn't answer the survey questions or the questions. I answered with like Just minimum amount of detail I didn't have to put a height and a weight in there, which was at nine side Like turns out it doesn't need any more than that to get an overwhelming amount of interest is what I learned Uh, but I I did need to put a tagline in there. I I you it won't let you continue without an actual like You know this little like one sentence synopsis And I don't know. Do you remember this? I remember do you remember? No, no So this was at the height of the dot-com boom So I wanted again make this revolting to anyone to any would-be suitors So my tagline was uber hip.com or seeks pre-ipo bo And I I mean, of course like it all makes sense now Like I got buried in it just like that I got that that thing got so much more interest than the actual like real me It was a little bit like okay All right well and so I had people who were Pouring their hearts out to this thing that the only and they're explaining like what their vesting schedule was It's like oh my god Oh my god. This is so embarrassing. Anyway, so yeah, sorry when you said beetroot I thought you're making a beak root reference. Josh. I've I would josh. I'm sorry if I burned you I oversharing detail actually don't think i've heard that story before so let's you don't have to use the word actually There we go, there's one um brian in terms of where we start on d-tray is not to distract you um, but I'm not sure you've I don't know how broadly you've shared this but i've always found it interesting like where The idea from d-trays came from because that was well before your time at sun As I recall like this is these some of these early ideas were from when you were an undergraduate Yeah, that's right. Well, I wanted in particular I had actually funny because I was just seeing someone on hacker news experimenting with what you can do just with ld preload and how you can like load your own shared object And you can interpose on an arbitrary shared object and I wrote this little goober called that I called sift That allowed me to basically do what what shared object interposition now does and so trust remember so trust um and it was just Shining a bright light on to like oh my god. This is what the software is doing and I just felt like There were you know, I I was working on the uh, trying to make sense of the end-to-end scheduling model and it What I realized is just like what the software was actually doing and what people thought it was doing were two very different things And like why don't we have a better way of figuring out what the software is doing? the only way of figuring out what the software is doing is like Putting a break point in the debugger. Like why do we do it that way? And why don't we I just don't understand. I didn't understand why we don't dynamically instrument program text To when we want to understand what it's doing and then once we understand what it's doing I'd uninstrumented and put it back basically And which doesn't feel like super deep thought but the I I did what I did ask our os professor um at university about this and he's like, yeah, you know, I don't know I think it's like I think there must be some reason they can't be done because if They this is like kind of important. He's like this is like a reasonable thing. I didn't even question this at all It's like if there were if you could do this, they would have done it by now And I thought the same thing. I'm like, I think you're right Yeah, there must be some reason that this is like impossible to instrument program text and when I was interviewing at sun and I had um was talking to jeff bonwick and barb smothers and Yeah, I remember going to lunch with everybody and I was coming back from lunch and kind of like hey There's this question of me to ask you, you know Why don't you do it this way? why don't you allow program text either in kernel or in use land to be dynamically instrumented and And I bonwick is like Yeah, no, there's no good reason like you should do that. We should do that. I'm like, oh really? I just was not right. I was I was so oriented to getting an explanation about why this was impossible and the there was this moment where he was like You should come here and do that. Like yeah, you should come here and do that. That sounds great And I try to remember that moment when dealing with anyone early in their career asking why something isn't done some way because it felt like so uplifting and empowering to be like Oh, i'm gonna come here and do this and i'm That sounds great. And what I didn't realize was Well, you are but there's a lot of actually like junk you're gonna have to deal with first I just felt like so I from coming to sun. I Had an idea of like this is what I I where I want to kind of orient myself towards But there was also a lot that had to be done in the interim And there was a lot that was just so I was in 1996 And we didn't start detrace until 2001 well, you started in earnest, but you were putting down a lot of foundation as I recall that is You know in particular ctf. Um, yeah, but like also you're getting a lot of miles on the tires in terms of your experience with solaris and debugging, uh, really complex performance problems Yeah, that is true and so a couple of things were that happened that were important so one, um, we uh had some really Crushing performance issues, especially on these big systems the e10ks and the only jeff had done this really interesting tool in solaris 2.6 called lockstat and uh lockstat allowed us to lockstat actually did use dynamic text instrumentation of Just the synchronization primitives and allowed us to understand what the synchronization where we in particular When we were blocking why where for how long and it just a pause lockstat is So fucking cool and especially before we had built detrace When you start looking at the locking primitives and see that these Handwritten assembly routines were built in such a way that anticipated this kind of dynamic instrumentation Instrumentation that you're referring to they were built in a way where they say Replace this instruction with this other instruction and then it'll fall through into this Xanadu of data collection. Yeah, and then Return the system back to fully functional or pardon me fully fully, uh full speed not fully functional It was always fully functional but rather to optimize performance. That's right And I and jeff had actually done that so when the synchronization parameters were originally written That was not the case and jeff had rewritten them into six As part of doing the lockstat work if memory serves So that's why it looks like it was always designed with instrumentation in mind because it was rewritten with instrumentation. Oh, yeah. Yeah of course um and and then that what ended up being Really really important because it was our only way of understanding what was going on inside the kernel and we had But it was really limited visibility. I mean it was you could only instrument this kind of like one Very important but kind of thin layer of the system namely the synchronization primitives and You would immediately have follow-up questions that you couldn't answer or couldn't answer easily. And so we And there was in particular there was and I remember this very vividly because it was my birthday, uh, 1997 Dealing with this very large e10k system benchmarking system That uh, I hadn't really even seen any 10k. We didn't have one in software It was way too valuable to give one to the software So we uh, this was an e10k that was running a gigantic sap benchmark Uh that general motors was interested in and it required actually four other e10ks to feed it Which was holy smokes Yeah huge and it took uh, this machine took like two and a half hours to boot And we knew that the system would enter prolonged states of deep deep sadness Uh, and uh, we did not know why And all the only tool we really had was lockstat and you so you could see During the periods of sadness that like we were in the networking stack and I was writing Modules, I was I was basically doing handwritten Unsafe detrace. I was basically writing custom kernel modules and loading them And and then like effectively hot patching the system that jump into them um and It mostly worked but occasionally didn't and the system would panic and then I would like go have two and a half hours to reflect on on What about It was bad nice and the And through that the whole time I was thinking like this is a networking issue and that wasn't totally wrong In that we were ultimately like we we were super sad because we were like order of n cubed in in networking stack But like why were we there? And why was it so transient? Well as it turns out the reason what was actually happening is the system had been misconfigured And it'd been misconfigured to act as a router And I forgot this this is hilarious And there was a router elsewhere in the lab that was popping occasionally and that thing would pop and the e10k would be like You I am actually the world's worst router if I'd like if you would like to wow those other lab routers I can Do you want a dhcp lease I can I can handle I I don't I don't think i'm too busy. It's like no, no Are you busy with anything any benchmarks you should be doing right now? Right, don't you have an if you think really hard like don't you remember the sap workload? I just gave you it's like oh that is ringing a bell, baby you know what i'm gonna furiously route these packets in this terrible order of n cubed algorithm and uh, and then is which also explained why it would suddenly write itself and then it would be and Remember that moment was like very eye-opening for me about the idea that these things deep in the stack could actually be manifestations of very high level issues where You know you a system has been you know misconfigured or misadministered or there's an application running It's a surprise and the only way we kind of get to it is with these super deep symptoms Adam, this is what I I keep trying to get traction on the on levinthal's conundrum. That's right The the butterfly flapping its wings that you need to find that has caused the hurricane That has caused the hurricane. You have the hurricane. You need to find the butterfly and uh It's which is still really hard. I mean really really and but I think that whole That became very eye-opening. I'm like we absolutely have to do this and then the foundation that you're referring to was So I uh, I had well, hold on before before you got before you take the next step So that's 1997, which is before I got to sun now by the time I got to sun 2001 detrace, uh I think you and mike mike shabiro who Worked with us on detrace. Also, you guys had a notebook like a detrace notebook Yeah, and when I got to sun detrace had this sort of vaporware like like You know, you guys would wander into Problems and I don't know if this is actually true But seemingly and say well, you know detrace would solve that and you had done that enough where people were like, all right well Could you please just build it rather than telling me that you would the thing you have not built would solve my problem That's right. It was it had a a duke nukem forever kind of vibe or is it halo 3 am I using that right josh? Is that right? No, I The do you mean half-life 3 half-life 3? Oh my god, i'm only I'm, i'm sorry. I'm i'm not a gamer. I do all that fumbling is gonna look great in post We'll clean that all the way up here on discord Right here on discord. Okay. Look, uh half-life 3, right? I knew it was one of those things that the kids talk about the uh, it had these kind of vibes of like the thing that is always coming that is That you actually want right now, but does not actually uh does not actually exist and you're being told that it will be don't worry Uh penicillin will solve this like what are the penicillin's like? Well, we haven't really started about it. It's like, okay well Yeah, and I did adam you can i'm sure visualize this because I caught tim marsland a former colleague, um a who very distinguished, uh accents guy english guy and uh Tim was uh trying to debug a problem and I That had been really painful for him and I did cheerfully volunteer like no detroit solves that problem And he was so pissed off Like okay, right, maybe we need to stop talking about the problems it's going to solve maybe that's right enough with the hype, right? Enough with the hype and I did think that like I I think that um It You know, this is also coming in another interesting object lesson, by the way We structured the early approach first of all we knew that we wanted to get the d-trace and I think the thing that you're referring to that that was exceptional was that Mike had figured out a bunch of the foundation stuff that was going to be required and that I like I didn't really fully appreciate the importance of CTF for DTrace when which is our ability to get type information in the kernel and Mike told very strongly just justifiably so that that type information should be available in the kernel itself that you should not need to get some auxiliary file that contains the type information that the system itself should have its own type information and we needed that for MDB but Mike also saw the need for for DTrace which I really did not appreciate at the time honestly and he had there were other things like this where he had and I he had a terrific kind of connected graph of all the things that were going to be required to get us to the point where we even earnestly start on DTrace and so we did a bunch of that work in that in the kind of 98 99 time frame uh which I think is the this is like Solaris 8, Solaris 9. Solaris 8, Solaris 9. Yeah yeah and but looking really for an opportunity to to actually really start on DTrace and I and I think that a lot of engineers feel this way that especially when you become valuable to an organization you feel like you're constantly being kind of caught caught up in the next crisis and it can be hard to get out from underneath that crisis disposition and you and I got caught up well I got caught up in a crisis and I saw your call I dragged you under with me um the the cheetah plus uh yeah um so uh cheetah was a uh microprocessor a very cruelly named microprocessor at Sun because the thing was not fast had a lot of problems it was hot it was late uh it was slow it was expensive it had been I mean other than that um it had a lot of problems three and in particular they had made a really grievous error um where they had taken so that recall the TLB issue with cheetah plus at or with cheetah um so they uh ultra spark two blackbird and so on had a fully set associative 64 entry TLB and uh then then some number of those pages will be locked but fully set associative for all pages and what they had done is taken a bunch of instruction level traces from cybase running on solaris 2.4 now the year 2.4 comes out in like 94 maybe 93 and now it is 2000 or it's 2000 2001 it's early 2001 and so this is like a trace that is like eight years old and but it shows you how long these the when they made this decision it was arguably only like four or five years old but the decision they made was the operating system isn't using large pages so we should have a large TLB for small pages and a very small TLB for large pages and the problem was we hadn't implemented large page support yet and we that support was implemented in the operating system after solaris 2.4 so the data that they gathered was all basically wrong and was real i mean that's this is one of these things where it's like being more data intensive was actually the wrong thing to do and they what they should have done is like realize like no of course we are going to add large page support in the operating system and of course you should support large pages from a larger tl from a large tlb but what they did is they moved to a 16 entry fully set associative tlb for large pages which down from 64 and then a bunch of those ended up being locked so instead of so you end up like five of those being locked so you end up with like this nine entry tlb for large pages small pages meanwhile live out of a 512 entry tlb but only two way set associated which is also just death so when your set associativity gets that so i don't know adam do you remember these workloads because it's on both the instruction side and the data side so you have to be thrashing right and you'd be thrashing from compilation to compilation depending on how the compiler laid out your code that's right that's right so you could easily easily easily have a uh just a workload that is hitting like uh instruction going through a plit and into a shared object like that's three different bodies of text you're going to execute in a pretty hot loop and it's like yeah you get unlucky and those are in those map to the same set and like literally a shared object by the time you got up there you like evicted the uh your program text i called it and it was bad you're like why i'm like every once in a while when i compile this it's 55x slower oh god and so i was i was very much called in to deal with that which is like really super tough because it's like well we've we've made a bunch of decisions already and it was a big mess but i part of my my condition of that was like i'm gonna do this but then i really need to have to be given time i need six months to focus on detroit and so i've kind of been talking about this enough and i'm going to kind of go into like this one last firefight there's one last crisis but in exchange for that i need six months of focus on detroit and i wanted mike and me to be able to focus on nothing but detroit for six months and i have this plan for a fire engine that's right for next exactly i want to build a fire engine i would like to well and i i think a the um and uh and matt aaron's in the chat is pointing out that that uh yes the tlb misses if they missed in the what's called the tsb they were trapped into the operating system yeah there's no hardware page table walk and it was a big mess it was really really bad and i mean this is like we are this is part of the reason why we spark was losing the plot x86 but so the i finally got the and kind of the the the i wanted to get a single trap stat um integrated into the system which allowed us actually a kind of on point uh traps that allowed us to actually uh it would instrument the trap table so we could actually say how much time we were spending in the tlb mishandle and what we discovered is matt i don't know if you remember like the lint pass two uh we we learned that lint pass two which took forever when you're running on the kernel was basically spending 60 of its time which basically meant all of its time uh filling the tlb um because the resident set was just larger than the reach of the tlb and we were just apps and it's basically random and we were just absolutely thrashing on on past two which was definitely it would i'm eye-opening in terms of how brutal i can be but once traps that integrated um then i was like okay i finally have i can go focus on detrace which happened sometime in the fall of of 2001 i want to say in november of 2001 is when we really got to start focusing on it and got to focus exclusively on it um and slayers 10 it just shipped and our excuse me slayers 9 it just it just yeah and and i don't know if this is too far but i felt like slayers 9 was kind of the completeness of the svr5 like the slayers 2.0 multi-threaded multi-core multi-processor vision that is to say all of the loose ends were sort of tied off everything sort of made sense there were no awful like obvious glaring omissions or places where two things didn't intersect appropriately um and that's i would also say that's that's why it wasn't just detrace that got started then it was zfs we got matt aaron's here in the chat and zones and some other projects that's all we're building smf there you go and building on that foundation which was now you know not as rickety as it had been that's right yeah i mean i think we everyone felt like i can go off and it wasn't really planned for everyone to do this at the same time but it in hindsight it did kind of happen for the same there was a shared reason underneath all of them which was okay this system works well enough and and the abstractions now work and now we can actually maybe we can think about new abstractions and yeah that's that is matt and jeff on cfs a pacific um that is on that's fire engine that is fma that is smf and that is detroit um and detroit i think was probably the first one because it had been a chip on my shoulder for probably i mean i think i want to say that detroit was kind of the first one in the shoot i mean matt maybe maybe pacific was starting i guess pacific was starting at basically the same time but um and so did you get to so you got to put your head down and actually the you know the organization didn't bug you too much for six months that's right it did definitely and and you know in hindsight like either the organization did a good job of not bothering me or i did a very good job of ignoring the the the organization um but definitely got i mean it really did focus during that period of time um i actually think that you know this is also when as i've kind of been thinking back on that period of time this is the first time that i was really working from home i think and the um that we've kind of all started to work you know and because i'd not been working from home through 96 97 98 99 it's really only in 2000 2001 they sure worked and that that really did afford like new levels of focus i think that people um forget that the you know if you really need to go all this kind of return to the office nonsense people do forget that like boy when you are working when you know what you need to go solve being being able to really put your head down and have zero uh distraction by working from home is really powerful um and i guess it was like a sweet spot right because it's like working from home before like slack and tms messages like yeah i don't know if you want my attention email me but i don't know if i read my email like once a day i guess at this point i'm just like call my home phone or whatever call my home phone yeah seriously i just like super heads down and it was a great it was a beautiful time because i look at how much you know we were able to actually do in a relatively short period of time so we had started this idea of the kernel technical discussion and i just remember having this really big milestone around presenting the work that we had done to the whole kernel group and my view on that was like when we did that this was kind of the referendum on d-trace and we had to be far enough along to show that it merited additional investment that i'd kind of won myself the opportunity to work on this for some period of time but not an indefinite period and i really need to show very tangible wins and one of the things that was important to me is the ability to actually uh debug the system and be able to actually get some real bugs and show that we could and i think that you know part of you know the kind of the genesis of d-trace wanting to show itself by debugging actual bugs on the actual system i think was really important i don't know what your kind of take is on this but i think that we um i mean both for credibility but also to know that you were on the right path and to know what to build and that that was thematic and almost everything we added to d-trace almost everything we in fact everything we added to d-trace was because we needed it and we needed it and from a very early period of time so the kind of the first thing that that i kind of got working was this ability to instrument the functions in the kernel um to instrument what we call fpt function boundary tracing um a term that i invented because i couldn't find a term for it i'm like what is the term for this so i'm sorry if fpt is a stinker i'm sorry yeah it's amazing how much that is uh you know people have latched onto that it's i mean they have yeah maybe i shouldn't actually you on that one but that turned out to be a good term or at least nobody could think of a better one no one could think of a better one really i think that that's actually much more accurate and we so i i got fpt working and i knew that we wanted i think the other thing that was actually really helpful is that all this one of the things i definitely wanted to do was replace lockstat as a d-trace provider so i mean i in other words i wanted to use i wanted to separate out the way we instrumented the system from the framework that consumed that instrumentation and i think that was a really important idea i was i think that idea was more important than i realized actually um that that because i think other frameworks hadn't done that other frameworks had tied together the way i instrument the system from the thing that that actually processes the data and in a way that was really hard to kind of unglue and it was very important to have a very crisp boundary what we call the provider boundary there yeah other important principle that you nailed in that first prototype or in that first presentation was the the ability to run it in production meaning the system was going full tilt fully optimized you know no weird flags or extra code generated and then dropping into an instrumented system where the penalty was proportional to the question being asked and that i know that we've we've probably said that 10 000 times and 10 000 presentations but um didn't feel obvious at the time and and other tracers at the time certainly weren't doing that it definitely didn't have that approach yeah i mean that was a very important constraint when we actually set out is that this has this has to be available in production systems and that was a a constraint and that was guided from the work we had done with customers the work we had done on these benchmarking systems and then i think it also must be said the work that we had done one of the things was really important that we had done uh and a decision that that that definitely predated me and due to roger falconer the late roger falconer and others was the fact that we were running the operating system ourselves in building 17 so we had an nfs server that had the whole building hanging off jurassic um and this ended up inspiring uh other groups inside of sun did did similar things and we ended up with like prototype hardware we ended up using this again and again and again we've used it here at oxide and boy running yourself on yourself is both very empowering and very eye opening in terms of the constraints the problem you become your own customer and the like we had to have because we had we definitely had issues with jurassic and we needed to be able to debug jurassic and we couldn't afford to put a debug kernel on there a different kernel or a kernel that actually uh you know had this kind of instrumentation enable we couldn't take a reboot to go uh actually debug a problem we needed to debug it in situ it had to be available in production that meant it had to be absolutely safe so that was definitely a a constraint from the get-go it's like we have to be safe and as a result when we instrument things um and the kind of the contract that our provider has with detrace itself is that that i'm going to instrument the system in a way that is safe um the way that we will not be able to actually roll the system so it's not going to instrument the system in a way that it doesn't understand or can't reason about and detrace will always err on the side of like sorry i can't instrument this because i actually don't have confidence about the context the thing is in but we do have because we could figure out every function entry and return in the system and we had a way of instrumenting that pretty cheaply in in spark without a trap actually by using an unconditional branch um we was able to get something working pretty quickly with fpt and i just remember running it on my desktop and being able to see all the things that were going on in what was the hme was the happy meal ethernet um which is the the has its own story tom lion here it's not the happy meal ethernet story but um it was the uh the nick that we had at the time and being able to see everything that was going on in the driver as it was happening being able to do that totally safely control c it and have the system restored and being able to do that all that on my own desktop i just that was like an early moment of like this thing actually has legs this is important and i we're going to be able to do things with this that we couldn't do with any other system that must have been an incredible moment i mean just to have been thinking about this problem for you know five six seven years and then i don't know just to i still get a kick out of seeing like what is going on on my desktop right now and for to see that for the first time like must have been pretty wild it was wild yeah and i think it was it was wild and it was also like okay it was it was i mean vindicating is almost the wrong word it was energizing because it was like okay we've got a lot of work to go do but but it was one of these things that you when you're engineering something big you get these like the omens become really important you know what i mean it's like it's the seabirds showing that you're close to land or the dolphins you know to go to a nautical metaphor i mean those omens are really important like you're on the right track this is and you you really especially when you're early in something big you need to take those things really seriously uh because they can be really inspiring and you need that energy to get through all the things you need to go do to get this thing done so yeah that was really that was that was great and i just remember being like wow okay this is we can actually there's a lot we need to go do but there's a lot we can go do with this um and so you guys gave that presentation and as i recall i mean it it brought down the house like people went bananas for both what you were showing and the the vision that you were painting yeah and i i just dropped the deck in the in the chat for that um which actually is funny i don't know if you looked at that deck since we basically presented yeah yeah yeah and i i are you going to talk about like the uh the sun it naming convention is that where you're going because that i i was on slide one of that deck and i was like oh they dropped the joke and then and then i went to slide two it's like oh there it is i remember that right at the time it ops was determined that everyone should conform to this first initials last initial uh badge id as their as like their identifier and we were all going to get tattoos or something yeah right as your username and you were no longer and i you know this is one of these interesting cultural things where like he was kind of listened to the wrong person on this one and didn't really understand the issue and then he was going to be sm3 so what did he care yeah exactly i don't know why does everyone so upset well i did you remember him like being like okay i guess it's like really important that everyone has their call sign or whatever like named your child maverick after top gun dude like you were on the thinnest conceivable ice here okay like let's rename your kid i mean let's start yeah okay let's get rid of everyone's call sign pal um but the i mean to his credit so i think this was right when this was being kind of handed down and i you know to his credit they realized that this was a bad idea and they actually needed to go uh and so this was this was rescinded shortly thereafter and we got it we we were allowed to keep our our identifiers they didn't realize that like these usernames like all right these these engineers take their usernames really seriously don't touch their usernames they freak out um but so yeah that that's that's in this deck but the um yeah so i recall it going on for a long time it was being i think it's the first one that we videoed i've got the video somewhere i don't know where um right now i'm vhs i just want to point out like even if you found it like what would you do with it i actually think we had it transferred to deep Oh, all right, so it doesn't go on DVD and I should make some effort to find it because I you know It's kind of I mean it would be this is like Even then like the DVD player, I don't know but I mean fine good. That's better. Yeah, I know it is better but you got quite a bit where it's kind of DVD player, but the And yeah, I mean it was it It was a lot of I mean I Adam so it's kind of interesting because like you were Effectively in the audience you were a you would 100% I had nothing to do with Dietrich's at that point I was I mean, I I was cheering it on but like I hadn't used it. I didn't work on it and So I think it was I don't think people realized how kind of far along we were done So, I mean, I do love the fact that we were and actually I was kind of surprised what they're like And we actually were we had done a lot and not very much time and in particular There were I mean we probably that we spent a little bit too much time on our own implementation because that's what we were right in the in the weeds of But you know, we had done some actually important things like pretty early and you know, we talked about like the safety in there and using the type system and You know being able to in aggregations are there and predicates are there? And then also like anonymous tracing. I kind of forgot that we've done that that early but anonymous tracing is one of these things I think to this day most people don't appreciate because like why would you you know, who cares and anonymous tracing is the ability to instrument during boot and this is one of these things that You know Most people don't care about most people don't care. I don't know the system boots Like I don't care about how it performs or what but it's for us it was really important to know like what's happening when the system boots and it was Brutal to instrument the system while boots and it was always by hand and so the ability to Have a t-trace be to be able to instrument the system while it booted And then be able to go get that data was really important And I think in this deck I even refer to a buggy that we found like You know We found obviously lots and lots and lots of issues by shining a bright light on we're able to you know Shave whatever it was eight seconds off of the boot time on some ridiculous. Oh, yes Well, then as you alluded to we were about to kick off a project that reimagined how boot happened So it turned out to be incredibly useful for yeah for examining that Totally where you would have these things where it's like actually you could do a big elaborate project Let's actually go get gather some data on the system. Like oh, look at this we can actually go fix this like three-line bug and Actually turns out there's as much performance there as there isn't you're in total rewrite and I feel like that happened quite a bit And the and so there's a lot that's in here and then you know, the one thing about this presentation I don't think it does a terrific job of Delineating the things we had done versus the things that we were kind of envisioning to do using the optative voice Yeah using the optative voice. Exactly The I was so there are some things here that were definitely still in the future So things we never did at all like basic block tracing but this nonetheless was like a And I do I think that it was I think other folks saw that like, okay. Wow, this is this is good this is important and I you know, the purpose of that of that that kernel technical discussion was really to Get folks excited about the work so we could keep doing it I mean, that's ultimately and this is not from like a budget perspective, but really more from a cultural perspective of like hey This is you know, we think this is important. What does everyone else think and Yeah, the reaction was really positive which was great and then Adam your reaction in particular was was really really positive and You were in particular thinking about like hey, I've been thinking about like how we would go instrument applications and That was great But But before that happened, so that was in March. We presented that this is in 2002 And I was going hella skiing in April of 2002 and and how much did I? confide in you Adam my fear of death from that that I So I think if like Matt if you remember this or anyone else who's there at the time remembers this and maybe I was just Like keeping this so I I've been an avid skier my whole life. I've been aggressive skier I love to ski and would you know, not really it'd be unlike unlike me to get really, you know Nervous about skiing and I had this kind of truly once-in-a-lifetime opportunities I've done it exactly once to go hella skiing in in Canada and with a reservation We made this reservation in 1999 when like it was like the height of the dot-com boom it is now 2002 It's kind of like the depth of the bust and like definitely economically Why not like I've got the money like Sunstock can only go in one direction And as it turns out Sunstock can only go in one direction. That part was I got the direction wrong So, yeah, it made like no economic sense by the time we were actually doing it so I kind of had the economic apprehension like this does not make sense economically and the But we I'm like, you know kind of on brand I'm beginning to kind of do my research on this like only a week before we're going or something like this and I'm beginning to realize as I'm any of this early days of the Internet information is not totally available But I'm realize like this is more dangerous than I realized and in particular the avalanche risk is pretty real here And you know, we were in with a very like the absolute best of the best outfit Canadian Mountain holiday outfit, but what I discovered is that this outfit had had this like mass casualty event like a couple years prior and we're something like 11 people had died and Right, you're just and Of course like the the kind of person who organized this trip is like it's fine. It's totally safe I'm like, how just are you aware of this incident that happened? You know a couple years ago where they they lost an entire party. Basically. He's like I was not aware of that Because they had like their most senior guide out there I mean usually the Highlights, you know when you are in the high country in is skiing terrain that has not been ski like avalanche risk You can know a lot about an avalanche and still get caught in an avalanche so I'm like I'm gonna die in an avalanche and I am gonna die in an avalanche and D trace is gonna be unfinished Because I had you know, I was working with Mike on this but Mike, you know to his credit Mike was not just working on D trace. Mike was also working on FMA the fault management architecture was also working on SMF the service management facility. So he's kind of like working on More or less three things at the same time And yeah, this one's asking the chat is this before airbags and rescue beacons? 100% for airbags and in fact, I ended up skiing in this thing called the Avalon which a lot at the time I'm like this is I'm gonna like mitigate my risk here and The Avalon allowed you to the idea of the Avalon is that that when you die in an avalanche? Sorry, we're here when you die in an avalanche you die of asphyxiation Because the you create this ice layer right around your mouth and if you could avoid creating an ice layer You'd be able to breathe through the pack and the snow back and the way to do that is to breathe in Air through the pack and then exhale through your back So the Avalon would be this thing that you would bite down on and it would allow you to when you breathe in it Was a valve that sat on your chest when you breathe in you breathe in through this this giant This kind of membrane on your chest and you breathe out it would go out your back And I can tell you that the one I think this thing these things were found to like not really work that well Because in an actual avalanche this thing would get knocked out of your mouth and you wouldn't be able to get it So as it turns out it wouldn't do anything for me I can tell you that like socially it definitely had a cost because did you look a little bit like Bane? Okay, so one you look different Also, it's a little bit awkward when you are taking a safety precaution that no one else in your party is taking You know what? I mean where everyone's like, what's that thing? I was like, I don't want to die Hey, but okay, but you know you whatever you'll be fine. I don't know. I mean, it's like, you know what I mean? It was definitely a little a little awkward made for some awkward conversation, but I and this did not dispel your fear of death despite Breathing out your back No, this is not I know I will I was just like I think that I'm doing this is a risky activity And I think I might die and if I die Because Mike has all these other priorities Detroit's won't be finished. I remember actually sitting in our purpose. We also live together I remember sitting in our apartment being like having this like heart-to-heart with him I'm like, I think that like if I die, like you've got these other priorities. You're not gonna get this thing done Yeah, right, right, right, right, but what about your stereo? Totally. I just like the answer I got out of him was just like this is not I don't know man I like I'm coming in with apprehensions and you're not like talking to them. So I had this idea. I Unfortunately do not have a photo I wrote my last will and testament on the whiteboard at Sun So I'm going house game and in case I die. Here are the six things that need to be done to detrace And you do not read do you remember this? No, no, no So a really really macabre version of can't conbound or whatever. It is I feel like like the death post-it notes or whatever Yeah, well I felt like if I do die, I mean god forbid but this will now become like Sacred and I'm actually I this is just to tell you like how far around the bend I was I'm like it will be erased by like the Janice real stuff accidentally erased So I like had like save save save written all over it So they couldn't actually erase it and then wrote down my last one testament thinking like people will be like no We must honor his memory by implementing these I know so you just wonder like would it that have actually happened or what they've been like, I'm gonna have one. That sounds terrible Like I'm sad about his death, okay, like what are we gonna be haunted by the ghost of Brian for not like I don't know implementing Tracing the way he wanted like you would have tracing like really Who actually needs this like who needs this thing, right? It's very esoteric So Yeah, I had my last one testament, but apparently like didn't really I mean, I I guess I guess you don't remember it So I guess it wasn't wasn't that a man the number of times you'd go into your office and write some manifesto or another If I kept track of every last will it's has to be you wrote in your whiteboard pal Lost lost for now, right? So I think that it was and then after that Adam that you and I kept talking and in particular because you were working on Something the public truck. I just remember like us sharing like a shuttle ride or something You're kind of like, you know I'm working on this and all I can think about is detroit's like I that's actually what I want to go work on and I This is another one of these like interesting object lessons where you really Should work on the things you want to work on and if you have something that like I can't stop thinking about this You should go work on that thing, you know, whatever that is, even if it doesn't make sense Yeah, and I was working on the fault management architecture, which like In theory, I was interested in but just in practice I could not get fired up for a lot of the the mechanics of what we were building and in the meantime You know the summer before I'd interned at Sun working on This thing that we were calling lib dis which was about structured debug structured Disassembly, you know focused on spark at the time but trying to understand you kind of a baby Ghidra of understanding how these programs were operating and It just got me really strongly connected with this with you know, machine code and assembly and in particular I started thinking about what user LAN tracing would look like and about You know this this split program counter next program counter and could we replace? a particular instruction with a trap you know the the trick that we were using the kernel of branching to a new location wasn't going to work in user LAN but could we use a You know 32-bit trap instruction get into the kernel kind of move that instruction somewhere else and resume in usually I've been thinking about a lot of aspects of that and You know true to what you're saying Yeah, I kind of whether it was on the shuttle or wandering by your office kind of pitching you this thing You know, yeah, why don't you do that? I don't know. That sounds like way more interesting that what you're working out with fault management Yeah, let's go do that. And then You I'd as a recall like Mike was out of town when that happens quick. I was out of town. We're gonna One of his products a different one. It's fine. Yeah But that was really important so many different dimensions one no, I mean obviously you brought like this particular an aspect of the problem that was ended up being Extremely important use level tracing but also just like Just brought so much energy to have. I mean, it's really what we needed. Honestly is we needed a third person and Excited I'd survived as it turns out, you know, I survived I survived Helsinki And it was the first thing I the first thing I worked on was You what we've been talking about this but you and Mike had realized that Understanding what where we were in user space turned out to be really important So the first thing I worked on was you stack and I swear I am NOT I was not slow walking into detrace fish but you and I that's when I you and I independently came up with this may be clever way of Pulling out registers through register windows, which we've talked about in I think every episode so I won't go into the details We have but but not a bit yet still somehow not enough Yeah, but that was the first thing Okay, yeah yeah, because because and that was a totally new lens because we thought you know, We were looking at all of this kernel stuff and by then I think we even had a syscall provider But then to tie that into where you were in user space. That was another like crazy moment of insight just you know a new lens on to all of these problems a Huge new lens very important and then so I was trying to remember that the origin of the name. Mr. Sparkle What is mr. Sparkle? Yeah, so not surprisingly we were we would communicate by and large through Simpsons metaphor something That's right. And the the pit provider Had kind of two pieces of it One was the the raw instrumentation of you know When an instruction was supposed to execute how we arranged for it to appear as though it had after Firing the probe, but the other part was identifying the location of probes and And we've been talking about this provider as mr. Fast trap for a long time, I'm not sure why but then What we did in user land is sort of disassembled all the functions to understand You know where function entry and return and then where the discrete instructions were Something that you know, we sort of got differently for through the kernel linker for FBT But for user land we need to kind of pick our way through because we didn't necessarily have the same Preamble and suffix as we did for for all these functions in the kernel. So we started calling that thing. Mr Sparkle and actually to this day Brian if you turn on Debugging for D trace it will vomit out Messages prefixed with mr. Sparkle as a struggle lives So as it stump as it stumbles in particular It would get really freaked out if it found what it thought was a jump table jump table is Yeah You know what would happen is you would have Data effectively sitting within the range of a function's symbol The data was used to inform where sort of a densely patched switch statement would redirect and Without this identification Mr. Fast trap and slash D trace would identify a bunch of data as though it were instructions and That didn't go so well when you started replacing data with trap instructions Then it meant you would fly off into outer space with very little You know to help you figure out how you got there and your application would die and your application would die spectacularly often like Several instructions away, you know Maybe dozens of instructions away from where where the actual incident occurred which made it even trickier to find figure out how you got there And so I said this thing we started calling mr. Sparkle after the terrific symptoms of the fish bulb the That's right. Right. Mr. Mr. Sparkle being the confluence of Two Japanese industries that whose logo looked exactly like Homer. Oh see notes for complete details An episode that we love so much that we implicitly named fish works after it. That's right It really is a great episode. Actually. We had a co-worker that studied Japanese in that is Yeah, Elijah and I I had Elijah watch that episode Too excited. I just wanted to like understand more about the the Japanese seems so plausible. Yeah, the Japanese is very good He's like it's very formal Japanese, but it's very good. This is really interesting. It's great Um, but so I so miss and then and I remember another big milestone was when you could instrument Every instruction in firefox. Remember that correct? Yeah. Yeah. Yeah So that there was a bunch of You know a bunch of failed attempts at that Which involved like driving off into a ditch, but things like how you deal with asynchronous signals being delivered while you're in the midst of executing a You know one of these trace points, so there's lots of corner cases to to consider along those lines But yeah, then we we go to from you know, a firefox that we downloaded off the shelf You know, we're going to be using it for a lot of different things Firefox that we downloaded off the shelf Um, you know turned on Millions of trace points the thing would slow down a ton, but it was still usable and that it was pretty wild Yeah, I mean it was it firefox or was it netscape at the time it was firefox I I I am pretty sure it was none. Excuse me. It was firebird firebird Right. I think this is before that Uh, that was definitely a thing before firefox, yeah, so we actually if you look at it was mozilla, right it was mozilla Wasn't it called mozilla at the time? I think it was firebird In the detrace documentation. There's lots of examples. I actually Kind of deliberately did this in when we were doing detrace examples I'm, like I want to capture like little time capsules in the detrace documentation So I did this over and over I never get this like my little easter eggs, you know a little Where I would deliberately like capture the date or capture the applications that were running because i'm like I want to capture like the applications of the day uh, and I definitely um remember like so there's a lot of firebird in there now that may have been mozilla before it was fire but the It was on spark importantly This is not on x86. I remember adam when you were talking about mr. Sparkle, by the way, if you go into the source base It is great. Like you You search for mr. Sparkle Like six different points that still have mr. Sparkle in there. Oh, yeah I just I hope that that future civilizations I think choke on that one. Agi like hey, go go make sense of that one You're so smart. Mr. Mr. Agi. You're writing us all. What does that mean? Mr. Sparkle? um, of course, let's listen to this episode right now, so Away I should have thought about my service the light come before I did that the um But we I remember thinking vividly like this will never work on x86 Do you remember that like we were like, okay, this is gonna work on spark But on x86, we're just like a hose. We're gonna have to do something completely different Yeah, and definitely when we integrated dtrace we did not have Fast track. We did not have uh, the provider support for x86. I think right. That's right. Did you have fbt support? Uh for x86 at the time because fbt like I don't think you could take the branch You have to take a trap there as well. I did take a trap. I couldn't take to the branch and I did that via I wanted to avoid the fact that so with the trap instructions your xcc Gets you like the debugger gets confused. So to prevent the debugger from being confused I used I generated I generated an illegal instruction with a lock prefix. Oh, that's right. That's right Um, but um, so yeah, I and I can't remember if we had that when we integrated or not I think we had fbt on x86 Maybe to be clear fb. I mean x86 supported sort of but like clearly a second class citizen at the time, which is yes insane and uh, You know perpetually like being announced that it was being killed, but then we would rally to unkill it So it always it was in limbo for a very long time Well, and I think the great darkness for x86 Is I believe like january of 2002 to october 2002? Is the that I believe is the era in which remember it was killed Remember this? Yeah. Yeah, we went to like all hands for the engineering organization and they're like x86 Solaris is dead and then we all went back to building 17 and talked about how we'd keep it alive That's right and we're like we are going to keep it alive because this is so obviously the wrong decision and We we will perish if we I mean it was so obvious. I mean, it's just I mean It was a very bad decision. It was a very bad decision and the person who made that decision You know who you are and we know who you are. So we'll just leave it at that Um, but it was a very bad decision that was that was ultimately revisited. Uh importantly and it was resurrected But so the operating system had only been resurrected Again, I think it was I want to say october of 2002 that had been resurrected So we I I think maybe had fbt for x86, but definitely not the PID provider Um when we actually integrated, but then I think you did the PID provider I think that was like the the next thing that we did was that's right So for a long time so in my I had a workspace like a branch called fast trap minus x do you remember this brand? And like everybody's laptop was running fast trap minus x for a while Fast trap minus x. I love that workspace A workspace being the git branch of its day. That's right And yeah, I'd forgot Right fast trap minus. Oh, so another thing you know that that was interesting was that the and I I know, uh, madison metrophy was a hop on stage to speak but the One of the things that was really neat was before we had integrated Uh projects had decided that detrace was so important to them that they would actually be a child of the detrace gate So they were I mean and you can again view this in teamware parlance um, but you we had effectively created a fork of the operating system that we were That we were staying in sync with and so people had decided that instead of syncing up with the the operating system They were going to actually sync up with the detrace gate because we were synced up with the operating system So that and then they would get kind of detrace for free and i'm I know that smf did that I think cfs did that as well Um, but a couple of folks i'm pretty sure zones did that too Anyway, there were a bunch of folks backed up and we we really needed to stick that landing before you know, you died heliski we needed to stick the landing and we and then and Uh, and we had a very exciting integration that we talked about recently So that was we don't need to belabor that one. That was a very uh, but that was a very exciting day. Um, and Uh ultimately, um landed and I when is a a debug adam that must have been That was before that was that was that was earlier. I think right Was that earlier in 2003 because I had kind of You're right. I think it must have been so we that's right. You and I had gone to ghent that was in Oh, that was right afterwards Hmm That was right after we ended man. No wonder we felt like we were up against we had a narrow window That was september 8th 9th. Of course it was. Oh, that's right. I forgot right? That's right Of course it was we should have definitely remembered that and so we should also acknowledge that today is 9 11 it is and the And of course because we were in belgium And this is only on the second anniversary of 9 11 And the first anniversary for those of you kind of like we're not alive or we're not aware 9 11 was awful, obviously but it was like Rip your heart out awful. I remember and adam you had just joined son. I just joined You know sort of a newly minted adult sort of and it was in you know, it the whole world changed it was just devastating and it was like And you know many many people have connections to new york sun lost an employee on one of the planes And it was just like devastating and then I remember the next year being so angry that that was not a holiday that we Worked on night on september 11th 2002. I remember being like we should this should not be a work day No one could work It it was just like that should have been a national holiday. It should have been national day of mourning It's really awful. But but by the time we hit like not september 11th 2003 It was beginning to like the kind of the scar tissue is beginning to form it wasn't like it didn't have that kind of Recency to it And you and I are in a debug and like everyone is kind of feeling a little bit calmer And then osama bin laden It's on september 10th You and I are both traveling on september 11th That's right flying. I think you were like flying to flying to back to dc or something I'm flying from brussels to dc. I'm flying from the head of the eu to the the the head of america, uh on september 11th 2003 right and As it turns out that was a pretty empty flight I had booked that because it was like really easy to get a ticket without realizing like wow, it's like so cheap I'm saving the company so much money You're like Oh, no, yeah, i'm like thinking like i'm going back on thursday and then i'm like no i'm going back on 9 11 I'm such an idiot and then I was feeling somewhat apprehensive and then on september 10th if I recall correctly you and I are in belgium together And which was I I I mean for was for a lot of fun for a bunch of different reasons We'll get to kind of the detrace consequences of that trip in a second But osama bin laden is like i'm gonna do something even more terrible on this 9 11 Like i'm gonna do something i'm really gonna blow your brains on this like this is gonna be really amazing on this And i'm being like shit and I remember adam. Do you remember your counter-argument to this? Yeah, I remember thinking that that would be bad marketing thinking If someone says 9 11, you know, it already means a thing so then it just gets confusing It'd be it's like no This is the one day you wouldn't do anything on you'd be like Oh that 9 11 was the most spectacular of all like which 9 11 are you talking about first 9 11 second? It's like it's gonna be a marketing mess and this is gonna be like like coke zero. Is that it's exactly It's gonna be coke zero coke classic. This one dies in committee at al-qaeda and I remember feeling like Total sauce at that. I'm like you're right. This is But the the kind of the the the detrace ramifications of that but by the way I was feeling a lot less confident was actually on the plane which like very clear this plane is like Basically three quarters empty and everyone else seems to be like an air marshal so I i'm not sure if I picked the right day to travel or not, but the um, The detroit's ramifications that I don't remember like we We like we have to write a detroit's paper. I remember do you remember us talking about that? Yeah Yeah, yeah right after hanging with these academics. Yeah yeah, and is and I I think we felt like it is very very important that we write a detroit's paper and That became a top priority. I mean There was technical work to do after the integration but writing the paper that became the eusnex paper That we would present the next year. Um the I i'm not sure when that must have been submitted in like november or something like that of that year in order to be and um, and we and I I feel very fortunate. I mean it was like the acceptance rate was getting extremely low for us next atc to annual technical conference Um, but that paper ended up being really important. I'm really glad we did that I'm glad that we forced ourselves to do that and I you know, another kind of big lesson of detroit's is it is really worth Forcing yourself to write this stuff down I don't think like I don't think an academic conference is the right thing for most practitioner author stuff but I think you know, whether it's it's a blog entry or an acmq article or Getting that kind of written vessel is really really important to describe work I totally agree So then we uh, I mean I I do kind of want to Move forward in time here. Um, yeah, we um, so detroit's becomes we we believe it's a big deal Um, but that's in part because we're using it. Uh other people start using it. It's it's pretty clear that that it's um, It was a lot of fun to go demo, which was great The blog when does the when do blogs.com when does that happen? Because I feel like that happens like almost around the same time like 2004 you know yeah, or yeah, maybe Right around that time because i'm not sure when we open sourced it But I remember detroit's being the first thing I remember some of our early blog posts talking about no, no, it was Maybe even yeah, it was 2004 because we were talking about the launch of slayers 10 Open sourcing detrace. That's right. It was right around that time. You're right Yeah, and so I think we did the the and a huge credit to tim bray Encouraging sun engineers to blog and so we started blogging in 2004 and we were really being able to be much more transparent About what we were doing Which was really important I think for us to be able to like really talk about detroit And I mean, I feel like detroit's Detroit was kind of like born on social media in that regard albeit primordially Because people were not relying on kind of official sun documentation for this They were getting this kind of from us and us talking about what we were doing and the blogs were really important for us, I think for for detroit's I mean my No, that's right. Both getting it out there and then uh hearing people's use of it. I think that was a really important vessel It was really important and like I I do love like going although it's a bit hard Detroits.org which has got a a down. Yeah. Yes a down rev wordpress installation. That's really need some attention Like wordpress at 20. Yes Why would you say that out loud? Oh my god, I know it's so stupid. I know I know please uh the uh, but The comments were really good in So, you know, this is like we're so old adam that that we remember when comments and blogs were productive Yeah, you'd like respond to people on blogs and have like a whole discussion without any nazis without any nazis It was amazing. Like the biggest problem was like people who were just trying to like, you know sell you things supposed to like actually uh, so those were definitely halcyon days, but um that ended up being really important and then the and that's like We started to get like a real community around it. Then as you say we open sourced it in uh in january of of 2005, um and that was the You know the detrace was the first thing out of the shoot and we wanted in in part because detrace was clean from an ip perspective we Detrace had been wholly developed by sun. We were not waiting for anybody to relicense anything So we needed something that we could open source to show that we were serious about it and um, because we wanted in particular show that we weren't holding back the crown jewels, I think that was one of the things that Uh as we started talking about opening up solaris that people were convinced that we would give away Uh, you know the the stuff that the the 20 year old crap but not like the newest hotness And so we started with what we thought was some new hotness Which was great. I mean it was kind of an honor to be in that position and It was really important to us to open source it. Um, that's when we turned into to the detrace fish and it's and it's shared It's shared ancestry the mirrored ancestry but it was really important for us to to get that out there and to get that open and I remember at the time being Like another part of the reason I want to get this open is I I want this technology to survive the company that it's in and I I mean which turned out to be, you know a bit too on the nose, but I It was really important to me that like this become a contribution Writ large and that I in particular. I remember thinking like I do not want to the thing. I desperately wanted to avoid Was some years later in my career pining for what we had built and not being able to use it would just feel like it would just feel so gutting, you know to not be able to use this stuff because detrace was so important to our Our kind of everyday use and you know, jason in the chat It says you still remember the first issue that he's detrace on And you remember adam we used to talk about this with people like you could see the change in disposition Between people who'd like yes. I've looked at detrace and it seems neat versus like detrace just pulled me out of the fire and You know what? I still I love that. I still get to see that and and we still get to see that with our colleagues at oxide Where you know, we show it they've seen it whatever But then you get that dm and i'm sure you've gotten lots of them because I have like hey No, I actually used it and holy smokes Like how would i've done it without it? How do other people live? It's like yeah. No, it's great It is great. It is really really really exciting to be able to do. It's exciting to kind of be with someone when they They realize like all these things are now possible. And yeah, it's been I mean honestly has been one of the the things that's just been a Singular source of kind of pride for us is that we can that this thing this technology still is able to deliver this kind of Delight to people and like wow, I now like there's so much I can go do it's really Great. Um and as you say it's been I this is up until like Present day because we've been able to do all sorts of things with that um, so two things I want to touch on so we've we um I don't want to pat throw out my shoulder patting myself on the back on this But we did get this wall street journal award and the reason I want to bring it up Is that we beat out? Inhalable insulin we beat out inhalable insulin for the top price turns out inhalable insulin had a bunch of problems whatever but It meant for the first time I could Both explain it in terms that my folks would understand where they could say. Oh inhalable insulin That sounds really fancy and you beat that and more importantly they could brag to their friends So that's the reason I want to I want to thank the michael toddy in the wall street journal Yeah, totally. Yeah, it was great. It was funny because yeah, we had all of a sudden this Uh kind of a spotlight that we didn't imagine that we would be kind of featured in this way We did beat out inhalable insulin which really That was seemed to be the headline for many people like many people like like what do you think? Like diabetes isn't important like I didn't I know we're not denigrating inhalable insulin I but I adam I did like I like that you point out like for the record inhale balloons Any problem and is there where are you now? now You're not in the podcast doing inhalable insulin at 20. Are you no not that one go learn to go find out That's a dead letter inhalable insulin very importantly Definitely like one step up the ladder at least from like a local boy makes good Uh, like local town newspaper photo that your mother puts on the fridge or whatever exactly It was it. Yeah, it was it and a and huge kudos actually to the folks at sun I think claire dravano in particular had really Reached out. I think this is a nominating process. You got to go through for that and they had done all that stuff Which is just great and really appreciate that and because yeah, it was I was it It was nice to get that kind of uh attention on the technology for sure Um because that was in 2006. When was 2006? Yeah. Yeah, which is great Yeah, um and the other one was uh that I want to talk about is is you mentioned lock stop at the lock stat at the top about being one of these The kind of early dynamic instrumentation but kind of statically scoped tools and that you converted them to to operate in d-trace We had the same idea in userland. We thought of you know What's good for kernel locks would be great for userland locks, which are a source of even crazier weirder Pathologies and I remember this but we had I had built this implementation of P locks that usually unlocks that that was terrible. It was just Awful with all these like implicit symbols strewn all over the place And we looked at it and we said nah, like we can't ship this And but that was the birth of usdt of usually unstatically defined tracing Where I didn't realize that that's kind of where that was coming from from the yeah Huh? Yeah, so so that was the first usdt provider was the plock stat provider built into libc as a way of sort of decorating these uh these locking primitives with The information we need to instrument them but then Totally like caught by surprise that turned out to be an incredibly powerful tool for dealing with dynamic languages something that We did not anticipate when thinking of that thing. Yeah, and so we should also talk about use stack helpers at some. Oh, yeah Um, and so so a bunch of that was done for you know with the java folks, um, because we're in sonya That's right. So, uh because we're at sun everything was everything was java So they sent the java powers that be over to hang out with us and we thought how can we Um do meaningful instrumentation for java. So half of that was a usdt provider the hotspot provider for examining, you know various aspects of java execution, but the other one was as brian was saying jayce so building a like a bunch of Instrumentation into the binary itself, which would help detrace in the kernel figure out how to assemble a stack trace And that was pretty wild It was absolutely wild because in particular like you the the jvm basically downloads a program that allows us to Answer the question in situ like which say in a context in which you cannot block you cannot execute use level code Uh, you're not actually touring complete by the way Uh, and we need to know for this symbol, what is the string that it corresponds to? And that was, man, writing a D-trace helper is, because it is not Turing-complete, I mean, that is programming a calculator. It is super weird to go to. And then do you remember like the tracing framework I did for helper providers? Oh yeah, there's like this kernel switch you can turn on for it to like emit like failures, basically. Yeah, so you can like have some way of debugging these because they're just brutal. And I remember thinking like, is this the simplest way? But I kind of came to, I mean, I think we all kind of came to the conclusion like this is enormously complicated and yet it is still the simplest way to do this. You're basically running a program in a virtual machine that's an entirely safe context to examine the process memory, right? I mean, that's like, I don't know how you could make that simpler and also make it cover all the cases. And did you put program in air quotes as you were saying it, Josh, to express the fact? I did not, no, I mean, it's a program. It has no backwards branches, so it is not a program. Yeah, but that's why it's safe. You are executing a series of statements. Yes, it is a wide statement. I do think that like, so one thing that, and I think we talked about this at the top, but one thing that is really important to understand about D-trace is safety and is at its core, safety, production systems and used pragmatically on debugging problems. And everything that we have done comes from that. And there, as a result, like, because some people have asked like, I don't know, like what's the difference between this and eBPF? What's the difference between this and system tab? Or what's the difference between this and whatever? And it's like the, when you can go find all of the surface differences of which there are many, but there's also just a values difference at the core and the core of D-trace is allowing you to safely understand what your system is doing. And everything that we do is about, we're not trying to augment the system. We're not trying, it is not a vector for delivering arbitrary software into your kernel. And it's not designed to be, and it won't be because that would violate the safety principles of D-trace. And I- And you can't understand this enough because like that safety built so much confidence where you could bring this to the most critical customer system and know with confidence, there was nothing you were going to do that was going to fuck things up. Totally. And this meant that, you know, there wasn't nervousness around, you know, when you'd use it, where you'd use it, what kinds of problems would be applicable for, what kinds of customer systems. It bred this confidence. Now it also had associated limitations, but that confidence like far outweighed it. We would deploy instrumentation to, you know, thousands of machines at Joyent without thinking about it really. When you're looking back, it was very little concern given to the potential downside because there basically wasn't one. Like, you know, even if you, you would at worst get back unhelpful data or something, like, you know, it wouldn't, no one, no customers would be calling up saying like, you just destroyed a hundred of my instances all at once. Well, and yeah, and there are, so D-Trace is safe by design. And so we are, it's designed to be safe. And we did a bunch of things that are important in the implementation to make it safe, but even as safe as it was in the implementation. And in fact, Adam, it was with the uStack helpers. Do you remember the issue that Jared hit with the uStack helpers? So he was, I mean, Jared Jensen, one of the, I mean, the earliest user of D-Trace outside of Sun was just going to town with D-Trace. I mean, D-Trace and Jared were a great fit for one another. And so he was deploying it wherever he could on any kind to be able to get these wins on these kinds of financial applications. And in particular, these things are in Java. So he's using JStack a lot. And I'm pretty sure Jared was the one who hit the, because a big uStack could take a long time to run, like hundreds of microseconds pretty easily, even up to like a millisecond to run all this. Because you're going through a lot of, I mean, for every single frame, you're going to ask the question, like, what is this thing? I need a string. And you start doing that for your 500 frames deep. And it's like all this, it's pretty easy to add up to like hundreds of microseconds, milliseconds. And it's also Spark, it's 2001 or whatever, and 2003 at this point. And I remember Jared ran this and the system just became unresponsive. And so the system was up by some definition. Technically, right. And that was a big eye-opener of like, wow, even as safe as we have designed this thing to be, simply doing no harm to the system is actually not enough. You actually have to keep the system alive. And there was a bunch of liveness criteria and you can go on some scary vacations because you end up with an enabling that's got a really heavy probe effect. And Patrick, I know you and I have both set the system on some very scary vacations. But importantly, like D-Trace will realize the system is not making forward progress. And D-Trace's assumption is, if the system is not making forward progress, I D-Trace him to blame. So I'm actually gonna kill the enabling and I will let the user know that this enabling is dead. And that I think was a very important decision to be able to go do that. And to give us the assurance that at worst, you're gonna get this kind of black hole moment that you actually come back from, which is very, very important. Like handfuls of seconds and then things come back. Yes, have you hit the, I assume you- The systemic unresponsiveness. The systemic unresponsiveness. D-Trace aborted error message. Once or twice. Yes, I have saved you from death. Or you've been saved from death actually. Cause you're like, I think you caught, I think you said that you were almost causing my death. Yeah, well, I mean, I was caught. I mean, you were the, only you can prevent systemic unresponsiveness, I guess. But yeah. Yeah, but the JSTAC highlighted the need for that because you need to be, we just felt you're running that profile provider, what have you. It was just very easy to like really burden the system. And it was very important that we had that kind of escape valve to make sure that the system would occur. Cause Adam, I think our disposition was rightly, we had zero opportunities to screw that up. Like D-Trace takes out your system once, you're never gonna run it again when it matters. That's right. You just do not have a do over on that one. And I think in that regard, it very much mirrors Matt and Jeff's disposition towards CFS where it's like, no, the number of opportunities you have for data corruption are actually zero. Like the thing corrupts your data and you're gonna be talking about it in hacker news comments for the rest of your life. And with D-Trace did not, the system did not toss. And with CFS, we did not have corrupt data. And it was very important for both those things to operate from those constraints on out. Everything we do was abiding by those constraints. Yeah. Should we talk about the post-sun D-Trace journey? Yes, I think so. Because I do wanna, so we did the, in 2008, we did the first D-Trace.com. That was not post-sun, but that was kind of post, we had left the operating system group and we are now in this group at Fishworks, yet another reference to the Simpsons episode. And we, I did love, so we had a D-Trace conference which sounds like, well, how would you have a D-Trace? I mean, really enough people for our conference here? Sort of, yeah. Yeah, sort of. How many people showed up to the first one? Like a hundred. Yeah, it's, I mean, same as the second and the third, about a hundred. That's pretty good. Yeah, but it's been about a hundred every time. Yeah. I'll take that. And especially because Stephen O'Grady was there, it was very, Stephen O'Grady's like, I'll come out with this. I'm like, all right, great. And Stephen was super skeptical. He's like, oh my God, what are these people? I think Stephen, it'd be interesting to know what he said now, but I think he was like, this is by far the most technical conference I've ever been at, where it's like, the old kernel level software is viewed as like high level, around here. And we had like Steve Peters there, and the, from Apple, who I love, love, love, love Steve, and talking about, in particular, the way, do you remember he was talking about how they'd use D-Trace at Apple on? No, I don't remember this. Oh my God, okay. So no, he had like a Q and A, and they were talking about how they had found this really nasty performance problem using D-Trace. And Steve is such a great technologist, and so earnest, and it was really good. Those videos are kind of like out there a bit, but they're terrible quality. Have you seen any of those videos? No. They're bad. We did have, but we did play the Ping Pong variant, of our own invention, that is still on the present theme in our lives, Fish Pong. We got burritos, it was a lot of fun, and everyone, it was great. And we had John Burnell there, John Burnell, who actually died suddenly, unfortunately, only a couple of years after that, but John Burnell had done the FreeBSD port, remember that? And I'd done, so that was a lot of fun, I really enjoyed getting everyone together. And it was there that Steven was like, yeah, this is great, but I don't know, man. Like, you don't know, it's like, well, it's like, what are you gonna do next year? Like, I don't know, what do you mean, what are you gonna do next year? Like, if you do, like, there's no way, like, it's not gonna be this good next year. It's gonna be, it'll just be a downer next year. Like, you can't recreate this. Like, this is so incredible, you'll never be able to recreate it. And we're being like, can you just like, let us have this day? Can we talk about this tomorrow? Can we just like, enjoy this right now? Like, maybe we can like, be a downer tomorrow. Like, today, this is pretty great. But I really feel like, God, he's right, right. And we were like, okay, we need to not do Detroit.com every year. And in fact, we ended up doing it in Olympiad. So we did Detroit.com in 2008. And then we did another one in 2012. And that was at the Children's History Museum, I think, in San Francisco. And then another one- I was in that one. You were in that one, yeah. And then we did another one in 2016. And I think- I'm wearing that shirt right now, yeah. I am also wearing that shirt right now. I saw in our earlier meetings where I'm like, you know what? I'm also going to wear that shirt today. There you go. And that was a lot of fun. And I think- And then I remember when I joined Oxide, I said, you know, 2020, Olympiad year, we can start to sponsor it. But little did I know. Little did you know, 2020 canceled. Right. And then we kind of like, and then the pandemic wore on. Adam, I am here to pledge. DTrace.com, 2024, baby! That's right. You heard it here first. Unplanned. We are going to do a DTrace.com for 2024. We're going to do it at Oxide and it's going to be fun. That's what I think. There we go. And there'll be fish pong. We promise all of these things. There'll be fish pong. There'll be food. We'll have a t-shirt. It's going to be great. Yeah. How many- Oh God. So 2024, we've got- Okay. We've got some time. We got a minute. Yeah, yeah. We got like a year. But we're going to do it and it's going to be a lot of fun and we're going to get the band back together. Because there are a couple of things I want to talk about that are recent innovations. So do you want to talk about, Adam, is this a good segue to get to USDT on Rust? Because I think this is where you get to modern day. Absolutely. I mean, I think that it's been great using DTrace for all these years, but then you find yourself wanting it in these places where you don't necessarily have easy access. So one of the things it's kind of, is it like two years ago now that Ben Necker and I worked on this? Wow. Yeah. Maybe more. But so we built this USDT crate for Rust so that we could have statically defined probes within the programs that we've been building at Oxide, because we're mostly building Rust stuff. And it's been fantastic. And I did, however, and Josh, Patrick, I don't know if you guys have seen this. Josh sent this to Brian earlier. In the earliest days of like Rust ideation, Graydon Hoare has this bug that says, wouldn't it be great to have DTrace probes built into the language? Of course that didn't come to be, not natively. But we've got this USDT crate and are using DTrace probes in all of the components that we're building. And it's been incredibly useful. It has been, it's been huge for us. And the ability to add new probes to this thing, it is so, man, you and Ben did such a good job. Adam, it is so easy to add probes to this thing. I mean, it's really powerful. And you've been using it a ton in like looking at storage performance and I don't know, for understanding the systems, it's been super useful. It's been really useful. And I think that we- I think in particular with Rust, because it's the stack, the symbols are mangled and the deep inlining often, like you don't end up with frames for, like you don't end up with frame pointer frames for a lot of the source visible frames. So like being able to put the USDT probes in with unmangled names is very helpful. That's right. It is very helpful. And I think that that's going to be, I mean, there's a lot of work still to do. And I think a lot of it is around making it, I mean, it is possible. In fact, actually, Adam, we just used this on this really gnarly data corruption problem that we had. That as it turns out was due to a, well, a bug that we had compounded by a disagreement about what correct microprocessor behavior is. I think it's the most generous way to phrase it. But the, and really in order to be able to nail that, use DTrace a lot. It was really fun with Rain Paharia here at Oxide and we're using DTrace to debug it together. And I think she was like, wow, this is amazing. All this stuff you can do, but we really were using your ability to instrument an arbitrary instruction at user land, which we've kind of forgotten about because we so frequently use USAT. And then we're not using USAT, we're kind of using the function entry and return. It's like, no, no, you actually can instrument any instruction in a process. You can even instrument things that aren't instructions if you're not careful. Yeah. Now including the ability to instrument drop tables. But we, that was actually really clutch for us in that problem because Josh said it's like, you do get like really rampant and aggressive inlining. And this is one of these things where it was like, DTrace makes these things possible that are literally impossible. And then, I mean, like once it's possible, you can make it easier to do, but boy, that delta between impossible and possible is a big one as it turns out. Yeah. I guess another like favorite feature that I feel does not get, that was absolutely clutch for us at Joyent, I kind of hope it's never clutch for us at Oxide because it's a little, you know that you're in deep when you need this, is post-mortem tracing. Adam, I'm not sure how frequently or if at all you use this. I've definitely used it, but it's been a minute probably back to the Fishworks days or maybe some of the work I was doing on ZFS after that. But post-mortem tracing is pretty wild. It's like this flight data recorder, this customizable flight data recorder that you dump in and then let your kernel execute until it crashes. And then you pluck it out and you can see the events from that flight data recorder. It's very cool. Yeah. So this is using Colco and Detroit State MDB and it allows you to actually, so you use the ring buffer policy to actually just constantly roll over your buffers as opposed to kind of pulling them out to user land. And then you can instrument a system. And so in particular, we had this nasty, nasty, nasty data corruption problem at Joy on Lockingwood right now, because I want to show us adequate reverence to the gods. Please do not punish me with another one of these, where we, I mean, this was a preexisting bug in the operating system where it would effectively steal pages from underneath you. And so it would incorrectly consolidate pages effectively. OS 1028, as I recall. OS 1028. Yeah. OS 1028 was our internal, you know when you can retain the ticket numbers for the rest of your life with a firmware revision or the OS revision or whatever it is that caused the misery. But yes, OS 1028. And this was absolutely brutal. So Adam, this is one of these things where it's like, you know, you're panicking because like the internal data is corrupt. And you look at the corrupt data and you're like, this is a customer's Apache lock. You're like, okay, time to like. Where did you get that? Be right back. I'm going to throw myself in the traffic. I am actually like, and this time I'm not writing anything on my whiteboard. I'm actually, I think it's just for the best that I just push myself onto the ice floe. I need to be done. Super scary. And we used that to be able to, and it was just kind of happening randomly effectively and being able to just bifurcate the search space by instrumenting the kernel and then leaving this instrumentation running. And then it is actually great when you have this kind of instrumentation running out there. In our case, Detroit Public Cloud, when a system would roll on it, it was good news, not bad news. It's like, all right, we're going to get like more data about this. And ultimately that is what we, we absolutely needed that to crack that case. And it was chilling. And so that's one of those features, I think, Adam, that it's just like not well known and not something you're going to find in any other system. Probably doesn't matter to that many people. Probably doesn't matter that frequently, but when you need it, you absolutely need it. Yeah. No, totally agree. I kind of put speculative tracing also in that bucket, by the way. I love it. Yeah, for sure. Has anyone ever really used that? Yeah. That's become a meme for like the last 15 years, but the feature that Brian wrote to, so you can record data into a speculative buffer and decide later on whether that was an interesting sequence of events and you want to trace it out or a boring sequence of events and you want to toss it. So when you're looking at some very low probability kind of pathology, it lets you not have to postmortem or after the fact, diff through tons and tons of data, but rather get the concise answer like right away. And Adam, I'll tell you, I still use speculative tracing for debugging performance outliers, latency outliers. So where you have like, I want to actually like, I'm going to instrument the beginning of this operation and the end of this operation. And I'm going to instrument some things that I'm very suspicious of in the middle of the operation that may be inducing these P99s. And then if our latency is longer than this, I want to commit that buffer and see if we're hitting this. And it can be very useful to kind of quickly explore one of these hypotheses. Yeah. So yeah, what are some other, Adam, do you have any others? Well, so, I mean, there's, first I'd say like, I think we've been talking a bunch about, you and me and Mike and some of the others, but there's, it's been ported to, we mentioned macOS. I've seen a demo in the back of a dark auditorium on the iPhone. It's on the PlayStation Portable, it's on Linux. There's a Windows port. I don't know if you've played with that at all, but I got excited about the Windows port and kicked the tires on that. And then there are tons of people like Josh and Patrick who were on earlier, or Patrick was on earlier. Josh was still with us. Robert Moustaki. If Chico, who have built like tons onto D-Trace, extended the capabilities, Patrick has fixed a bunch of critical issues. So it's taken a whole village. Yeah, it has. Josh, in particular, you added the JSON action, which I thought was really, you wanna talk about that a second? Yeah, we had an early structured logging thing, bunion, back in the node era, a giant, and we would emit log records that could contain quite a lot of JSON properties, some of them nested. And then we had produced a USDT provider where we would emit all of the log records, even the trace and the debug ones. If the probe was enabled, we would emit those logs. If the probe was enabled, we would emit those log records as probes. And one of the parameters to the probe was the object that contained all of the structured properties from the log and the message and stuff. And we wanted to be able to pick out, in order to do an aggregation in D-Trace, you have to have the string or the number or whatever it is available in the probe context. So you need to be able to pick it apart in the kernel before it eventually makes its way out to user land for post-processing. So I had added a subroutine in the D language to do that with a CSS selector style or miniature JSON XPath sort of thing, where you could name a particular property in a JSON blob string that we'd pulled out of a probe, and it would pick out just that value. So we could pick apart a two kilobyte JSON object and lift out the eight characters or something that we were interested in. Well, and in particular, it means that you can actually put that in a predicate. Right, yes, and aggregate on it. And I think I also added at the time there was no string to number routine because we wanted to be able to pick out, we wanted to be able to take numbers that were really strings and turn them into something that we could quantize, which was handy as well. I think they both went in together. Yeah, and some of the chat is asking about the Oracle port of Linux, which actually is, you know, I know it's off-brand here for me to say anything even vaguely possible with Oracle, but this is actually, the Oracle port is actually good, Adam. I think- Yeah, it got better. I don't remember this, but I tested out, I kicked the tires on the first version. I've sort of a history of this, but kicked the tires on the first version and I was tracing a bunch of stuff and then I couldn't SSH to the box while the tracing was enabled. But it has definitely improved over time. But same thing with, you know, Apple had some problems early where, you know, Apple like didn't want it, didn't want you to be able to de-trace things like iTunes, you know, because of DRM stuff. So a lot of the ports have had some, you know, foibles, but they've gotten ironed out. I feel like you had a customer early on that did not want their software to be visible to de-trace. Yes, we did. I did not deal with that well. I dealt with that. I think everyone after the fact can agree that Brian dealt with that situation poorly. I was surprised. I was surprised. It was not Veritas, it was Reuters actually. And if you are a Reuters customer, you may be like, I knew it. Reuters was not, Reuters does not, Reuters makes financial services software. Reuters does a lot of things. And this is at least back, I'm not sure, I'm sure they've divested themselves of this business, but actually maybe not. But yes, Reuters insisted that we not, that we must disable de-trace for their application or they would not certify on Solaris. And this was immediately after, by the way, us doing a bake-off of Solaris versus Linux, which was actually Spark versus x86. And then to really add insult to injury is it turns out it was unoptimized on Spark and optimized on x86. We really cannot win this one. We can't win even Spark versus x86. We definitely cannot win this. This is unoptimized. It was bad. No, no, we can't recompile it. That's changing the rules. Sorry. I'm like, oh God. And then we, of course, we were like, and by the way, then we showed them de-trace and they were upset about de-trace, which was the first time that that had ever happened. I think, Adam, I don't think that that happened. Yeah, that was early days of de-trace and early days of folks getting upset. I think there was some upset that I hear about from time to time at Apple about it being too transparent perhaps, but they've kept it in, which I'm delighted and a little bit surprised that it's stuck for as long as it has. I feel like you have to turn on. Yeah, yeah, if it disables safety. You have to disable safety. That's right. That's the one. Yeah. And then the other, we had, de-trace got definitely a lot of attention from other folks that either wanted to partner with us or not. And there's this IBM meeting that I feel we should get on the record. This is a legendary IBM meeting that I was not in. Yeah, I mean, this was, you know, I think it was like the IBM tools group, like Rational, was that an IBM product? Oh, Rational Rose. This is like the Rational Rose acquisition. Yeah, so some of these folks come to Building 17, you know, now Facebook Meta, but then Sun, and want to, you ever been in these meetings where you're not really sure what the outcome that anyone has in mind was? So anyway, we were there listening. And the only, the most memorable thing about this meeting was a guy from IBM, you know, they rolled about six or 70, but a guy from IBM, as our colleague Mike was presenting, slowly and obviously is falling asleep and snoring. And Mike and me- And after that snoring. Oh, yeah, like loudly snoring. And then Mike and me doing everything we could not to make eye contact with each other, knowing that we would come completely unglued if we did. And then the program manager in charge on the IBM side, you know, interrupting and saying, hey, Tim, can you wake up John, please? And John waking up- Oh, God, it always falls to me to wake up. This guy's always startled when I wake him up. Getting a poke. He startles, and I swear to God wakes up and shouts, Solaris 9. And Mike and I could not get out of that room fast enough. And just had giggle fits for about 30 minutes after that. So, and unfortunately, I was not in this, this meeting only exists in my mind in your retelling, but it's very vivid. I really feel like I was in the room. I just love the Solaris 9 being out. Oh my God. I don't know what dream he was having, what beautiful dream about the completeness of the SVR for vision, but- Well, and I'm a sleep talker too, so I get always worried. You're definitely like, don't let me go, like, boy, if I drift off in a meeting, just wheel me off the street, would you mind? Yeah. Do us all a favor. Yeah, that would be one of the detrays at 40. At 70. Well, so then, I just want to, I know we've gone super long here and I want to be mindful of time and your time, especially the, any, like, things that we got especially right or especially wrong. I don't know that we actually- You know what? So, I mean, on especially wrong, I don't think especially wrong, but, you know, there were some CVEs here and there, but I do think you either die the hero or live long enough to see the CVEs. So- I'm grateful for those CVEs, actually. Those CVEs were extremely helpful for me because they were eye-opening with respect to C and the integer on safety and safe. That's right, that's right. I feel like we should use Ben. Ben, what was his surname? Ben, the guy that found- Murphy? Murphy, Ben Murphy, that's right. Found the eight integer things or whatever at the time. He was fun to work with. He was, and I think he came to detroits.com 2016, didn't he? I think we had him actually- I think so, yeah. And we, I think I didn't really appreciate how much of that vulnerability, finding those kinds of vulnerabilities is a lot more perspiration. It was not like, he wasn't doing, he was just like banging on the thing over and over and over again in weird ways. I think that we asked him a question about some aspects of, like it seemed like it would be obvious that he would have understood this fully in order to be able to find the problems that he found. He's like, the what now? I don't know, I have no idea what you're talking about. I just found the bugs, I don't know how it works. It's like, that's amazing. He's some kind of CVE locating savant, like, yeah. So there's a bunch of work that we didn't do that I'm grateful of. Like we didn't kind of create a JIT execution or decode. There's a bunch of stuff that like, seemed like obvious next steps that we didn't take out of skepticism or laziness or waiting to see if it was an actual problem. I'm grateful for a lot of those, but I think mostly USDT turned out to be an extremely happy accident where solving Ploxtat turned out to be the gateway to let all languages participate in this statically defined tracing. I feel like that was just total happenstance and very fortunate. Also is enabled probes were a huge breakthrough. Oh yeah, it's enabled probes. This is one where we generated some code to say, well, if the probe's enabled, then slap down a one, otherwise leave it as a zero. So kind of very hacky, but allowed us to do tons of stuff where otherwise prohibitively expensive operations, we wouldn't design the tracing for it, but then allowed it to pull all of that out of lines. That was very fortunate as well. I agree, Brian. But how about for you, any missteps or any ones that you feel like we really nailed? Well, so I think we wrote, I mean, is enabled probes. I definitely, you know, I've always told people like, you know that you, back when we were wanting to patent ideas and I think that like, we're kind of past software patents, but I always tell people that like, if you can't remember where you were when you thought of it or when someone told you about it, it's not patentable because it's not, it was obvious effectively that it's your doppelganger and is enabled probes were not that like, I know exactly where I was when you and I were talking. Okay, you know, my regret on those is that the name sucks and I have never thought of a better name for that thing. And I feel like that means it doesn't suck. Like, yeah, I feel like society is the blame. It's been 20 years and you haven't been able to find a better word. I think it's probably a good word. Fine, nailed it. Yeah, and so, no, I think is enabled probes are amazing. And again, I think that was a great, and again, Adam, I remember the phone conversation in which that one came out. I think it was like, that was, I feel like that was both of us, is that correct? I mean, I don't know, am I overstating? I'm gonna give you, no, no, no. I think if I, I'm gonna take credit for USDT and I remember where I was, which was the People's Republic of China, but I'll give you, in the 2003 Shanghai, the Sun network or whatever. When we were sharing a hotel room, strangely, not to make it weird. Yeah, no, I mean, sure. Out of our own sense of like dutiful thriftiness to our corporate overlords, we were sharing a hotel room. And I just remember you had a, again, I remember your line when there was like, it was just like Shanghai 2003, Shanghai is just exploding. And they had, for a period of time, had the tallest building in the world. And you had that great line. I was like, man, it looks like they had a proposal and they had three different architecture firms, have three different skyscraper proposals. And they're like, you know what? Just build all of them. Yeah. That's what it felt like at the time. Every direction you looked was like, construction cranes everywhere, as far as the eye can see. Totally. Yeah. No, so I remember the, but I also remember when we were grappling with a really inside baseball detroit problem. So one of the things that I did, that we did, I thought was really interesting that the world does not care about is this idea of interface stability on probes. That's right. That's right. We really thought that was going to be a big deal, in part because at Sun- It is a big deal, goddammit. It was a huge deal. No, it's at Sun, because we were running binaries that had been compiled 85 years ago for the Jacobian loom or whatever. It was really important to us to define interface stability. And you're right that like, so we made it so that your programs could articulate their associated stability, fast FBT probes were of lower stability, Syscall probes were more stable, that kind of thing. Well, it's worth, I feel like this is still actually important today. I know that we don't- It is important. It's important to the eight people or whatever, but it is important. Six of whom are here. Well, something that I think- Six of whom are trying to deal with their audio right now. Something I think we need more of, right, is library interfaces into DTrace for to build tools like Lockstat. Totally. Like, but rather than have to like post-process quite so much text to fish things back out, right? Like we could have more typed programmatic access to the swapped out buffers or whatever. And I feel like that at that point, the stability stuff would become extremely critical to like those programs that are trying to run against- Totally. A set of probes and providers and stuff. So a couple of things on the interface stability. One is, so Adam, just like leading up to something we did right, that you may actually, maybe you're even forgetting about this, that we were grappling with how to deal with stability on a probe-by-probe basis. I do remember this, yeah. And it was just thorny. It was thorny and there were like, literally, I mean, this was before PID provider when there were like bajillions of probes, but there were already like tens of thousands of probes that felt extremely unwieldy. And your question slash observation was, maybe we should force the interface stability to be associated with a provider, not the probe. See, I associate that moment with the moment that you and Mike both looked at me and thought, you know what? This kid isn't useless. This kid might have it. I sort of asked what I thought was a sort of, I don't know, maybe this is a good question. And you guys just riffed on it. And I think I barely kept up with where the conversation went from there. I think I have said something important and valuable, but I'm not- Right, I'm gonna go back to sleep. Solaris 9. No, that was a super important observation because then it was like, oh yes, that's how we can go do this. I definitely remember that. And I also remember we had a couple of things like this. It was like, all right, we're gonna do this for now. And then we may, we'll have to go revisit this later. But then we got a bunch of things we thought that we never revisited, like the jetting. I mean, we never revisited it because we didn't really have to. So that was really important. And then I also, I think it also has to be said that the way we went to the architectural committee, architectural review committee, that's, I think when we go, and I know we're long here, but we've got to regale with some quick PSARC tales. This is a, so PSARC was the architectural review committee inside of Sun. And this is where you would kind of sit behind, this kind of council of elders and present the work that you are doing. And PSARC, there were valuable things to PSARC, but PSARC also, it was comprised of folks that whose job was PSARC, which was a real problem. And this is one of the things, I don't know what your take is on this, but I think like when you have people whose job, whose only job is the review of other software, it's really tough to stay, I think, current and relevant. And it's easy to lose that. Totally. I mean, and then the incentive becomes, the only way you add value is by extracting your pound of flesh. Because otherwise you're just rubber stamping everything. Right. And so we did, there was this issue of like, how are you all going to deal with PSARC? You've got this like large thing that you've clearly thought a lot about. And this is, and I think this is really due to Mike. This was kind of a master stroke of getting PSARC. Like, okay, what we're going to do is we're going to split this into multiple cases. And we are going to have the D-Trace case is going to be all of D-Trace except for the providers. And because what we predicted rightly was that everybody was going to want to really talk about how the system was instrumented and not the actual, what we felt was actually in many ways the more important thing from an interface perspective, which is this broader system that's consuming the actual tracing information. So we split this and we had the, all of the providers in a separate case. And I mean, Adam, do you remember this? Like this strategy worked to perfection because what we knew is like, ultimately you want to run out the shot clock with PSARC. That's ultimately what you're trying to do. And because ultimately if you run out of the shot clock, they're going to approve you. So we get to this, like we, and do you remember bringing the D-Trace documentation into PSARC? Will you join? No, I don't. Oh God, it was so great. It was, it was like, I feel it's like one of these moments from like Aaron Brockovich or whatever. You know what I mean? We're like, they're kind of coming in with like this stack of depositions or whatever. So we're brought, like here's our PSARC case. Drop this box filled with manuals on that we'd written on the table. We're dispensing these manuals that have all where we've documented this entire facility that we have done all without PSARC pre-approval. And sure enough, in the discussions, all they want to talk about are the providers. And what we would do just brilliantly, I remember like letting people kind of pontificate for a while and letting them expand on this and be like, okay, well, that's very interesting, but that's actually not in this case. That's in the next case. And I now see that you've used three minutes and 13 seconds on that. Next question. And they kept doing this and of course it was like, ultimately there was too much for them to meaningfully understand and none of them were actually using it themselves. They didn't really appreciate it. And then we get to, and they approve it, which is just, and also we also were encouraging them when they wanted to waste time. And you remember like they wanted to talk about the definition of standard C. Do you remember this? Yes, I do. And in particular, you mean like the header file definition of standard C. Cause like we were sort of like in header files in some cases. So they, I mean, the other brilliant move that Mike did on this case and many others was to ask a question whose answer we did not give a shit about. Yes. It gave them an opportunity to bike shed ad nauseum and then give us an answer that either was obvious on its face and we knew how it was going to go or it's like, fine, I don't care. You tell me. You would think that they would see through this, but no, as it turns out, this is just such an easy kind of con about like if you take someone who's like, has got some predilection of bike shedding, and you put a bike shedable question in front of them, like it's, they're basically going to take the bait, and they basically did, and they spent the entire time. I remember thinking like, they do not understand what we built at all. And it's like, let, let them cook, like let them, they're going, because as soon as like they start feuding among themselves like this is what we need. This is the way you go like from taking a minute off the shot clock to taking like, you know, 35 minutes off the shot clock is by having these, these go at it. So, they, they passed the Detroit case, without so much as a like sentence of discussion on this like massive stuff and in particular, we had made interface stability kind of peace arc interface stability, we had kind of elevated in this case, in a way that we thought was like going to be really controversial but they no one had paid any attention to it. So, then we get to the first provider case, and we get the first provider case, and now they kind of exhausted themselves talking about the way the system is instrumented when they weren't supposed to be talking about it. And in particular, I remember all those provider cases would have the matrix of interface stability for the provider. And they're like, what the hell is this? Like, that is the interface stability of the provider. It's like, okay, we're not, you can't like programmatically define interface stability. It's like, actually, if you go back to the case that you already have, you already have, and there was definitely it was stable so you can't you can't take it back. It was, it was beginning back, it really was, it was just like it did feel like we, we had defeated a piece arc, and we had the dominoes fell like a house of cards. Exactly. It felt like a kind of a kaiser to say moment. Anyway, it was, that was, I'm sorry, Adam, I just, I had to. No, it was great. I think that the interface stability for her provider was great. I think interface stability is, as Josh kind of alluding to one of these things that's really important that people don't understand. Anonymous tracing has been huge. I mean, I just, I love the fact that this is still something that we're, you know, we're, we're still using, and it's still we're still using it still evolving still bringing in new folks still lighting up parts of the system that previously unseen, and boy, how lucky are we to have to bid to been able to participate in something that that has that kind of staying power is, it's really terrific. I mean, I think when, when you, when we were working on it, before we had shipped to any customers, I really thought this was gonna be something that really was relevant only within those four walls that, you know, we were going to use in the kernel group, maybe some folks at Sun we're going to use it. But, and, and that was gonna be worth it. Like, that was gonna be an unquestionable value. But the fact that the customers, you know, got into it, that has been ported, didn't see it coming. And as you say, incredibly grateful that all those things happened. And grateful that honestly, I also have to say grateful to Sun. And honestly, Jonathan Schwartz in particular for open sourcing it. I think if it had gone down with the ship, we wouldn't be using it today. That's what it boils down to. So absolutely. Grateful for that. And I just grateful that we're here. Detroit's a 20 man. It's Who would have thought? Yeah, who would have thought and still using it still in daily use. So yeah. Josh, thank you for joining us. And most welcome for that Hungry Jacks was not just a fever dream that it actually happened. And thank you all for I again really appreciate everyone in the community and look forward to an awesome Detroit.com for 2024. It's gonna be great. All right, Adam, thank you very much. Glad we did this. And I thank you all for joining us and we will we'll see you next time as as Janet says in the chat. Here's here's to 20 more. Thanks, everybody. Thanks. "
  },
  "e9bc524f-d189-40b0-834c-2e27b10da34c": {
   "Title": "The Frontend of the Computer",
   "Description": "\u003cp\u003eBryan and Adam were joined by Justin and David from the Oxide team to talk about their work on the Oxide Console--the frontend to the Oxide computer. The rigor they've brought to all aspects of the frontend--client/server type safety, test automation, a11y--it's astounding!\u003c/p\u003e\u003cp\u003eWe've been hosting a live show weekly on Mondays at 5p for about an hour, and recording them all; here is \u003ca href=\"https://youtu.be/dS7TEfKqQY0\"\u003ethe recording from July 17th, 2023\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn addition to \u003ca href=\"https://mastodon.social/@bcantrill\"\u003eBryan Cantrill\u003c/a\u003e and \u003ca href=\"https://mastodon.social/@ahl\"\u003eAdam Leventhal\u003c/a\u003e, we were joined by Oxide colleagues \u003ca href=\"https://hachyderm.io/@davidcrespo\"\u003eDavid Crespo\u003c/a\u003e, and \u003ca href=\"https://pkm.social/@just_be\"\u003eJustin Bennett\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eSome of the topics we hit on, in the order that we hit them:\u003c/p\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.devtools.fm/\"\u003eJustin's podcast: devtools.fm\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=atAjwA6BycM\"\u003eDavid's talk: Folding Time with Signals in Elm\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://oxide-and-friends.transistor.fm/episodes/get-you-a-state-machine-for-great-good\"\u003eOxide and Friends where we mentioned Elm\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://playwright.dev/\"\u003ePlaywright\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://kentcdodds.com/\"\u003eKent C. Dodds\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/oxidecomputer/dropshot\"\u003eDropshot web framework\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/oxidecomputer/oxide.ts\"\u003eOxide Typescript SDK\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/oxidecomputer/console\"\u003eOxide console repo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.oxide.computer/\"\u003eOxide docs site\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003cp\u003eIf we got something wrong or missed something, please file a PR! Our next show will likely be on Monday at 5p Pacific Time on our Discord server; stay tuned to our Mastodon feeds for details, or \u003ca href=\"https://sesh.fyi/api/calendar/v2/iMdFbuFRupMwuTiwvXswNU.ics\"\u003esubscribe to this calendar\u003c/a\u003e. We'd love to have you join us, as we always love to hear from new speakers!\u003c/p\u003e",
   "Link": "https://share.transistor.fm/s/8460f5be",
   "Filename": "e9bc524f-d189-40b0-834c-2e27b10da34c.mp3",
   "GUID": "e9bc524f-d189-40b0-834c-2e27b10da34c",
   "Published": "Mon, 17 Jul 2023 17:00:00 -0700",
   "Transcript": "Welcome to both of you. Uh, thank you so much for joining us here on on retconning weekly, um so david, I want to actually start with you because uh, you were uh Pretty into a language called elm Adam, you heard of elm Not the mail. I think we actually talked about it on the show at some point. We talked about elm here Yeah, I think so. Okay. I was home the language Speaking of the deep cuts. Yeah. No, I think so elm not the not the mail. No, no, no, not the mailer Because I always think of the mail reader that had a two gigabyte limit that forced me to go to mutt when my mail Larger than two gigabytes. I got that that 31st bet the um So but elm so david you were super in elm and you've got a great story about something you had developed for elm Based on a new feature of the language. Yeah, and can you describe that a little bit because I well It was just a talk that I they that I had. Uh signed up to give at oscon the O'Reilly conference the open source conference, uh, which i'm not sure if they do anymore, but uh in 2016 and uh it was about this feature of of the language so elm was is a is or was it's a uh There's kind of a debate about whether the fact that there hasn't been a commit in two years means it's dead or not but uh it It's a functional language for for writing web uis basically so, you know you would think of your ui as a pure function of the state of the program and um, it had this neat feature called signals, which was a Kind of a stream of data a value that would change over time So like the mouse position would be a signal where it has a value at any given one time, but you can also um, you know accumulate over the Series of values and you would treat it Like you would accumulate over a list of things, you know with a fold. So it was this very Elegant functional programming abstraction applied to ui and it was I think very appealing to people who were into functional programming and So I yeah, I wrote this whole talk just kind of explaining it and it was a neat little intro to functional programming uh Framed around this feature and then the talk was going to be You know mid may and then may 10th There was a blog post called a farewell to functional reactive programming where they were getting rid of signals uh from the language Um, so I that was that was really exciting I had to Rewrite my talk in a week mostly I just kind of crammed it into the middle 30 minutes and gave five minutes at the beginning and end about how uh They were removing this but it's still kind of like that you know hasn't changed that much they more it's more than getting rid of the name and had to kind of explain it but I learned that uh, if you're going to give a talk on something you better watch the mailing list for that thing Just so ridiculous at so many different levels How often I mean I feel like languages are generally for a good reason like careful about Ripping out abstraction like when you introduce abstraction like people are going to build software on it And they may even write talks around the software they built on it And you can't really be casual about ripping that out Uh, but they're like no it's dead. Farewell Farewell to the thing you're about to give a talk on how old was it couldn't be that old It was a couple of years old probably but you know, it was a it started out as like a kind of a research project I think by the creator evan splitsky and Uh, I just posted the the talk and the post announcing removing the feature in the uh in the chat um Yeah, I mean it was still evolving pretty a lot at that time. This was early. This was not The time we are now this was 2016 things were a little bit more fluid in uh web Uh in web world where you know typescript hadn't really become dominant. So I think the value proposition of these non-js compiled to js languages was was uh, Stronger than it is now where you know You have to have a really strong value proposition in order to justify deviating from the thing That's now, you know the mainstream choice, which is typescript and is really good the days of coffee script and many many many other interesting things Yeah, I think even by 2016 the coffee script was already kind of kind of on the way out and it was like okay There's typescript flow elm We're still compiling javascript, but we're not doing this weird Uh pseudo ruby thing is stephen o'grady paying either of you a bounty to mention coffee script here out of curiosity maybe it would be Uh, because I was a uh a copy script malcontent because I think unlike elm I love I think elm is really interesting Because it was and typescript is terrific. I mean, I think typescript Actually, I think typescript is like the it is almost more important than javascript in terms of like typescript the Am I understating the importance just like typescript is a very important development. Am I understating that? Yeah, I I don't know how it I mean, I think if you look at the you know Language rankings on github and stuff. You'll see you'll see it's it's quite high. I'm not sure if it's quite reaching javascript Yeah, but it's a very significant amount of new Web app development definitely is typescript rather than javascript It definitely reaches an important gap because it's like we had a lot of compile to javascript languages in many different ways So, you know things like elm that were grouped more to frameworks. You had things like pure script which were more Functional but definitely harder to sort of get started with you had things that were much looser like coffee script Um, and then, you know, you just had straight Uh javascript compilation of like here. Let me take uh, edith or What five to six that then became babble to you know, make this like language translation as the language was evolving You know so heavily from the sort of es5 to whatever the new generation was so the language was really evolving the type world was kind of slow, but When typescript came together, it was a really interesting alternative to a lot of these things and then you also had flow from facebook, which they just never really got their um They never put as much effort into it because facebook meta has always been You know very internally like this is for us and you can use it but it's our tool And we'll sort of do what we want with it. So um, yeah, and at this point they basically said as much that you know development is going to be internally focused on facebook's needs and They're not really doing open source Stuff with it anymore With flow. Yeah. Yeah, i've heard about flow actually Uh in a while, they were looked like they were it could go either way between In terms of flow or typescript. Yeah. Yep Yeah, you know what's funny is that uh, i'm dave and I were in um In or who's with lars bach when microsoft was announcing typescript in 2012. Yeah, and there was a really interesting and we were so lars bach did the the v8 vm at google And so dave and I were presenting all the work that we had done to lars and and casper lunden What kind of all their bugging work? And the microsoft guy, uh, steve lucco was also coming over there to to have like a closed door session with That we were kind of like literally a fly on the wall for like they kind of didn't ask us to leave and we did Volunteer to leave so we're just like we're just gonna stick around and watch and they were just going at it They were like two cats in a bag um It works. It's kind of like the you know, like neither wanted to cede anything to the others like lars Like why would you do any of this? I'm like, I know why you do it. It's like this seems really seems extraordinarily valuable um, but um, so it was really super interesting and a very very important development because it brought Real. I mean justin as you were saying like I don't think coffee script. I mean it's amazing It's like coffee script is actually like looser than javascript. Like how do you do that? Um, but the uh, I think that typescript was really bringing something very important Which is a lot of rigor and type safety and like types are nice actually in particular to folks, um You know with a certain collection of values building a certain type of software Like, uh, I think there are lots of folks for whom typescript might be overly constraining like the people who choose untyped languages for the rest of the world, but um, you know certainly like If you if you believe in types and think that types are good on the server Like you might think that they're type they're pretty useful on the client as well Well, you got to keep in mind too that like in the early 2000s javascript was a very different language than it was today you know, it's like really in the 2010s When especially when rails was really at its meteoric rise people were using a lot of ruby and are like, okay This makes sense. I can Write some really terse syntax and do a lot of stuff and throw a lot of code Out in the world and I mean coffee script really hit that era when javascript was like Getting out of this very painful stage where it was kind of an awkward incomplete language And they're like, okay, we can kind of see it's starting to move but we want something better And I mean the things that a lot of people use coffee script for was like, oh, I want arrow functions I just want a cleaner way to declare a lambda and yeah, you know small little affordances like that that as soon as you know more you know as soon as like typescript and others came on the scene and you know babble and other things that let you sort of compile to get these later functions then Coffee script was was you know abandoned pretty quickly Yeah, and actually I mean in terms of those those early days So, uh adam and I were developing a web app effectively in addition to when for this storage appliance we're developing Um back it was like immediately post Google maps and it was kind of in the era of ajax. I'm, not sure if the children Children even ajax asynchronous javascript and xml Yeah, I still call them those I still I still call them ajax calls sometimes nice. Oh, nice. That's it That's this is like when we were debugging a problem and adam was looking sorry. Oh, yeah. Thanks. No, feel free. Go ahead No, no. No, I know. Do you want me to stop? No, go ahead. I'm gonna go take a little walk No, no, I like this is I thought it was cute. I did you're asking like about a trap always instruction And i'm that's right. I was I was I was like we're clearly debugging some amd64 code and which I mean I guess it's anachronistic even that I call it that Uh That I I mentioned a ta3 instruction not a trap3 because on spark you had trap always and I had spark on the brain It just it there's nothing wrong with that It's ajax calls like you're you're among friends who are behind this one. That's right. That's right Uh, we we sound like uh, we're just we're just venerating you adam that's all we're doing That's right It is remarkable now that I've been i've been reading a bit more about history of sun And the fact that we didn't get strong-armed into building that front end in like some sort of java applet Which would have been garbage, but it's sort of remarkable that no one tried to make that happen Definitely no one tried to make that happen. Yeah, we were definitely and we were the justin this is the era of like where this is like django and jquery and The fact that we were doing things like on the dom you would think we were writing it in assembly like on the dom directly It's like it's just like I mean their function calls seem like I mean, it's not like yes on the dom directly but the uh That world was very primitive justin's you're mentioning and we're in a much much much more advanced world And I think it's part of the reason why I've been I don't know that when we see the demos that that you all have And the tooling that you're using is just like jaw-dropping. I mean, it is really really amazing Yeah, I mean the tooling in particular is outstanding Yeah, so I mean The things that we can do are not that different But I think it's more just sort of the confidence that we have When we make changes that we haven't broken something Is the is really the big difference for me at least you know in the experience of developing it Compared to how it used to be for me. I would say that they're like the mature the the engineering maturity of the whole space has Really really advanced incredibly rapidly Um, so there's a lot of stuff to paper over here but I mean even a few years ago bundling was still a thing that was Hard and cumbersome and we had a lot of configuration and we're trying to figure out how you know Essentially a software distribution problem of hey, you know, we have these uh this sort of delivery payload mechanisms that we're using in a way that we weren't really intended to be used for and we're trying to figure out how to optimize this and you know, just a lot of tooling churn over the years and I think the thing that gets me excited today about the tools that we're using is like it's so Simple. It's like I I can you know, I can teach someone who is new to programming On a production code base like hey, look at this thing. Oh, yeah. Here's this configuration and That wasn't the case, you know, even a few years ago where it's like, all right sit down Give me the rest of your afternoon and i'll explain what this webpack config does and and this is no shade on webpack It was like doing very important things, but I think just talking about the overall maturity of the tooling. It's it's changed a lot So could you talk a little bit more about what about that bundling problem? Because I think this is this is a part of the space that I never really understood when it was at its height And I guess now that it's been obviated. It's a relief and I never have to go under but I think What was the the kind of the bundling challenge and problem and how has that been solved with the tooling? Yeah, I mean so javascript Uh single threaded, you know has an event loop. So you're parsing top to bottom sort of executing as you go Uh, and it's like putting asynchronous work on the event loop to sort of be popped off and ran over time and the big thing is You know in the early days when you're like building something with jquery You've got You know one file one javascript file that you're including You know, you're making call and like including all of jquery and then you've just got this big one blob Well, you know developing software and big blobs is is not easy I mean, you know, maybe you might like working on a 20 000 line Uh c file, but it's not uh, it's not a fun time for everybody for sure Just to be clear. I did not pay just to say that very very That felt extremely specific. Hey, I you know not throwing shade at anybody Adam is DMing you like getting a wc minus l on details.com Yeah uh, I mean just the idea that we needed modularity and so pretty quickly things like uh And this is especially true as node was coming on the scene common.js came about and we're like, okay Well, we have these modules and we need to figure out these relatively hard problems of as soon as you have dependencies and you have modules then you know they have like There's a dependency chain here There's a tree structure in your in your module graph and you have to figure out, you know How to organize those and and you know really hard problems like okay when my client starts when they start executing There are you know, maybe these 20 modules that they need to render something on the page, but we have 200 other modules with Other functionality that they will need as they browse the experience, but they don't need right now And if we delivered all of this up front, it's going to reduce the performance And You know, you have all of these things to sort of think about like how do we break down the code? How do we ship only what needs to run? And you know many other problems crespo definitely feel free to hop in here but that Is inherently like it's a compiler's problem, you know, it's it's non-trivial and then just figuring out things like, you know What dependencies do we have what and because you have to think you also may depend on you know Some css or some other assets some web fonts or you know, whatever you could have a lot of dependencies And uh, it's just a non non-trivial problem Especially when you consider that, you know when javascript was designed it wasn't designed with like modules in mind It's just like hey, here's this like block of code execute this, please Yeah, that's a great account of of what happened the only thing I would add is that What happens over time You know the the complexity of the tooling is a consequence of the they're not being consensus about what we need to do They're you know, if you think about just like the number of web apps that there are Tens of thousands millions and you know, everybody was working on kind of their own custom configuration of of these bundler tools because there wasn't a consensus on what a web app would need and you really need to go through that process of trying all these things before the Consensus, you know core functionality can really shake out and then that enables these like really elegant tools like vete which is what we use to to build the console in local dev and also in production It's a rconfig file for that's like a hundred lines or something and most of that a lot of that is just like little utility Functions that we've written and so are you saying veep veet or veet? Oh, yeah, I should spell it It's a it's a the pronunciation is french. It's a v-i-t V-e-e-t Well, it looks like vite so but yeah, it's pronounced veet um And it uses so, you know, and it uses other tools under the hood. It's you know, kind of a fancy wrapper for es build and rollup, uh, but the fact that there's sort of consensus on how web apps work means that our config file can be very small because we don't actually have to make All these choices because that's just the way because the way that they do it by default is actually exactly what we want And so you don't have to do all this really fiddly, um configuration Um, and that's that's that's kind of what I think about when I when I think about the maturity of the tooling It's about you know, this process of shaking out Uh, what what is actually needed and and what's not? well in getting consensus I think it's a really interesting point about getting consensus about what the problems are and then getting consensus that like okay These elements of the foundation are the kind of the right elements Um, I mean this is i'm also going to kind of show my vintage here Um browser compatibility was such a big deal back in the day and it feels like I mean, obviously the number of browsers has been greatly reduced which helps uh But it feels like that's just am I wrong that that's not as much of a problem as it was? I mean, it feels like things are compatibility Basically, not a problem anymore. Yeah, that's amazing. It's great But it's another one of these things where like we need consensus on what that substrate was So, I mean I think people will probably say wait a second. Wait a second For many people not a problem There definitely are people who are who are writing internal apps for companies that are that probably still have people on ie though You know if microsoft says stop using ie then hopefully there aren't very many companies like using ie8 to run their internal apps except when their internal apps require ie8 because they won't run any other browser But well ie is definitely eol. So don't use ie, please I mean, this is one of those things though. It is worth noting that There are still browser compatibility issues. So it's like opera is a very popular browser in certain parts of the world So it like depends on your audience um So yeah By and large you can hit a lot of the same groups with not doing a whole lot of work This is good and bad though because mostly this is the rise of chromium and it's just like eating the world which I feel conflicted about but Yeah In the chat real quick about um, you know It's not necessarily consensus but I would say that each tool in the space represents a consensus and that doesn't necessarily mean that there's a global consensus, but You have this sort of convergence and you have these this plurality of of uh, consensuses Yeah, and I mean you got like at least some Agreement on abstractions that are productive for some a significant enough subset to get to start getting some commonality where you can know that like okay, I can go build this next level of tooling and know that I don't have to solve like for 18 different ways of doing it beneath me. I do think that that's important. I mean, you wanna, and there's always a tension with that, and Justin, maybe this is where you're getting at with your kind of own complicated feelings about Chromium, that we also, we don't necessarily want monocultures, and Chromium probably is creating a monoculture there. Could you elaborate on some of your conflicted feelings? Yeah, I mean, you know, in one hand, Chromium is just amazing engineering. You really have to hand it to them. Like V8, the JavaScript execution engine that ships with Chromium, is just mind-bogglingly good. Like, they have done so much work there. And then, you know, to the whole execution engine, it's like, it's great. And there's a proliferation of tools, you know, if you think about Electron. So Electron sort of built off of the legacy of Chromium. Electron spun out of the Atom team, the Atom editor. There's a lot of, you know, power that's come with that. But at the same time, this monoculture is a challenge. It's hard. So for example, this is a minor gripe, but the Chrome team is sort of like pushing this browser extension manifest v3 thing that just infuriates me to no end, that, you know, they're trying to make this argument about performance and security that I can only half believe, because the project itself is of course backed by Google. So it's like, hey, yeah, we make money on advertisers. We're gonna make technical decisions that makes it harder to build ad blockers. You know, I don't know, just stuff like that. It's like, you know, as with ever the world, it's less the technical stuff itself and more of the messy reality of life. There's politics, there's money on the line, and I don't know. Interesting, but fortunately it's all open source. I mean, do you feel that this is, I mean, I think ultimately this is the legacy of Firefox and Mozilla was to get us to a world in which our browsers are broadly open source. I assume that that's still true. That's still true? Is that not true? I mean, yeah, it's broadly true, but you're talking about very, very, very complex engineering systems, right? And it takes a ton of capital. So the thing is, these things being open source benefits the corporations by giving people the opportunity to come contribute, but they are so capital intensive to develop them and to provide all the features and not to, I mean, I like JavaScript the language, but it's continuing to evolve very quickly and all the browsers have to keep up with that and CSS is evolving and all these things are happening and it's making these really complex environments. We expect a lot out of the web and we're continuing to expect more and that does not make this an easier engineering effort. So really, if you don't have a massive amount of capital to deploy to these things, you're not gonna be able to compete in any real way. And I think that that really gets around this whole notion of like, oh yeah, open source is gonna save us. And it's like, in this case, I don't think it's going to. It was just a real tension, right? Between that kind of the consensus that you need to build the tooling that you want to advance it and then avoiding that monoculture, especially when you've got this kind of questionable, potentially perverse incentive around blocking ads, for example, and kind of blocking ad blocking. So yeah, that seems like, and you mentioned VHS, I mean, I actually think that this may be a bit of a hot take or a controversial opinion. I think V8, I think it was an extremely important software project because I think there's a certain degree that people had given up on the performance of JavaScript and V8 showed folks that it could actually be high performing and I think it redefined what's possible. So I actually think V8 should get an CM System Software Award. Adam, put me down. But I'm all for that. I think that's a great take. I think not, because not only is that applicable to JavaScript, but I think people took that lesson and brought it to other languages. I mean, directly, you look at Hack and PHP, that was born from the observation from, in part, Keith's observation, that they could do the same thing as V8 was doing and I think that's been carried other places. So I think it took, it helped virtual machines of that sort over a very significant hump that had sort of slowed the proliferation and let people see what they could be. Totally. Very, very important project and has cast a very long shadow. So Justin, then, what is your take? I think the other thing that's just, and I think Adam, I can speak for both of us, has blown us away is, David, your use of Playwright has just been amazing. That thing is crazy. Is that as good as it looks? I mean, it looks amazing. Yeah, it's really great. I mean, I've definitely tried various end-to-end testing tools. I should say what Playwright is in answering this. So Playwright is a tool from Microsoft that lets you do browser testing. So you script the browser to essentially do what you would do when you click around the site. Every time you make a PR or you merge domain, you wanna, you have these things in mind are sort of like, what are the key flows that I wanna make sure that they haven't broken? And as, pretty early on in the web console project, I realized like, okay, I definitely need to just write tests for those things instead of going and clicking around myself. And these kinds of tools have a pretty long history. I mean, when I started, I started as a web dev in 2012, and I think we had something that was, you know, Selenium-based at that point. Right, I was just gonna- Kind of similar, the basic idea is really similar, but somehow, I don't know if it's like you were, we were talking about the browsers being standardized and not, you know, maybe the problem of making these things reliable is not as hard anymore. Not to discount, I'm sure, whatever is the immense engineering effort to make these things good. But I just, we just find that these tests are not that flaky. They, you know, figuring out how to select things is, was originally, was really tough. Like you would have CSS classes everywhere and you would just be selecting things by, you know, the button class or like something that wasn't really relevant to what it was on the page. And now there's different conventions around that that I think make it a little bit more reliable. But just overall, the experience of writing these tests is not that of like a massive slog. It really, it's not very hard once you get used to it. And we have, I don't know, 60 or 70 or something of these in the web console. And they are actually our primary tests. We have unit tests for things that are, you know, more pure functions like helpers and stuff. But for the most part, these full end-to-end tests in the browser running in Firefox, Chrome, Safari, those are our primary tests for the console. And they give us quite a bit of confidence that we are not messing things up when we make a change. Did I ever tell you all the story of how I got involved in open source for the first time? No. It's related. So I was working for this company called Adran. They are sort of a Cisco competitor, make switches and routers and many other things. I'm sort of minimizing their business there. But so we were using this Python testing framework, automated testing framework called Robot Framework. It was by a Finnish developer. I think he'd done it. He'd like developed it for his PhD, but we were using that to drive the console to, you know, we'd have a rack of like switches and routers or whatever in different configurations and, you know, drive a BGP test or something. But we also wanted to test the web UI for this. So there was a Selenium binding for Robot Framework and it did not work as well as I'd wanted. And the previous developer had sort of abandoned the project. So I got involved in maintaining a Selenium binding for this Python testing framework. And that was my first major contribution to open source. I helped maintain that for like a year. Yeah, so it comes full circle. Yeah, right, exactly. That was your entree into it, because this has historically been one of these things that has been just rocky is how do you actually automate testing of a user interface, of something that is going to ultimately require a human being moving a mouse and so on. And because you mentioned with like Selenium, you do these kind of, do it with CSS. And I just got to imagine that like you end up with the test itself being brittle or potentially brittle. Was that? Absolutely. Yeah, and the convention around that has changed quite a bit. So I think this is something I learned from a guy named Kent C. Dodds, who is a, I think he mostly teaches web dev online now. He actually worked at PayPal when I was working at PayPal. But the trick is to use what's called the accessible name of things, which is essentially like the text that's on the screen. But for things that don't have displayable text, there's also text that a screen reader would show. Oh, interesting. So using the ARIA role, I forgot what ARIA stands for, but essentially it's like the type of element that it is, but it's not the same thing as like the tag, the HTML tag. So you'll select a button with name, next or something. And so essentially what you do is you select by what is visible on screen. So you really just put yourself in the mindset of a user using the page instead of the sort of developer mindset of like, what are the classes that I need to select for? And like, if you need to select a button in a dialogue, you can be like, give me the button that says next that is inside of the dialogue, as opposed to the button that says next that it's on this other part of the page. And so by doing that, we can actually really exercise the accessibility of the app as well. I was just gonna say that is really, yeah. You get it for free by testing this way. And it makes the test much less brittle because you don't have this mystery about like, what am I selecting by? What am I changing? Like when you change the text, you're gonna mess up your selector, but that's not surprising because you know that you changed the text, whereas changing CSS classes might be a much more surprising thing for a test to break. Yeah, that is really, that's great. You've solved this other really thorny, important problem that we had Matt Campbell on, whatever that was, 15 years ago on the podcast. I don't know how long we've been doing this. That's right, approximately that, yeah. All right, so this is something near and dear to my heart. A little caveat here is definitely these, like using ARIA roles and using accessible names is important and it helps part of the validation, but building an accessible web application is a whole nother thing. I mean, it's a completely different design paradigm. Like how you have to think about how someone navigates through a web UI with a keyboard and a screen reader is very, very different. So when I joined, I had done some like early work on just like making sure that that experience was good. It's also a very hard thing to validate because it's different than saying, oh, do these things have accessible labels? That's fine, but it doesn't mean that you can navigate it well. So we have actually put in some real work into making sure that that is a decent experience. I would say it's not perfect. We still have a ways to go, but I would definitely emphasize that we've put a lot more work into this than a lot of folks do out of the gate. It has been something that early on, I've got a Windows machine at home. I use a screen reader just to test it out. Just like want to make sure, hey, can we get around, doing little things like having a button that's hidden. So when you back tab or tab to the first element, it pops down this button. It's like, would you like to go to the main content? So you don't have to tab through every single menu item and header or whatever to get to your VPC configuration or whatever you're trying to get to. Like those kinds of things are important and they take special care. It takes rigor. It takes a different mindset. So it's not something that you can ever just get for free, but definitely using accessible, like area roles and stuff is helpful for that, for sure. Yeah, and something that I love about it is that, to me, it really just makes the app better for sighted users as well. The structure is the clarity that you get in thinking about the structure of your application and being able to use these patterns in the ARIA guidelines about what a list box, scrolling picker is supposed to look like, things like that. It really gives you a lot of clarity in how these things are just supposed to work for everybody. So it's been great. This is the first project I worked on where we've put this much attention into it. That is awesome. I've learned a ton. Well, so in another kind of challenge that you both had to deal with is, which I imagine is not that uncommon in the front-end world, where you're trying to build something in the back-end. Maybe it's extremely common, where the back-end doesn't yet implement that. In our case, the back-end weighs 3,000 pounds and we hadn't even pulled the whole thing together until we needed hardware and software. What were some of the challenges there about having to build a console for a thing that didn't yet exist? Because I feel like you've taken a bunch of different approaches at different levels to allow you to develop the console in time for the software. Yeah, I mean, the main thing to me was avoiding building things the wrong way, because there's this immense weight of the past that weighs on you, even though technically you might get to a point where you've gone the wrong way and you want to scrap it, but you feel like you can't. So to me, building the wrong thing was always worse than building nothing. So I always erred very, very strongly on the side of building less and really being confident that it was something that we would need, and avoiding coupling and things that would make it harder to rip certain bits out when it turned out that the back-end went a different way. Eventually, the back-end caught up with us and we were able to build, basically, as fast as we could, more and more pages in the console. But in a web app, there are certain things you need and you want to get the architecture right. And so that was what we focused on in the early time. I mean, when I started, it was March 2021, and I don't think the API was giving us that much to work with until probably the summer or maybe in the fall, around when Justin started. And then we started to have quite a bit more to work with, and Justin and I ended up doing... Part of the solution there was also Justin and I working on the API itself to help it catch up with what we were doing in the console. I was going to say, yeah, I mean, a big part of it is you just building the API and building the back-end rather than waiting for it. But then there's tons of stuff you also did to separate front-end development from even having a live back-end, and that's been incredibly impressive. Yeah, so we... This is actually another thing I learned from Kent C. Dodds. So this is a lot of shout-outs to Kent C. Dodds on this episode. Using a mock API to avoid having to even run the real back-end during development. So I think if you had told me to try this a few years ago, I would have just thought that's just a ridiculous amount of work, and you have this enormous risk of your mocks deviating from the real thing. That's always a big problem with mocks. But the real key to making it work is that we have the open API spec from the real API, and that tells us what our request bodies look like and our response bodies look like, and it even gives us some validation stuff, like this number has to be in this range. By writing tooling that keeps our mock server in conformity with that open API spec, that really, really, that mostly solves the problem. I mean, because mostly what you are worried about when in terms of correctness is just like the shapes of the requests and responses. So by writing tooling that essentially makes that a problem of if the API changes, you just get a type error in TypeScript and you fix it, you mostly eliminate that problem of your mocks getting out of date. So we've used that really extensively. That's actually what we do most of our development with, and we just wrote kind of this fake functionality inside of that typed wrapper that implements the API in a really minimal way, and we write most of our code and test against that. That is really cool. Maybe like a technical journey here. So this all starts at Nexus, our control plane. So we're using Dropshot, which is a HTTP library or a sort of a REST API library. Adam, describe this better for me. Yeah, it's a HTTP framework for like building simple web servers. There you go. And it was one of the first things we built at Oxide. Because I think you and Dave did that. To be clear, Dave did like 90% of the work. I just showed up to scoop up 50% of the glory on it. But one of the key insights that I did bring there was I really believe in interface description languages and OpenAPI is flawed and broken, but I think it's the best thing that we have. And I think the approach that Dropshot takes is using OpenAPI as an output. So like you write all the code and then that is true. Whereas a lot of other frameworks, it's easier to get divergence between the code and the spec. And here, as Justin is alluding to, we build the server, it outputs OpenAPI, and we know that that is actually what the server is going to do. Yeah. I mean, that was a bit of a big bet, Adam, in terms of like the, just in the importance of the primacy of OpenAPI, despite its flaws, was, and I mean, this is a domain that you've got a ton of experience. This is something that you had spent a lot of time going into different APIs and how are these things used. And this is something that, I mean, that you came in feeling pretty certain about, and it was really, it was the right call. This is something that has paid a lot of dividends for us. Yeah, it's been great. I'm really glad the way it worked out. And, you know, stuff like Dropshot is opinionated about how we do pagination, where you can have APIs where you find five different ways of doing pagination because it's built by five different people, so why not? But some of the stuff that like Justin and David have done, where we now get type checking across the client-server boundary is just beautiful. I just love it. Yeah, I mean, it has been like life-changing as a client dev to have that confidence that you're, you know, when the API changes, you know it because you get type errors. Yeah, I mean, having the spec that's true to the implementation because it's driven by the implementation has been really a key to our success. And the whole reason, I think one of the large reasons that we can maintain such a small team working on console. So we open source Oxide TS, which is the repo today, which has our code generation stuff in it. Shout out to that. Maybe when I was stop tweeting. Yeah, so. From that OpenAPI spec, we generate a lot of things. We of course generate like an SDK that we can use to work with the API itself, but also this mock server framework that we have. This actually generates the wrapper, the implementation wrapper for those mock functions. It's like, okay, what is this function? What does it take? What does it expect to return? We even have validators to ensure that the things that we're passing in and the things that we're returning from this mock server are in the exact shape that we expect them to be in and they are the right format. So our mock server gives us a lot of stuff out of the box because we generate like 90% of what we need. And the rest of it is just, okay, let's do a little bit of logic to say, hey, yeah, here's this list of VPCs. If we create a new VPC, stuff it in this list. Stuff like that where the logic that we have in the mock servers is really minimal, which makes that maintaining that sort of, which is a duplicate implementation of, you know, what our control plane is doing to some degree, like a very lighter version of it. It makes that relatively trivial. And we have correctness guarantees that we can sort of rely on in a lot of ways. It's like, maybe the logic isn't correct, but for a lot of the testing and development we do in console that's totally fine. I just want to echo something you said, Justin, which was when the API changes, we get like a compile error in the front end. And I feel like that is great. And not everyone has that same philosophy, which I just don't understand. Or like, I don't understand living in a world where you just press on in the face of incompatibility. But I think that that is very common. I mean, I can imagine there just being so many incompatibilities that you could never hope to fix them all. And then just knowing about one more is just like a fly buzzing around your head and you just don't want to know about it. That's right. Yeah, maybe it's the benefit of a clean sheet of paper here where you got to build the right thing from scratch. I think that that is a big part of it. I mean, because I just think of like, where mostly when the API changes, it's like, oh, actually what I'd actually love to have is an undefined property exception, like deep in my stack. Like that's how I'd love to actually do it. I mean, I just feel that the, and also Adam, having generating the open API from the implementation and Justin, you talking about like how, that's actually really important because it means that the API spec actually is correct. And I feel that's, I mean, I got to believe that's not always the case. I got it. I just, on that point, I have brought this up a lot of times in open API circles and I am a huge- Wait, are you going to 11th all me right now? I have never- No, no, no, no, no. I am viewed like a heretic. Like this, like that idea that you would let people writing code define the spec implicitly is a type of like specification heresy because there's this really, really strongly held belief. And it's not that surprising that people writing a spec, right, like people whose output is this, you know, open API spec of the sort that you might find like a JSON schema spec believe that the spec writers should be in charge, not the implementation authors or those responsible for implementation, but- Which is wild because the spec is not human writable, really. Well, there's that too. It's very hard to read and write. Yes. So I would just say this is, I think that this is the only sane way to live, but there are people who really, really, very strongly disagree with this. And in fact, feel like it is critical to have this separation, this almost check balance of powers, if you will, where you have one person writing the spec and one person writing the implementation and it's the spec that is true. And the thing that often gets lost is anything validating that the two have even a, you know, bearing passing resemblance of each other. Totally. Talk about like Conway's law and the ramifications thereof. I mean, yeah, that's kind of crazy to me because it's like, ultimately, like what you, I mean, Dave, what you and Justin want is like, I need to know what the implementation is actually doing. Like, and if the specification doesn't actually match the implementation to a degree, it's like, sorry, the implementation wins. The implementation's actually the thing that, you know, it's the implementation. Yeah, and you get these APIs out there where, you know, I bumped into this years ago with the Slack API a bunch, where what the open API document was out of date and wrong. And you'd file issues and they'd be like, oh yeah, we are going to do a new drop of that. And to your point about Conway's law, it was a different team. It was the DevRel team responsible for maintaining that, which was different than the folks building the service. So it's not that surprising that it fell on the floor. Anyway, I'm done with my rant, at least for the moment. I mean, so that points at something that we do in the mock server as well, which is like what Justin was describing, is we actually generate quite a bit of the implementation as well, because, you know, obviously you can't generate the part where it, you know, inserts the thing into the mock database, but you can generate the validation, right? The same thing that the API does automatically when you, you know, tell it what type the request body is, it's going to validate using SERTI or JSON schema, on the way in that the thing actually matches that type. We also do, we'll do that because we have the shape and even some extra validation stuff, like, you know, number ranges. We have that. And so what we do is we generate validators with this library called Zod that lets you take an object and you essentially try to parse the object with a shape. And if it fails, it fails. So, you know, we can 400 in the mock server for every endpoint, it has its parser up front. That part is generated. So we get that for free. And it's really only that little bit in the middle where it's like, you know, if I'm retrieving a list of projects, like return the list of projects, you know, we have this little core of the implementation, but keeping that part as small as possible, I think is in line with what you're saying about, you know, the implementation is really the truth there. So that's why we want to generate as much as we can and then define the boundary really, really carefully so that the part that we have to define manually is very easy to do. But, you know, you can generate that part. Yeah, that is really cool. And I think, and again, just to kind of, you'd made this point earlier, but we've done, I mean, we've done a remarkable amount with a very small team. This is true, I feel like across the board at Oxide, but it is, every bit is true in this domain as it is in every domain at Oxide. We've had a very small number of people doing an enormous amount of work, in part because you've been able to rely on tooling and automation and generation of logic and code. That's really pretty extraordinary. And Dave, can you also describe what you demoed on most recently on Friday with respect to this kind of static? Yeah. That was crazy. Yeah, what's really neat about this mock server, it's implemented with this thing called mock service workers. So this is a little bit confusing because it's kind of backwards. So service workers are an API in the browser that lets you essentially run a separate application in the end page. But it runs, I think, in a separate thread from like the main thread of the page. And you can have something that actually acts as a server and intercepts requests that your client sends. So when you use mock service workers, the mock there is because you're doing that in node, because you're using, you know, it was originally invented for writing like essentially unit tests on the server side where you don't need to spin up a browser. In our case, we're pretty much always just using it in the browser. So because this mock API is able to run in a service worker, we can deploy the actual front end, the, you know, the JavaScript and HTML as static assets along with the mock server implementation also as static assets. And it all just runs in your browser. So what I demoed on Friday was we're able to get preview deploys of every commit in our repo, which with, you know, functioning app, but it's deployed as a static site because it's the front end is static and the backend is also a static file that the JavaScript that runs in your browser. This is so wild. This is as, so you can test every front end commit, every feature, every bug fix, as though you were talking to this enormous, your 32 CPU, seven foot tall, 15 KW rack and get sort of a similar or close enough user experience, which is just awesome. And it relies on being very judicious about, you know, the fidelity of the mock, right? Because you can have too, you know, too flimsy of a mock and you're not really testing the real thing, but too complicated of a mock and you are constantly bogged down fixing it when it starts to diverge. So we give a lot of attention to getting that balance exactly right so that we're not feeling, you know, trapped by all this code that we have. And like, you know, like I was saying, generating as much of it as possible. So we don't even have to make that decision. That's just the way it works and we know that it matches the real thing. And can you describe what you did in terms of like pulling some fraction of data from the actual API? And it was like half mock. I know I'm sounding like this, I'm recounting a dream. Oh, that's a different one. So that's a different demo. Right, yeah. Yeah, yeah, yeah. So that's actually not using the mock API just because the way our front end is implemented is just like a pure web app that runs in the browser. It doesn't really care what the API is. So if we proxy requests through to, you know, the real API running on the rack, you can run the app in sort of like local dev mode in your browser where, you know, you save a file and it changes live. But the API you're talking to is like the actual API of the rack. So, you know, there's a lot of situations where the data that you're testing against, it's really hard to get realistic mock data. So for example, metrics is really hard to come up with stuff that really covers the way that real metrics look. And other things, you know, obviously your mocks are never gonna really cover every real world case. So when we run into bugs in the rack, we can actually point our local server. We can do local dev, but just pointing at the real API. And, you know, it's just a different command to start it up. You know, it's a one-liner difference when you start up the dev server, whether you're pointing at the mock API or a locally running copy of Nexus, which we also do, or, you know, a remote API running on the rack. Yeah, I just thought that was amazing. And I just, I love these kind of two together because they're kind of two different points on the spectrum where it's like, look, we can, some stuff is fully mockable and it's great. And we can like, and then for, oh, by the way, for the stuff that's fully mockable, like why don't you have this in your Vercel preview of the PR, which Adam, as you said, it's just like mind bending that you're actually like, I'm like interacting with a poll, like how am I, what? You can actually pull up the static site and you're interacting with the PR as part of like looking at it or what have you. And then for the, as you say, for the stuff that, then there's certain stuff that's like just not as amenable to mocking or what have you. And then you can actually get this hybrid deployment where you're in the developer mode of pulling actual data from the real API. I mean, I just love all the different points here in terms of all kind of pointing to how do we develop this thing quickly and robustly, which is what you, and I got to say, like also just the actual artifact is so crazy snappy. It is so great. Yeah, we'll have to link a video or some kind of demo. Yeah, points are really mutually reinforcing because the entire reason that we can draw that clean line between the front end and the back end is because of that open API spec. It really all comes down to that clean, clearly, formally computer readably defined boundary being the line between the client and the server. And that doesn't mean, it's funny because one way that happens is like a Conway's law thing where your front end devs are one group and your backend devs are another group. And you'll define the line really, really strongly just because those people don't talk to each other. But in our case, that's not really true. We do, we work on both sides of the boundary, but so it's like we gave ourselves a really clean boundary to then still work on both sides of. And that's been really, really useful. Yeah, I think it's really important to talk about the API philosophy here. The real thing is, or the product philosophy, the real thing is the API is the product, right? That's the closest thing to the rack. That is the realist sense of the word. And whether you're working console, whether you're working in a CLI, whether you're working in any of the SDKs, it should all feel internally congruent. It should feel like the same product. And we've put a lot of work into making sure that that is true in the case, right? So it's like, oh, well, I hit the API and I can kind of see how this is structured and the language it uses and where it's like organized and you'll find that mirrored everywhere. So something with console is it's not a rich application so much as it is a sort of reformatted view of the API. And we do it to make it user-friendly and do what we can to help. But like, I mean, console does so little by design, both for maintainability and for the fact that like we, any serious functionality that we handle, we want to push that down into the API. And we've had some tensions internally where we think about like, oh, maybe we can do that just client-side. And this is a thing that I feel really strongly about is like if we expose product functionality, by and large, where it makes sense, we have to make trade-offs sometimes, but as much as we can, we try to make that a rich API versus we'll just do it client-side. Yeah, well, I mean, the API is the product, which is absolutely true. Bullseye, not something you would expect to hear from a computer company, I think. Not one that's not AWS, I guess, right? Yeah, right, yeah, exactly. And in fact, I mean, I think whatever you say, AWS is obviously complicated. I feel like I can stand by that bold claim, but- So AWS, we're putting AWS and World War II on equal footing there, or is that like- No, World War II was stressful. I guess AWS is stressful too. Okay, well, I think they're both stressful and complicated. Okay, sorry, what's next? There we go, let's split the baby, right? But the philosophy of everything is an API, it's like, yeah, that's spot on, right? You nailed it. Well, and then just all that stems from that, like why that is so important, because I mean, everything that you can do in the console, you can also do in the CLI, you can also do directly in the API, and then we can also, I just love all the things that have been done, though, like, oh, do you want to do this thing? Do you want to do this on the CLI? Here's the CLI indication for this. Do you want to talk about also the overlap? I feel like documentation also comes in here as well, in terms of like how we kind of document the product, I mean, say the API is the product, and kind of how the API, that we end up with a locus for documentation as well. Who's that pointed to? Yes, violence. I don't know. Well, one thing is we do all of our documentation in line in the code, and this is another one of like drop shots, opinionated takes, and this is maybe a bit of a cynical one, but what I've observed, and I don't think this takes, you know, there's too deep of an insight, is like that people writing code aren't good at remembering to update the documentation, especially if it's all the way in some other file that you have to remember to open. All the way, right. It's not right, I'd be here in this other window, totally, yeah, absolutely. Right, or maybe it's not, yeah, exactly. It's like in Markdown or ASCII doc, but I'm writing some Rust code, so we just take the Rust docs, and we make that the documentation, and it's bitten us in some ways, and sometimes you can sort of forget that you're writing user-facing documentation, and start yammering about internal implementation details, rather than explaining to the user what the API is, but it is sort of up there, you know, it's right there in your face, and when you generate the docs, you see it in the JSON description and so forth, so try to put the, you know, the things that we, the developers of the API, have to say about the API as close to it as possible, so that whether you're the one, right, changing the code, or often if you're the code reviewer who's taking a fresh look and saying, hey, the thing above says it goes left, but the code below says it goes right, makes it a lot easier to keep those things in sync, or a lot harder for them to fall out of sync, and then that gets propagated with, in work that David and Justin have done, you know, everywhere, including in our docs website. And David's dropped the link into the, to docs.docs.computer, but you can allow anyone to see that documentation, which is all effectively generated from the implementation ultimately. Yeah, and the CLI docs as well, I believe. That's right. We'd be remiss in our duties here if we also didn't give a shout out to Ben and Eugene, our designers, who have touched every part of our product, be it docs or console, you know, industrial design, our internal RFD site, literally everything. Even- The marketing site that everyone loves. Yeah, Wicket. Those stickers, your Oxygen Friends stickers. Yeah, so they're amazing, and they do everything, which, yeah, so props to them for sure. Well, and props, and also just like their disposition is very much a cross-disciplinary, versatile disposition. I mean, part of what I love about just everyone is like everyone's, everyone views the whole thing as part of their job. So it's like we don't, because I think that these Conway law, Conway's law problems are real problems. And they, the problem is they show seams to the user. Like you can see like where these, I feel like with so many Google products, you're like, oh, I get it. Rifle organizations, you two hate one of those guts. I gotcha. Yeah, can you please, I just hope, can we just make sure that we don't all kill one another at the same time? And so we can at least have one of these products. But we, so I think it's really important that you got that, and I think, yeah, Justin, your point, Ben and Eugene have done a great job of stitching in across the console and the API and the docs and so on. It's been really terrific. Yeah, we don't have enough people to build silos. That's it. That's right. That's it. That is actually, I mean, that is it. And like, boy, if there's, there's a real value to that about not having, because when you do have enough people to grow silos, like the silos become a bit of a self-fulfilling prophecy and it can be really problematic. And then it becomes really difficult to actually develop something that feels coherent. And boy, this is what you all have really pulled off. It's just been remarkable. David, there's a question in the chat about, can folks see a look at like, what does this thing actually look like? This, I didn't have. Yeah, so let me post, I'll post a screenshot. And then when we open source the console, anybody will be able to just npm install and npm run dev and run it locally with the mock API. And, you know, you'll be able to actually link, you know, get a link to our live demo that I was talking about as well. So you'll be able to see it. pretty easily. That is great, and I'm very excited to get this out there, to get this open, so people will be able to see exactly all the stuff that you've built, and the tooling, and how we're doing it. And I think that there's some real lessons there for other folks that are not building a computer company. But in particular, the API primacy, I think, is really interesting. And Adam, just in hindsight, that was a really important dimension to what we were... an important thrust was that kind of API centrism, which, again, we knew, we doubted, but boy, seeing... I think it is surprising how many ramifications there are of it. Yeah, I'm really pleased with how that worked out. And you're right, not wholly surprising, but I think it would have been easy at the time, in those early days, to say... because we had a hand-crafted YAML file of the API. This is how we got early feedback on the API. And it might have been easy to say, okay, well, that's the OpenAPI spec. Now let's go build the implementation against that. And it would have been sort of fraught in all the ways that building these APIs can be fraught. So it's worked out very nicely. And we're even generating the CLI, by and large, from that API spec. So it's been pretty neat. That is really neat. And yeah, it would have been easy. That's what I mean. It would have been easy. You can see how companies drift into this, where those things are out of sync. And then all of these knock-on effects of having them out of sync. It's like, well, now we actually can't use it to auto-generate the client-side validation. And easy to see, because when you start writing it, you're like, well, either we say we start from the spec and we try to conform to it, or more often you just say, we don't really need a spec for the first two dozen lines of code we write. We don't have a client. The client is curl. We're not writing the TypeScript. So can we all chill out a little bit? But then as soon as you do that, it's really hard to go back and stuff the genie back into the bottle on these things. It becomes a heroic undertaking to document it and then maintain it and so forth. So much easier, as we've alluded to, from a clean sheet of paper. It really is. And, boy, it's just amazing to see what you all built. Great job, Dave and Justin. Really terrific, terrific stuff. Thanks. Well, thank you very much. David, I know you've got a negotiated truce with a four-year-old. Yeah, correct. We all know that four-year-olds don't honor their treaties. That's right. And they really dictate the schedule of the show. We've learned over the years. So we'll let you get back to it with a huge thanks and our apologies for cutting into your family time. No problem. Adam, good luck resolving your labor dispute with the camp. Just good luck. I'm so sorry. I know you want this podcast to go on forever, so you don't actually have to go back. No, I had a visitor halfway through who wanted to get on the show but made him get a Discord account just like everybody else. There you go. He's like, what do you mean? I can't be known as a numeral anymore. Well, thank you very much. Terrific discussion and really, really interesting stuff. And again, great work. Really exciting to see. Thanks for having us. All right. Thanks, everyone. See you next time. "
  },
  "ea4ba815-9e0b-41b0-8bee-17b213c37cf0": {
   "Title": "Mr. Nagle's Wild Ride",
   "Description": "\u003cp\u003eAdam and the Oxide Friends follow Bryan on Mr. Nagle's Wild Ride as he investigates performance anomalies. Bryan used all manner of tool from gnuplot to DTrace-inspired bpftrace! If you have ever or plan to ever care about the latency of network-borne protocols, you won't want to miss this!\u003c/p\u003e\u003cp\u003eWe've been hosting a live show weekly on Mondays at 5p for about an hour, and recording them all; here is \u003ca href=\"https://youtu.be/mqvVmYhclAg\"\u003ethe recording from October 2nd, 2023\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn addition to \u003ca href=\"https://mastodon.social/@bcantrill\"\u003eBryan Cantrill\u003c/a\u003e and \u003ca href=\"https://mastodon.social/@ahl\"\u003eAdam Leventhal\u003c/a\u003e, speakers included \u003ca href=\"https://mastodon.social/@aka_pugs\"\u003eTom Lyon\u003c/a\u003e, \u003ca href=\"https://mastodon.social/@raggi@rag.pub\"\u003eJames Tucker\u003c/a\u003e, \u003ca href=\"https://xantronix.social/@eliza\"\u003eEliza Weisman\u003c/a\u003e, and \u003ca href=\"https://discuss.systems/@dan\"\u003eDan Ports\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eSome of the topics we hit on, in the order that we hit them:\u003c/p\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.brendangregg.com/blog/2009-06-12/latency-art-x-marks-the-spot.html\"\u003eLatency Art: X marks the spot\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.brendangregg.com/blog/2009-03-12/latency-art-rainbow-pterodactyl.html\"\u003eLatency Art: Rainbow Pterodactyl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://news.ycombinator.com/item?id=9048947\"\u003eNagle on Nagle\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/danrkports/status/1161770217665486848\"\u003eDan's tweet on Nagle\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/mycoliza/status/1698871132026524032\"\u003eEliza's tweet on Nagle\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTCP_NODELAY or TCP? No, delay!\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=_0QMKFzW9fw\"\u003eDr. Angela Collier on violin plots\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePRs needed!\u003c/li\u003e\n\u003c/ul\u003e\u003cp\u003eIf we got something wrong or missed something, please file a PR! Our next show will likely be on Monday at 5p Pacific Time on our Discord server; stay tuned to our Mastodon feeds for details, or \u003ca href=\"https://sesh.fyi/api/calendar/v2/iMdFbuFRupMwuTiwvXswNU.ics\"\u003esubscribe to this calendar\u003c/a\u003e. We'd love to have you join us, as we always love to hear from new speakers!\u003c/p\u003e",
   "Link": "https://share.transistor.fm/s/c1aabbfd",
   "Filename": "ea4ba815-9e0b-41b0-8bee-17b213c37cf0.mp3",
   "GUID": "ea4ba815-9e0b-41b0-8bee-17b213c37cf0",
   "Published": "Mon, 02 Oct 2023 17:00:00 -0700",
   "Transcript": "Hello brian Hello, adam. How you doing? Good. Well, how are you sir? Good a couple of weeks off just Remembering how to do all this stuff Yeah, yeah, we had a bit of a break in there. Sorry to uh, sorry folks who have become regulars we had a Our all oxide beat up which that was a ton of fun. That was great, man. It was great. Um, And in particular, uh, there are a couple of colleagues who i'd only seen directly Uh head on, you know boxed in a window and I got distracted by two of them. I had a hard time recognize them Recognize them because you had just never seen like the back. I've never seen him in person Yeah, i've never seen them five degrees off of center And it's also like you can't go up to someone that say, you know, I found your head shape to be surprising I mean you're or whatever it is or I like you are You are of much more average stature than I thought or you are I mean There's basically no way to enter into that without being Very weird agreed very weird not necessarily inappropriate more like weird Yeah, and I think like once you go into that there's no way out of it, too it's like why are you even here just like just From afar, you know, yeah, I think that's right Of course now it's like wait a minute who are they talking clearly Is it like is it my head shape? Am I weirdly tall or short? I think we need to emphasize that It's it's everyone and no one There you go. Sure. I mean, I mean you can say that but there are a couple i'm thinking of No, I would say that we do work with remarkably tall people in some cases alarmingly tall In some we would prefer tall people but not all tall and it's you know, it's all over that. I also feel like um Am I the only one doing the following i'm about this is I i'm about to tell myself here the Maybe I am the only one doing this and I shouldn't say this the I feel that a uh a video conference ism that I have i'm not able to get myself to stop doing Is the over in overly emphatic thumbs up next to my cheek in a conversation? I do uh And everybody you do that you did that in person now I I for sure have done that in person, huh? I and I've done that in person in like not only in context But I think in when you're talking to a colleague that you're used to seeing over You know over a video conference. It's like that you just that that thumb's ready to go that that Emphatic cheerful thumbs up next to my cheekbone so you can see it and know that i'm agreeing with you For this video guy That that's better than like feeling the need to reach for a keyboard to have some sidebar conversation While other people are talking You know, that's another thing that's kind of interesting. Yeah about like the Uh, the the sidebar conversation ends up just becoming an important part of a meeting. Yeah totally But that's not why we're here not why we're here exactly as excited as we are as excited as we are Yeah, I had this this tweet today that um about oh man It's how how did we get here? Can we queue? How do you get it? Where's this? Yeah, so this odyssey starts. Well, I would like to say so This is not the first time As I was kind of reflecting back on debugging this problem This is not the first time that this problem has inflicted itself upon me, which is to say The lack of tcp no delay being set on a connection Resulting in the very unfortunate combination of delayed acts and nagel's algorithm I'll kind of get into all that here I think it might be the first time that I myself have debugged it all the way to root cause I feel like somewhere along there in other cases I have either not been able to debug it to root cause or someone else has said like wait a minute Have we checked this thing over here? and as a result it has not made the This one seared my brain in a way that some of those other those prior ones did not I mean I can imagine that the data for a lot of these kinds of pathologies looks similar Right, like if once you've seen it once you start to look for it in the data and you see these hiccups You're like, wait a minute Yeah, you know I feel that like that That's a good question because I feel like the data for this one looks slightly different I mean when i've seen this thing in other presentations has actually been even harder And this was not easy to debug at all. No really Really a mess So yeah, should we talk about kind of how we got here? Yeah. Yeah. So what what were you debugging? um, so uh The um, I was debugging. Um, we we had some io performance that was we had some latency outliers that were um bad Mm-hmm and um, we were trying to understand why We had seen this in Um, we've seen this both on customer sites and then fortunately we had seen a very simple or symptomatic presentation kind of here Uh at oxide we've got our own rack that we that we run our own workloads on so Uh, we had kind of seen in both places But you know, it always makes me nervous because you're you're kind of reproducing symptoms and we you know, I both know That uh reproducing symptoms is not necessarily the same as reproducing annoying problem and so one of the things that I Feel that I went to I did go to earlier in this problem that I don't regret Um is something that i've learned the hard way over the years, which is when looking at io pathologies in particular It is really important to visualize every single io. Do you know what I mean? Yeah, totally You mean as opposed to aggregating them into buckets or looking at one minute or 30 second samples or whatever. Yes that you can see Patterns and we saw this even back in the day in fishworks. We saw some really Wild patterns when we because we had this analytics facility that we had added to the nas box that we were building uh detroit space analytics facility, which was really interesting and One of the things that we did there that was I think pretty novel at the time was the ability to get heat maps for io latency and Then we would look at those over time and there were some like wild patterns in there Do you remember we got to dig up like brendan's blog? Yeah, I was particularly I was thinking. Oh, I was thinking of the pterodactyl the pterodactyl Yeah, the um, and it's the here i've got uh, i've got the link here. I can drop it in the discord um, this is uh latency art x marks the spot and I mean this was I feel uh, just wild. Let's see. I'm one of my alts here is going to drop this into the discord um So, uh, hopefully that that uh, yeah. Yeah I've got the the icy lake there I've got a good discord is going. No, there we go. Good. Um the So and you look just by looking at latency of operation over time so you're putting basically time on the x-axis and latency in some way shape or form on the y-axis and Uh in this case, we are this is actually a heat map showing you kind of the frequency at different latencies Um, which is easier than you mean You can't look at kind of a line graph of thousands of events happening in a second Uh, you've got to be able to aggregate them up a little bit and and kind of quantize them a bit And we would just see like absolutely crazy things. Um, and we've got um We will I think he's got a link there to yeah That first link is the latency art is to that thing that we called rainbow pterodactyl um And you would just see these like super subtle effects by looking at latency over time and I had definitely when uh I mean as you know adam I Will I either control time and space in my mind or more likely the gods like to taunt me And whenever there's like a an extended period of time where whenever I would give a presentation The gods would pick the most ironic problem to send my way immediately after that presentation so um In particular it's like oh, did you just give a presentation on debugging in production? Let us now send you a nightmare to debug in production Now Let us now fill Ourselves with mirth by sending you. Oh, did you oh, i'm sorry. Did you just give a presentation? on on pathologies and firmware Let us now send you a new pathology and firmware that would that that delights us as we would so In in particular I gave this presentation called zebras all the way down on Uh latency outliers deep in in the firmware stack in particular and then got absolutely Nuked like the next moment began because the gods like saw my presentation immediately sent this my way of this Really gnarly io performance issue that we only saw in one data center. Um, and it was it It took me too long to actually just go visualize every io and when I did visualize every io what I saw were really clear bands Um, and in particular in this particular case, I would see this very clear band of of effectively, uh ios all being delayed until they were all clearly released from the firmware And there was clearly a 2700 millisecond timeout somewhere in that firmware Um, and this is when I learned that toshiba made hard drives. I actually didn't know that toshiba made Oh my god, this is where i'm like I get to the point where i'm like Is this like a drive firmware issue? I mean I had kind of been debugging this assuming that it was a Postgres issue and or zfs issue because definitely both those two were definitely both on the scene and just like going at it like a like Wet cats in a bag. So it's like reasonable to assume it was one of those two uh but then as I was looking at the actual io latency coming off the drives i'm like maybe this is an actual like Drive firmware issue and i'm like do we have this? Do we have like a different version? Of hgst firmware in this data center than we do in other data centers and I pulled the drive information i'm like Toshiba makes hard drives There was just this moment of like what? There you go when it's actually kind of part of like the joker oxide origin story a little bit because Um that I guess it makes oxide of being a super villain But this is when I realized that dell would just routinely stuff toshiba drives You like you can't spec your drive with dell and so the and toshiba these are two and a half inch drives at the time and basically we learned that uh, Toshiba supplies effectively exclusively bought by dell it just and they're shoved into unsuspecting customers Anyway, we discovered a lot of firmware issues. Um, but I one of the things in that whole thing that I regretted is I really should have visualized each io earlier, which I thought we learned at fishworks and I just kind of like forgotten You're great. It's you're right. That's a great point. I think we learned it even like with dtrace early days just in the tty just in the terminal where Effects that are hard to express numerically or at least hard for me to express numerically become really clear Just to the eye where you see patterns that are hard to infer computationally Totally totally especially you like looking at especially if you've got kind of like light banding, you know they can be You can see that visually really quickly that you can't necessarily see it can be much harder to quantify. Yeah visualizing data is a big one so we I wanted to go do this and in particular in this case It's like a little bit challenging because you know in the the oxide rack It's like what is actually presented to the user Is is a vm. We've got a vm. You've got virtual storage virtual network and Really wanted to understand it from the guests perspective of like let's start there what is the guest seeing in terms of latency outliers and Uh, this is where I did actually end up using bpf trace for the first time in earnest Couldn't believe it. I couldn't believe it when you when you told me you're going there very impressed well, I mean Because like I need it, you're right. I mean, it's sure absolutely it's it's an ubuntu, you know 2204 guest and Like and actually, you know, this is one of those where it's like I actually don't want to be vindicated right now I actually want bpf I think you do not need to be right about anything right now, and I would just love it to be delightful Um, uh, should we explain what bpf trace is? I realize that you know friends of the show may be familiar sure not sure so Uh, we talked at length And then more and then more length about dtrace a couple weeks ago And and and yet not enough We and yet it turns out there was still more like we didn't even talk about data visualization or fishworks analytics or whatever I'm realizing did you have like that after that episode or like oh man, there's so much stuff we didn't talk about like How can you just need that in an episode that's two hours long jerk? No, my family was like, oh you're still here. So no, I didn't have time to think about what I had I had forgotten to mention um but uh the but so ebpf extended berkeley packet filter Is this you have facility in linux that has been extended even farther and and uh does dynamic tracing In linux, is that a overly friendly way of saying it? I don't know if I mean when in particular it has this facility called, uh bcc um There were people that would complain about the usability of dtrace Um, and to those people I sentenced them to go for their crimes. They they must go use bcc I don't something like the complaints about usability about dtrace kind of went away after bcc. Yeah And I also say that like ebpf and bcc and these other things actually can do lots lots more um, you know in particular dtrace intentionally puts a lot of constraints on what you can do Using dtrace in terms of the safety of the system mutability of the system and That in some cases is layered on after the fact in ebpf and sometimes not So, you know different design centers different goals Totally Absolutely different design centers different goals. I mean it is a packet filter. Is that kind of how it started? So it's like definitely different design centers different goals for sure and Uh usability not one of those calls And so bpf trace was built as a much more dtrace like Front end on bcc. I I do give them credit for uh, it is frustrating to me when people kind of Uh get very inspired by dtrace, but don't mention dtrace It's like if you're very inspired dtrace is very inspired by awk I would like to think that we have mentioned awk extensively that we have not we are not pretending that we are Not borrowing good abstractions from awk. Um and bpf trace to their defense In their defense, uh, it's pretty clear that like hey, this is dtrace inspired great Again, I just want this thing to work like really that sounds terrific but it unfortunately is It's not it's not really great. And in particular it's just you know what it is. It's very revealing I think we'd said this last time too the the just the Origins are different and when we design dtrace it is really designed to help you comprehend the system and we used it a lot to debug the system and It shows because like the stuff that we built On the one hand like the stuff that we built all those things you need on the other hand The the kind of the constraints that we had are the constraints that we ourselves felt as we were solving this problem So the absolute safety constraint for sure. Um, you cannot instrument the systems that we talked about that last time um, but a one that we did not talk about because I guess I didn't think it needed to be belabored, but apparently it does Any dynamic instrumentation facility that can go into an arbitrarily fragile context Is going to have modes in which it can drop data where you want to go like I want to instrument the system in this way. It's like sorry. We actually don't have a buffer to put it in And uh, we can't allocate memory in this context. So like we're gonna have to drop this data And that's just like I feel like that's an intractable part of the problem Yeah, I mean I think you or you need to somehow pause the system, right? It's it's one or the other you can't, uh, you know, if you don't have a place to put it You gotta choose you don't place to put it. You gotta choose and One of the things about detroit is that we did extremely early because this is what I wanted we wanted out of our debugging facility is It's obviously you are going to have these situations when you have them They always need to be very apparent to the person using the software So you've got you cannot drop data silently and you have to indicate I have dropped data and this is why I have dropped data and It is because i'm out of dynamic variable space or i'm out of buffer space or i'm out of aggregation space Or I I have run out of one of these things that needs to be statically sized a priori I have I have run into one of those limits and here's the limit i've run into and here's the way by the way That you can you can tune the system such that I am less likely to have this happen That to me is like super important. I mean, that's like of course the first thing we did And I think incredibly important. I think one mistake Maybe we made is we then said these are all the things that happened, but I don't know Here's here's what I think is the data. So I don't know Make of it what you will even though it's probably all wrong Well, and that's it. It's like when you are You know, once you've had certain kinds of drops you've effectively lost data integrity as if you think of this Even though it's not torn complete when you're writing a t-tray script There is like data integrity that's involved and in particular if you want to trace every io you want to know the latency of every Io You're going to have to record some datum in an exhaust in an auxiliary space when that io starts And when that io is done You're going to have to compare the timestamp when this thing started assuming that the system doesn't keep this timestamp on its own Which it doesn't in linux and it doesn't on most other systems as well It's like they don't we don't keep the timestamp because we don't necessarily need to all the time so you want dynamic instrumentation for that and This is really basic, but then it becomes really really important That if I cannot execute one end of that I need to be aware of that because i've lost coherence because it means i'm going to see the end of an io That I never saw the start of Or i'm going to see the start of an io that I never see the end of Yeah, and then your sample will have some fraction of the data, but you have no idea of the bias associated with that that's right, and this is one of these things it's like You know, this is not like a detrace interface issue This is this is kind of deeper than that and I just spend a lot of time just beating my head against so In bpf trace, do you you get data drops without notification? Yes, don't make me do this. Yeah. Okay. Sorry. I'm sorry that happened to you Are you? You know, it's not natural. You don't I mean as opposed to as opposed to me just to be clear. That's right That's right. And In this is one of these things that like also The other thing that is super challenging about this particular issue is i'm also i'm I'm instrumenting Linux, I'm instrumenting the guest. And when you have one of these things, honestly, my first thought, especially coming out of dTrace, is my first thought is, I am not instrumenting the system correctly. There's a code path where an I.O. can complete that I'm not instrumenting, which is kind of a reasonable first assumption. And you spend a lot of time, and it's kind of impossible to know. In fact, a part of me still doesn't totally know. The only reason I was able to convince myself that that's not what's happening is because when I was able to write much simpler things, I was able to prove to myself that, no, every single I.O. is going through these two code paths. This code path at the start, this code path at the end. And we, in fact, are silently dropping a bunch of these on the floor. Which is just, whatever. I have a very country mouse question. Obviously, in Elumos, Helios, Solaris, there's the I.O. start and I.O. done probes. We've taken the time to annotate where in the code I.Os occur. Why are we doing this? Yes, go ahead. Do it. Also true? Is it true in BPA? You know... I'm just asking. Asking for, I guess, myself in the future. It could be worse. It is... I'm already bargaining here. Stockholm Syndrome, for sure. Obviously, no. I just want this thing to work. Even worse than that, in some cases, the name of the routine is named one way. And in different versions, you're basically using their equivalent of FPT. Which also, by the way, doesn't allow you to instrument on function return. Function boundary tracing as long as the boundary is the entry? As long as the boundary is the entry. Their defense, they don't call it FPT. Okay, fair enough. You've got to instrument a bunch of things that don't necessarily exist. I'm sorry, we're here. We'll get to Nagel eventually. The other thing that is super frustrating is what is the coherence of the instrumentation with respect to the start of the instrumentation? In particular, if you instrument the same point of instrumentation multiple times in D-Trace, which is to say you effectively have multiple clauses that are instrumenting that same point, we guarantee that you're not... We don't just start executing the third clause. You know what I mean? And it's very clear that there's much more of a rolling start to BCC. You mean like if you have three probes or three statements attached to the same probe, the third might execute absent the first and second or whatever? Yeah. In D-Trace, we have this important belief that we're going to get everything set up and everything is ready to go and then there's one master switch that we're just like, now go. I think you can say with confidence that there's not the same design approach to BCC. We're just like, oh, throw some instrumentation at it, throw some more instrumentation at it, throw some more instrumentation at it. So as a result, your probe or your entire BPF trace program or some enabling, you've got an enabling, it'll start firing, then another enabling will start firing, then another enabling will start firing. That clearly happens over the span of hundreds of microseconds or milliseconds or tens of milliseconds. So I don't know. Good luck, everybody. Good luck. I mean, that does sound brutal. It's hard. It's just one of these things where, and I think that this is kind of my A as I was kind of digging into the issues, and a place I don't even want to be. I don't even want to be right about this right now. I just want to use this thing. I'm really just trying to debug some other problem. The BPF trace is not the problem right now. Two questions on this hero's journey. First, why did you think about measuring it from the perspective of the other side, from Propolis, from our... No, no, pardon me, from Propolis, from the VMM, from the other side of the virtual machine boundary. So the reason I really wanted... So a customer was seeing this and really wanted... And I also just felt like this is something that is going to happen that we would expect to happen over time where what you actually have is kind of the customer's viewpoint. The VM's viewpoint of networking performance, IO performance, what have you. And I just felt like this was kind of an important perspective to get because that's ultimately the perspective that matters to the VM is what I am seeing. And I think it's kind of an important ground truth to go establish. And a great muscle mass for us to build as Oxide to understand how those virtual machines are operating. Yeah, exactly. And I stand by that. I think it was good. So we put together this BPF trace script. There's a lot of... Okay, sorry to do this. The begin and end probes also don't work the way you would expect. Oh, okay. The begin and end probes, they try to get super clever and they actually install a user-level probe on themselves on the BPF trace process. But then BPF trace has been stripped by a bunch of distros. So if you run BPF trace minus end begin or whatever, you get an error message that just makes absolutely no sense. It's something like, I'm missing a begin trigger. This sounds like a you problem. That's exciting. I digress. So you got some data. Got some data and accepted that this data was going to be somewhat lossy. Which is frustrating to accept, but whatever. And then did some post-processing. Actually, it was great to do post-processing of that then in Rust. For something like this where I'm post-processing data, I would say that Shell and AWK has been the thing I've reached for over my career, even in the last couple of years. And increasingly I'm reaching to Rust for these kinds of things that are much quicker, almost throwaway work. But it's just much faster to do it in Rust. I feel like, agreed, and it's much faster because I don't have to do it twice. I think my usual workflow is to fuck it up once with Python or AWK or Bash or whatever and maybe spend a bunch of time figuring out why. Whereas I feel like I get it right the first time more often with Rust. Then when you want to go build something that's a little more sophisticated, in particular, I do have this issue of after an I.O. has been outstanding for some number, 500 milliseconds, we're going to treat that as like, whoops, thanks BPF trace. That's a drop, effectively. And I just want to discard that data point. And that's kind of a pain in the ass. Obviously you can do it in AWK and Shell, but it gets grottier and grottier. So we get this data and visualize the data. And in particular, there is some real clear banding at 100 milliseconds. And I'm like, what is this? And in particular, and I can kind of break this up by different kinds of operations. We're seeing this in particular on flush operations. This is our EBS-like service, our virtual storage service. And it is presenting a virtual volume, a virtual disk to the guest. And that guest can do a read operation or write operation. But we tell the guest that, hey, by the way, there is effectively non-volatile caching, or there's volatile caching. You cannot assume when you do a write to me, it's not necessarily synchronous. You could do a flush if you want. So this is the way it is. In particular, these flush operations would have this banding at 100 milliseconds. But it wasn't all of them. It wasn't even necessarily many of them. And we finally got a workload that had a third of them were at these 100 millisecond outliers. The problem is when everyone else captured it like four milliseconds. 100 milliseconds is a long time. That's right. That outlier has an outsized effect for sure. An outlier has an outsized effect. I'm a little bit embarrassed about how long it took. It was just a very long day at that point. But going through, I wanted to debug this from first principles. Fortunately, at this point, we've got this same behavior. We've now got reproduced inside an oxide rack. So now I've got the ability to actually instrument the system from an arbitrary point, not just from the guest. So we can begin to see, where do we see these 100 millisecond outliers? My assumption was that there was something happening in Crucible in the storage layer that was inducing these outliers. Knowing how this ends, you don't have to tell me that. The other thing I would say is that we knew we didn't see it on the bench. We knew we didn't see it. If the network is out of the picture, we knew we didn't see it. Like when we were doing loop back tests. That's right. You're writing everything in triplicate. So when all three of those targets are on the same compute slide, we knew we weren't seeing it. It was only when we were going over the network we were seeing these outliers. You're just trying to chew through every layer. This is actually where USDT was huge, Adam. It's cool. Because Alan Hansen has been leading up the storage efforts and has done a great job of adding USDT probes to Crucible. Crucible is loaded with USDT probes. In particular, there are identifiers that are relevant to Crucible that are in each of these operations. So you have these job identifiers, which was actually really important to begin to correlate activity that you're seeing on one side versus activity you're seeing on the other side. Cool. Got it. So you can look on both client and server effectively with that same ID? Both client and server. But it's actually really hard to get all the stuff to line up. It's a bit of a time problem. And relying on wall time stamp and then the divergence of system clocks and you're trying to roughly true this up to figure out where it's coming from. What I was seeing is when we would see these outliers and we were seeing them frequently enough that I could really begin to understand when they were really cliffy at 100 milliseconds. Once we've seen this, I can stop gathering data or I can look at what I've got. And the next step was like, my assumption at that point was there must be some reason why this isn't going out on the wire on the remote end. Which it turns out was very close but also very far away so early that it was going out on the wire. And I went back to the client end of this and spent a bunch of time and a bunch of detracing vacations looking at, and this is where the TCP and IP probes were very helpful in correlating that with probes at the Cisco layer and the USG. So you can begin to get this whole picture of what's going on. And what you actually see is that we're just not getting an acknowledgement for this. We sent a flush request and then we don't see an acknowledgement for 100 milliseconds, ultimately is what it boils down to. And we now know that the flush definitely occurred. You can see the flush happening at the other end. It's happening super promptly. It's happening in whatever it was, three to six milliseconds. And you can see it being sent, but it's not actually showing up. And at that point you're like, oh, wait a minute. And so Adam, have you had to deal with... I mean, I think this is a little unfair to John Nagel. Have you... No, after spending some time looking, I don't think I've been victim to Nagel's algorithm in the past, as far as I know. Yeah, so... I know it's a privilege statement, I realize. It is. I'm glad you realized that. The idea is that, hey, if I have got a small packet and I am already waiting to hear from an ACK back from the other side, I'm waiting to hear from the other side. That might be an indicator that I am flooding the network with these really small packets. So instead of doing that, let's just hang out a little bit here. Let's leave this small packet here until we hear that ACK back from the other side. And by the way, folks that are... Sorry, I've not been looking at the request to speak. Folks have been asking. If folks have got expertise on this, and I'm wrong, by the way, feel free to jump up here. Especially if folks have actually debugged this. I definitely want to hear from folks. This is the idea of Nagel's algorithm. We want to be kind to the network, which is actually a very... I think I saw Tom Lyon here earlier. I feel like the great internet collapse of 1986. Have we talked about that here? I don't think so. Is Tom here? I'm not sure if Tom can talk about the great internet collapse. Basically, the internet as designed was going to collapse because it was of congestion. The internet was dying of congestion. So Tom, can you take us back to the glory days of 1986 and the great internet? Do I have the history even approximately correct? I'm not entirely sure. I remember Sun was not actually connected to the internet for quite a while. We were watching from the sidelines as a lot of this stuff was happening. Oh, interesting. Nagel's algorithm was definitely important, but nowhere near as important as Van Jacobson's work, which I think is more like 88. Right. Just to be clear, Nagel's algorithm is somewhat unrelated to or is unrelated to the great internet collapse. This is where, Adam, you mentioned the sliding window algorithm. Tom? The exponential back off if you lose a bracket, that kind of thing. That's what really saved the internet. That saved the internet. Correct me if I'm wrong, Tom, but there was this kind of idea that we actually needed to consider the network as part of this kind of design criteria of the broader system. You cannot allow individual actors to act greedily because they will destroy the network. Plus the endpoints were very different. There were lots of terminal aggregators, milking machines, and so you'd get one character in from a milking machine. No, what's the milking? We're not talking about that. A whole bunch of serial lines coming into an ethernet port. I don't know where it got that name. That's great. You get a character in on a terminal line and what are you going to do with it? Wrap it up in a packet and send it. I don't like Michael's algorithm because you just get a shit ton of small packets and you have no idea when more characters are coming in from the serial lines. Right. That's because you're constantly sending. For a user, in the worst case, the latency bubble that you're going to see is until you get that ACK from the other side, which doesn't feel like it's that long. Yeah, so what? Wait until you've heard an ACK. Just settle down, and the fact that you haven't heard an ACK back indicates that we may be suffering from congestion, which feels reasonable. We're talking about 100 milliseconds or 40 milliseconds on Nagel's algorithm, I think. It's not that noticeable for us people. Plus it was in the days when you're doing stuff over the wide area. It's a miracle things work at all. You're not going to complain too much about the response. The fact that you get an ACK at all is a miracle, right? Right. Yeah. All of this might not be something we're talking about today had it not been for work that was happening in parallel on delayed ACKs. At this same moment, and this is coming from, by the way, a hacker in his post from John Nagel. I don't think we're the only ones that talk about getting Nagel'd. Do other people talk about getting Nagel'd? If I'm John Nagel, I'm like, dude, this kind of sucks that my name is in pathology. Although, Adam, thank you. I really admire your discretion to not reveal that actually getting cancelled is something that you and everyone except for me refers to. I'm sure that it's like, God, I got cancelled again today. Well, you talk about getting Leventhal'd. Very different meanings of what that means, by the way. That's true. I think I'll have got something that you can talk about. Actually. There we go. Next time I see him. You know, the delayed act thing, it manifests itself more in the modern age because people expect TCP to do lots of things that it wasn't really expected to do in the past. So like request response protocols were not really part of the design point. Hmm. Yeah. Yeah, this was a really important point that you're making. And when you say not, so a request response protocol being like, I am going to, I am effectively, this is a remote procedure call effectively that I'm making. This is a, like, I am calling you. And by the way, until you reply to me, I have got nothing to do. And that's really, as you say, that is not really the design point, but it is the way we, there's a bunch of stuff on the network that actually does rely on that kind of behavior. Right. But these days, you know, you're much better off finding a library so you don't have to do your own socket programming because there's way too many flags to mess up. There are way too many flags to mess up. And so, but in particular, that the delayed acts became, that became the default behavior where you had a delayed act is saying, well, it's like, you know, I just received this. And instead of acknowledging it, let me just see if I receive something else. And let me just save the network a little bit. Let me see if I can actually bundle some acts together. And, you know, kind of- And it's also, Brian, I'm going to reply with some data. And so I don't need to send an act because if I'm just going to reply anyway, I can just bundle it along for the ride. Yeah, and I kind of feel this is like a, like a teenager approach to like taking out the trash or whatever. Like, let's just, you know what I mean? It feels like- Right, do I have to do it now? But what if we just wait, won't it like solve itself? Won't it just solve itself? Yeah, and maybe like, maybe later I'll be kind of like walking to a friend's house and I can like bring the trash out of that and like save myself a trip. Makes sense. Right, makes total sense. So- And remember the number of packets was really important because until the late nineties, all routing was done entirely in software. So you had all this per packet overhead. Yeah, interesting. So you really, every packet is sacred, Tom, in this world. Like we really, if you've got the opportunity, and it is like, I do think it's really important. I think like great internet collapse of 1986. Except the ones you dropped for congestion. But I mean, microprocessors are, you know, 12 megahertz, 16 megahertz, 30 megahertz, maybe 40 megahertz during this time, but unlikely, right? I mean, the, everything is just so scaled down. You know, RAM sizes are, you know, you're talking to a, you know, a workstation in 1986. Tom has what, probably four megabytes of RAM, maybe? Not even that? I mean- I mean, that was a Sun, Sun 3 sweet spot was I think four megabytes. So that's about that time. Right, so you've got a 16 megahertz-ish microprocessor, four megabytes-ish. And then what is the actual network speed? That has got to be one megabit? Or where are we here on networking speeds? I don't have a good intuition for that. Yeah, if you were really rich, you could afford a T1 line and one and a half megabits. And so when you were, so on that Sun 360, what was the speed on that thing? Was it- Well, it had ethernet on board at 10 megabits. At 10 megabit, okay. One of my favorite features, which I was responsible for, is you could directly drive synchronous serial protocols out of the serial ports and go up to 56 kilobits. Oh, wow, that's pretty great. We could run X25 and SNA and all these wacko things that existed back then. That's wild. But so, I mean, but Tom, your point that like, these are really important optimizations to avoid sending packets that you don't need to send. And if I can avoid sending a packet and avoid dropping a packet, if I can just hold onto this for just a little bit of time and introduce a little latency bubble perhaps, this can be a big win. And I think either of these things in isolation would be a win, together they are deadly. Because you've got, you are on one end of a connection, you are saying, well, I've got an ACK outstanding, and I'm going to wait till I hear back before I send the small packet. And on the other end, you've got like, well, you know what, I'm not going to send this ACK yet. I'm going to wait to see if I get anything else. And it's like, yeah, you're not going to get anything else. Like, this is like, they're waiting for you. And you're waiting for them. And now it's going to be, and in our case, that 100 millisecond band was the delayed ACK retransmit time. That's when like, we were, oh, it's like, oh, wait a minute, I haven't heard back on this thing. So I guess I'm going to retransmit the ACK and then read that retransmission would kind of unnaggle you and you would send this thing that had been delayed and now you have 100 mil. And the other problem is like, that absolute time is just like outsized given the speed of everything now, speed of networks, speed of CPUs, amount of DRAM. It's just like, super- I was reading the Stevens book published in 96 or something and it's got the same constants that we see in your data, Brian. So to your point, that those constants have endured 30 years and longer is kind of crazy. It is definitely crazy. The minimum TCP timeout is still 200 milliseconds, which makes no sense if you're in a data center context. Right? That makes no sense. But the problem is people think of these as TCP attributes when they should be variables that are determined, variables that come from the routing table. So you should be able to annotate your routing table and say, hey, I know this network is local. Let's turn down all these timeout values. Yeah, interesting. And is there like an RFC for that, Tom? Or was that an idea that had traction at one point? Or are we, is everyone just going to give it up? No, I just made that shit up. It was, yeah, exactly. Adam and I are ready to sign up. We're like, we want to buy, too. But, and I think that the, so the other, then you get into like a bunch of different aspects of this. When this, and I, this is where I'm really curious. Now, Raghi, you're on the stage and I saw Eliza out there. I know Eliza's debugged this before. I would love to hear from other people that have debugged this. And how did you debug this? Because I think that the, I know how I debugged it and it was with a whole lot of Dtrace. I mean, it got to the point where I actually like, I mean, Adam, I'm not sure how many times, I actually like counted up the number of times I'd used Dtrace on Friday when I actually debugged all this. And it's like, I'd used Dtrace like 275 times, span of even, it's like. I changed like the opposing story, if you want, which is like debugging, actually having Noggle turned off and you kind of wanted it on, which was super weird, right? So it was like mid 2012, I just got to Google, we just sold Wildfire to Google, and I'm like drinking from the fire hose, taking apart all the internal libraries and trying to figure out like, what are we going to use? And we'd been purchased into ads. We were a social media marketing company. And so I'm pulled out at one point and they're like, hey, we've got this like ads technology summit. You might want to go and just like see what else is going on. So I go there and there's some folks talking about their first event system, because most of Google's stuff for many years before that was all like ETL and sort of big batch stuff. And they're kind of moving into the event space. And so these folks were talking about how they'd sort of put this system together and it was the usual sort of big company over-engineered madness going on. But they were talking about numbers towards the end and they're sort of trying to advertise the system in like N million events per core per day, blah, blah, blah. And I was kind of like, well, I was playing with this stuff and I did that many events on my workstation with my prototyper, you know, in the hour before I got here, what is going on? But I had happened to have been walking through like the stubby code and like the various like, you know, event IO libraries and so on and so forth. That were in the prod code base and had noticed, you know, standing out from prior experience, like, oh, they're turning NARGL off for everyone unconditionally all the time, which completely makes sense if like everything you do is stubby and web, right? But these folks are now doing evented stuff. And so I came back afterwards and I was like, huh, I wonder, and I went and looked in their library and they've got no buffering on their sockets and they're just doing tiny writes all the time. It turns out they're stuck in the routing table lock, right, because they're constantly spamming packets to the network when they didn't actually mean to because they made their own custom framing and blah, blah, blah. So it still comes up, you know, and it like, sure, it's kind of a mistake. It's like, you decided to go and write your own framing in your own C++ library. And you were just like, I didn't put a buffer in front of it. I'm just going to do raw writes and save myself memory. But you didn't in this case. And so the simple fix there is like, okay, turn Nagl on and then you're, you know, that part of the problem goes away. But that fits the universe where all you're doing is a stream of events and doesn't fit as, as someone was saying earlier, it doesn't fit this universe where you're doing stubby, you're doing RPC, or you actually want the back and forward. But yeah, that was like a standout for me because there's been only a couple of events in my career where it went that way around. Normally it's always the other way around. It's like, oh, I just built another reactor library or I'm starting to use a new IO library or whatever. And the IO library hasn't yet learned to turn it off. And so the first thing you end up going looking for is, oh, it seems to be slow for RPC. And that's the problem. Yeah, that is really interesting. And in just in terms of like, so the answer there, the right answer presumably is not turning because Nagl is kind of papering over. It sounds to me like a broader issue of like there should actually be buffering. I would assume that buffering is the answer there. Yeah, yeah. I mean, it depends what system you're on, right? If you're significantly memory constrained, maybe you want to let the kernel deal with it because it's already got the buffers stuck around or maybe you can push it all the way down to the NIC or something, but yeah. Any high level system, any normal world is totally, yeah. Do it in user space, decide when you want to send, you know, all of that kind of stuff. Yeah, interesting. And then, so it sounds like you just debugged that one by inspection, is that right? Well, it was pure luck. I had like, literally I'd been like drinking from the fire hose and I'd happened to have read all of those libraries right then and there. And then they were describing this thing and I was like, I wonder, I'm going to go have a look. And sure enough, it was just like, here's a behavior and you can go and run it on your workstation and get a different behavior from when you go and run it in production. Yeah, that's really interesting. And also, I mean, I kind of say like, I mean, really lucky. I mean, it was really lucky. Yeah, for sure, yeah. Because, you know, the other time that I've had this problem I, a bunch of us were debugging this and it was showing up as like Cassandra latency. And I didn't actually debug it. It was a colleague, I mean, I was debug, I was like, not for lack of trying, but I was starting at the bottom of the stack and could, I mean, I was finding all sorts of things that were basically dead ends. And I actually, Adam, you know, the state map work that I did, I did that to debug this problem, this Cassandra problem. And which it was like somewhat disappointing because I did not actually, I just could not understand. Because it is so hard to understand when you have, you know, it's kind of like, you have like the toddler that won't put on their shoes for a hundred milliseconds and then they put on their shoes. It's very hard to debug when you have this, someone is refusing to allow work to progress for what is actually a pretty short time in human time and a very long time in computer time. It is very hard to see, I found. And it was another colleague of mine, Elijah Jopatnik, who out of all of our shared frustration in this is like, I'm actually just going to go check this configuration file against the configuration file that's comparing joint to AWS. And they were like, you know, we don't see this on AWS. We didn't see this on you. And ultimately like just took this configuration file like line by line, took it apart and found this very important difference around TCP, no delay. But that was, it was just kind of, Raghi, it was kind of more like your situation of like just getting lucky and kind of finding it. But really hard to do, I found from first principles. You know, Adam, as we were kind of contemplating this, a great thing to go do on Twitter is search for TCP no delay. Did you do this? No. Oh, it's so great. It is such a, so there are the tweets because the tweets are all, you know, who randomly tweets about TCP no delay other than the people who've been just absolutely. It's like a mixture of anger and euphoria. It is. It's like one or two people in every group from every programming language ever that starts a new IP stack or a new network reactor library or whatever it is. It's like every couple of people in those groups. It's amazing. It is. And it's like, it doesn't have the frequency to be tweeted. I mean, it's like, I don't think, I mean, Lord help us if TCP no delay is ever trending on social media, right? I mean, this is like not something that you are actually going to see. It doesn't happen that frequently. And so there is, and Eliza had a great tweet. I'm going to go find it where it's like, I can TCP no delay to the equivalent of forgetting to pull the parking brake, which definitely feels that way. I'll drop that one in. But I think, so I love the fact that actually as I was looking at this, we've got a couple of these folks here who have run into this. So Dan, you're here, I think. And you wrote this tweet in 2019. I love the fact that I put out on Mastodon that I'd hit this and you were one of the first ones to like it on Mastodon. I'm like, oh my gosh, I'm just going to reach out to Dan and ask him about this. So could you take us behind this tweet? Because this tweet feels painful, just reading it. Yeah, no, this is actually a long, long story. It wasn't even anything in particular, but nowadays I'm a researcher at Microsoft Research. Before that I was a professor and I ran a research group focusing on distributed systems and low latency. And the Nagel algorithm had become a meme in our group that it had just come up so many times that finally I just wrote on the wall, it's always the Nagel algorithm because we had to check that every single time. I don't remember the first time I ran into this, but I do remember one very memorable one, which was we were just starting a project to look at tail latency in distributed systems back in 2012 or so. And we just started running some simple systems, you know, null RPC, memcached, very basic NGINX configuration and trying to look at the latencies of them. And we started trying to, just trying to understand them, right? That if we have some idea of how fast these systems should be and queuing theory can tell us what the distribution should look like and we can simulate it. And then what we wind up with in practice is totally different. And one of the really weird things that the students I was working with, who've since gone on to graduate and do great things, noticed was that it really depended on where in the connection you were, because, you know, the first couple of requests would get delayed and nobody could figure out why. And we didn't even have any cool visualization tools at that point. I remember we were literally looking at pieces of paper with tables of latencies. And I looked at it and said, oh, did you turn off the Nagel algorithm? Because I had run into that before. And that's, by the way, a great tip, which is that if somebody ever presents to you a table of latencies on paper, you can say, oh, did you try turning off the Nagel algorithm? And they'll really be impressed. Did you look thoughtfully at the numbers first before you- Absolutely. That's right. Oh, no, let me just do some calculations in my head. Okay, okay. Now I've got a question for you. I've got one question for you. That's pretty great. And indeed it was, in this case, or it sounds like it would, turning off Nagel. Well, that was one of many things. We found many others later. I wanted to mention something else, going back to the historical perspective, because as somebody who half-heartedly follows congestion control research these days, it's kind of wild to me that people were thinking about congestion on the internet and what they were thinking about was not, how do we fairly allocate resources? How do we make sure that we get the right allocation, that we control the rates at which people are sending? It's just a one-off thing. Hey, some of these things are sending too many packets. Let's do an optimization to make them send fewer packets by waiting or by delaying the acts that all of the other serious congestion control stuff came later and at the time Nagel was doing this, there was nothing to stop you from monopolizing the backbone link. Right, that this is all kind of like cooperative congestion control effectively, that there's nothing happening at the core to actually prevent congestion. Is that right? Yeah, I mean, there's nothing happening at the core. There's nothing really intentional even happening at the endpoints either, right? It's just try to send less. Right, choose something different. Yeah, and well, it shows that it's hard to kind of reason about, certainly in those early days, hard to reason about that larger system. And everyone is, you're only seeing kind of what's going on at the edge and you've got to kind of react. accordingly, or try to react in the best interest of the network. So, from your perspective today, I mean, haven't we outlived this, having this as a default? I mean, surely this should not be the default. Surely one of these things should not be the default. Or should we just, is this something where this is like medical residents working 36-hour shifts? This is just something that we believe that everyone should have to suffer through as part of their character building to be a software engineer. I feel like having a default here is probably sensible, but we should set the time down to something really small. Like, if you do have some naive, dumb software that is doing, you know, individual byte writes or, you know, put Cs to your network socket, then, sure, set it to a millisecond. It will still go slow, but it's not the, like, fatal thing. The only bad thing for doing that is that it's going to make it harder to spot. So, I don't know. Yes, I was just going to say, if it were a millisecond, I would not have spotted this. I don't think. Yeah, I wouldn't want to be the guy debugging the new problems when the default changes. Right. Well, that's happened, right? I saw one of those Hacker News posts, maybe the one that Nagel commented on, was about Go not having it on by default. Yes. And then somebody finding out that, in fact, doing one byte writes is not going so well for them. Yeah. And you authored the parking brake tweet. What's been your experience? Yeah. So, I do kind of have perspective on this specific question of, like, you know, what should be on by default, which is that, you know, I was listening to, like, Raggy's answer, and I believe you said something sort of offhand about, like, oh, people are, like, authoring one of the, you know, these, like, new IO Reactor libraries. And I have the dubious honor of having been a maintainer of, not the primary maintainer of Tokyo, but a contributor. And we get a lot of GitHub issues that basically look like, you know, why is my Tokyo app so slow? Well, you know, a lot of the time the answer is, like, did you take the parking brake off? Interesting. Which is where that tweet came from. The tweet was sort of a reaction to this, like, you know, we just got to have this, like, checklist of when somebody's, like, well, I'm having these performance questions. Obviously, the first one is sort of like, well, did you compile your Rust program in debugger release mode? Okay. You flip the little switch on the checklist. Okay, light turns on. Great. Did you remember to turn off Nagel's algorithm? Well, can I just ask what else is on the checklist so I can go check that right now? I can do it rightly. You know, those are two of the biggest ones that I can think of on buffered IO in general. It's just also sort of a big one that it actually comes up a lot. And this is, I think, this plays into this sort of, like, question of defaults. Is that, like, in Rust, the, like, standard library IO primitives are all unbuffered unless you explicitly say, I want them to be buffered. And the reason that, like, so Tokyo also, like, defaults to not disabling Nagel's algorithm when you make a TCP socket. And the reason that Tokyo does that is because it's what the Rust standard library does. And whether that's a good decision or not, I think we can, like, kind of debate. But there was, like, this very important sort of, like, well, the Tokyo socket should behave the same as the Rust standard library socket, except that it's going to set, like, oh, non-block because it needs to do that because you're going to use it with the, like, IO reactor. So it needs to be non-blocking. But besides that, it really, like, we don't want it to set any different socket options from the socket options the Rust standard library sets. And we want the user to, you know, essentially be able to interchange them, except that the Tokyo one, you have to put the await word after every time you want to do a read or write on that socket. I think, I mean, broadly, that's a very good decision. I mean, it would be, it would certainly violate the principle of least surprise if, like, Tokyo was like, no, look, we've got a bunch of issues, so we set all of these things on your socket to make it behave differently. But the downside is that now you have to respond to each of these GitHub issues and be like, you know, well, did you take the parking brake off? And I think that, like, you know, the other thing that you could do is the go thing of like, well, we're just going to change the default from the default that everyone has had as the default since John Nagel actually wrote the algorithm. And then you get the news comment from John Nagel. Right. Yeah, I mean, every time you want to park your car. Right. Every DynLang version of these, like, several Reactor libraries in Ruby over the years, like, we disabled these, and I think Twisted disables it by default. Like, I think all the DynLang Reactor libraries end up turning it off by default. I imagine it's turned off in Go by default because they were, like, doing prototyping inside of Google Prod, and they just, like, matched what the prod behavior was, was probably, like, really genuinely the primary reason. But yeah, I mean, like, in terms of being surprising behavior or not, honestly, I would come to a Reactor library and be unsurprised in either direction. Like, you know, it's just one of those, like, check it off the list, as you say. It's, like, a thing that you start looking for when stuff doesn't behave the way you expect. Yeah. The kind of funny story is that the specific tweet that Brian mentioned, the parking brake tweet, came out of a very, to me, very funny GitHub issue, which was actually on a Tokyo demo app. There was our, like, demo app that we have. It's called MiniRedis. And it's, like, Redis, except it isn't very good. And, you know, it's, like, intentionally not very good because it's supposed to walk you through, like, here's how you use the async runtime, here's how you use the synchronization primitives. And it's for, like, having a bunch of comments in it that tell you how it works and also, like, being used in some of our tutorials. And so it's, like, very specifically, it implements all of Redis except for, like, Redis pipelining. So it has no connection reuse, right? Because the pipelining is kind of, or it has very limited connection reuse. And the pipelining is kind of the thing that, you know, is the draw through, you know, the... You've maybe seen the image that's, like, here's how you draw an owl, and it's, like, draw three circles. And then step two is, like, draw the rest of the owl. The pipelining is kind of the, like, rest of the owl of Redis. And it's, like, very intentionally we did not implement this in the demo app. So there was this, like, somebody opened an issue and was, like, why is this so much slower than Redis? It's written in Rust. Rust is supposed to be fast. Well, it's a demo. You know, like, we intentionally did not draw the rest of Redis. And so the comments from all of the maintainers, well, were we, you know, we don't implement pipelining. So if you do, like, one Redis command, then you wait for that command to come back and you can't send any more. And so that's sort of, like, well, it's not supposed to be a Redis replacement. It's supposed to be a demo, you know? And the user just, like, keeps asking all of these questions and is, like, I'm running all of these benchmarks. And it's, like, well, why are you doing that, for one thing? But then somebody replies, and I think this is a third person who is neither the, like, original question asker or one of the Tokyo maintainers who are, like, trying to explain to this person that this is, like, you know, intended purely for educational purposes and we specifically did not do the complicated thing that actually makes it suitable for production use. And this third person shows up and is, like, well, so I turned off Nagel's algorithm and it's actually almost as fast as Redis. That's crazy. Wow. But I think that this is actually a case of, like, benchmarks lie, right? Because it was faster or he's, like, almost as fast as Redis because he was doing this benchmark entirely on his local machine. Totally. Yeah, he's pipelining in his effort, yeah. He's pipelining in the Linux kernel, right? Because he's just churning connections on localhost. And so now it's, like, as fast as Redis in this benchmark. But you only get that when you take the parking brake off. Anyway, that's the end of the story. And I have to say this, and actually it should be said that, like, relatively early on in debugging this, I mean, again, this is only, like, once I had this, these outliers reproducible, getting it all the way to bugs, it was a day, just a long day. And relatively early on, Adam, I don't know if you saw, but our colleague, Robert Moustaki, is like, have you checked NaGLs? And I'm like, you know, this could be something like NaGLs, but I just continue to debug it on first principles. And in part because, like, I actually, I have found the kind of folk wisdom around performance debugging to be so frequently wrong and the data to be... Just, Dan, kind of your earlier point of, like, we had this kind of theoretical construction of the network and the data that we saw out of it was so wildly different. And so I think I have probably, like, overreacted, at least on some of these things. And I'm like, I really need to get... NaGLs is so brutal to debug that I really need to check. I actually do need to actually go and check that earlier as opposed to insisting on getting the data to prove beyond a shadow of a doubt that it is NaGLs. I definitely sympathize with that internal fight of trying not to just take the esoterra that I've learned in the past. This whole thing made me realize that I went and looked. And so SS in Linux is actually fantastic. If you turn all of the option logging on, you can go and see a lot. But I just realized, because I just went and looked for it, it doesn't have NaGL in the list of options that it interprets and prints out, which is mind-blowing. It's got all the other congestion control stuff in there, but it doesn't have NaGL in there, which is just crazy. It is crazy. And Ryan dropped this into the chat earlier, but I did feel that one of the things that... I know I talked about this with Robert as well on Friday. It's like, we do not bump a counter when this happens. There's no MIB when you've had this. We have MIBs on things like drops, right? And you've got somewhat... We've got a standardized way of looking. And we kind of know that if I'm looking at a networking problem, I do want to make sure that there are no drops. But boy, you really want to treat this like a drop. I mean, it's not... You really want to have a glaring red alarm when you've actually done this. So we definitely need... We've got some improvements to the system for sure to make this much more debuggable when and where it happens, because it is just absolutely brutal. And I'm curious if other people have debugged it from first principles. And if so, what did you use? Just because it is hard to debug. It is really, really hard to debug because it is so transient. And it doesn't happen in every packet too. I mean, you actually kind of need to have... I mean, even for us, it doesn't happen on every workload. Because if you have a workload in which it's kind of naturally synchronizing around a flush, that is to say there's no other activity going on when it does a flush, that flush will happen promptly because the other side doesn't have an act that's pending. I mean, I kind of had the thought that maybe somebody should just open a PR to Tokyo that changes the format debug implementation for TCP streams so that when you print it, maybe just if you use the alt mode, the multiline format, maybe not, I don't know, it should just say there should be a bool in there that's like, did you call set no delay on this? Well, yeah, actually, I like that idea. And I think it also is like, somehow I feel if we didn't call it TCP no delay, but instead called it TCP delay and set it to... I mean, somehow if you saw TCP delay set to true, you'd be like, wait a minute, what is that? Yeah, that's the button that makes the computer slow. Right, exactly. That's right. It really is. It's like a turbo button thing where the turbo button actually makes the computer go slower. You said SS, what is that? Is that a program that dumps out? Yeah, it's part of IP route too. It's like socket statistics. But yeah, it's got like info flags and extended socket options flags, which dumps most of the stuff you want to know, just weirdly not this particular flag, which is wild. But yeah, we use it all the time for ACN and everything else. And you can see sockets in exponential back on. So talking of timers that have not been reset or not been reconsidered for a very long time, TCP back off is still over an hour. If you disconnect one end of a TCP socket and you don't have a healthy router or you've got overly firewalled routers in the middle, it's going to sit there and keep trying for over an hour. I think the close wait timeout is also just like kind of ridiculously long. I don't remember what it is though. Yeah, speaking of people burning themselves, that's like 20 seconds or 40 seconds, something like that. Is it long enough that web servers get burned by it? Yeah, it's long enough that if you like try and start a program that terminated very abruptly and you try to restart it again and tries to bind the same socket, then that program also crashes. And it really should not be long enough that if I like type the command again, I can not open my socket again. Yeah, but then by the time you go to debug it, it works. Do you remember the AK test issue, Adam? No, this is the test framework we had for the ZFS storage appliance. And our colleague then and now, Dave Pacheco, debugging the connection refused that we would see occasionally when you run the test suite, it's like every once in a while you just start seeing some connection refused. I'm like, what is that? But then it would go away. So you had connections in time to wait. So Brian, a question for you on debugging this, because I was thinking like wouldn't it be cool if we had a KStat or a Dtrance probe or a MIB or anything to scream for help when this was happening. Would you have heard that scream? Did you check any of these places? Would you have seen something that was obviously going bananas? So here's what I would do. So here would be my proposal, would be adding a kernel statistic and putting drop in the name. I may be overfitting for myself here, but I did look for drops. And I was... All right, this is only existing on the network. We built our own network. We built our own switch. We built our own wild with things that it could possibly be. And eliminating dropped packets as a source is really important for us to do early. And we haven't had issues with drop packets. So I did look for drop packets. You almost want to call this like a Nagel recent drop or something, which is a total misnomer. But you know what I mean? As a way of indicating. I named something that is scary in some way. You can call it drop, not actually dropped, but delayed. Exactly. JK drop, right. Did you see what Ian dropped in the chat, by the way? A Lionel Hutz rendition of TCP. Anyway, TCP? No. Delay. So I've been trying to think what this looks like in perf a lot on Linux these days. The flame graph output and what have you is kind of useful. But having spent enough time on Fuchsia where we had whole system traces that weren't quite precise traces, but they were close enough and you get the linear Chrome timeline kind of view on things rather than the overlay summary that is a flame graph. And that was really useful, particularly in early system builds for just like what actually just happened. You can do it in text, obviously, as well, but it's also kind of useful at these days scale, just doing the whole thing in a UI. And I find I really want a good one of these for Linux. And so far, I have not come anywhere close to getting something that is actually decent. But you could see Noggle there. And I know what that stack would look like. But trying to pick that out of a flame graph would be really hard. You are for sure not going to pick it out of a flame graph. I do think that you need to kind of visualize every packet in terms of its latency. And you need to be able to see those outliers. Because what you are 100% not going to see is the actual code path that does this. Because it's quick. It's very fast. I mean, you're just not... It's going to be hard to catch. And I think this is where you want to be able to instrument the entire system and know that you've done it in such a way that I've got all of the data here from the system. So now I can actually go reason about all of it. I also do feel like maybe we should be assigning timeouts the way we assign AS numbers or whatever. You know what I mean? We should assign timeouts. Everyone gets a unique timeout value that must be relatively prime. Maybe a prime number of timeouts. And then there's some GNU plot feature that lists them all, like gravitational constants or whatever, so that you can see if you're some multiple of some known esoteric prime integer. Yeah, that's exactly right. Now you have to deal with depletion of the ICANN strategic prime numbers reserved for timeouts. We're out of timeouts. I'm sorry. I think that would be a great thing. You can go buy someone else's timeout. Maybe there's some dead protocol and you can go take them over or something. Sorry, we're out of timeouts. The only timeout we've got left is 37 minutes. You can take it or leave it. Or 37 microseconds. I have 37 microseconds if you want that one. Add a little color to it and then you get another round. Eventually you just run out of senses to add to the thing. That's right. The whole visualization thing, it still feels like a big thing to me. You were talking about this earlier on. Just being able to see everything that's going on and having lights and stuff. I love going to the Computer History Museum and just seeing all the old mainframe boxes and they're just covered in lights. I know the kind of intuition you build up for a system seeing something like that. You walk into a place and you're like, I've seen interrupt rates like that before. That's broken. We just don't have that anymore because we don't have that kind of spacing and there's too much stuff going on too fast that it's kind of hard to see. But even in that world where there's a lot of stuff that's too hard to see, I think there is actually still a universe where even just strobing patterns and so on, we're actually pretty good at, but we just don't expose them all that well. Totally. Can I ask a dumb question? Can I post an image in Discord? How do I do that? Do you want me to post your image? Yeah. Adam, could you act as my proxy on Earth? How did you do that? I'll show you later, Grandpa. Is that time to get me to bed? Yeah. Alright, fair enough. I guess that's not giving away. That's got to be earned. So this is the, and you're kind of pointing, this is just the visual of once we actually knew what this was and I had the kind of like the three machines that I needed to go because we're talking to this disk volume exists on three different machines in the rack and I've located the actual sockets on these three machines. I'm like, alright, now I'm going to go whack the actual value in the kernel. Do not do this at home, kids. Little MD minus KW action. Hold on, hold on, hold on. You're like, 40 milliseconds, what about 0 milliseconds? That was your plan? My plan is, no, my plan, yeah, because the Nagel limit is expressed as a quantity of bytes. Oh, gotcha. What constitutes what they call a runt packet? And how about a runt packet is one byte, which is basically. That's fine. And so, and then did that on all three of these machines. And then the graphic that this young whippersnapper here was able to drop in Discord that I was unable to do for myself because I don't know how to live in modern society, shows the actual latency and you can see that super clear 100 millisecond banding. And then also you can see why it was hard to debug because there's a lot that are finishing in less than 100 milliseconds and then just all those go away. I mean, the aggregate latency, interestingly, the mode latency for sure went up because we started doing a lot more work because we were uncorked. This is where I do think looking at the average is deceptive or the mean is deceptive, looking at the mode is deceptive. I mean, you really do need to visualize the entire distribution because what you're seeing there is not going to be something that a number is going to really convey. And indeed, the numbers that you might get out of it would be very misleading. Yeah, for sure. This is my pet peeve with operational monitoring for higher level systems at the moment. Stuff getting fed through Prometheus into Grafana is just full of lies all the time. It drives me nuts. But seeing the graph reminded me of something, which is a positive thing out of the higher level universe at the moment. We've been using a product called Honeycomb, and Honeycomb has this amazing feature in it where you can go into a dataset, and they call the feature bubble up, and you select over a range in the dataset and you say, tell me things which are unusual about this dataset compared to the global average. And they will just surface their 10 or 20 different metrics, and you can instrument tons of stuff. This is all open tracing style stuff, so it's all high level traces, but they do this data analysis over all your data for you. And so you can just grab a range, tell me what's weird about this range, and it will bubble stuff up. And that feature is a feature I'm very willing to pay a lot for that product for. Yeah, that is really interesting. I mean, I know Honeycomb has a lot of really interesting data visualizations. Let me just get Charity on here to talk about some of the stuff they've done. For folks who didn't see in the chat, they're asking if a violin plot would do better. That is a reference to Angela Collier. Have you watched any of her videos, Adam? I don't get the reference at all, no. Oh my god, I've got to plug her. She's an astrophysicist by training, PhD in astrophysics. She just goes uncorked on these various rants, and she's got a rant about violin plots describing that violin plots should actually not exist. It's really great. I'm going to drop that into the chat, and if I'm giving you the gift of Angela Collier, you're going to really appreciate it. She's really extraordinary. Wriking, excellent use. Excellent crossing of the streams in there. Fantastic. Well, it's been good. It's been very therapeutic, I think, for me. Good, I know you needed this. I did need this. As we know, I can see you looking at your watch saying, well, I can see my time is up. Handing me, beginning to try to take back the box of Kleenex from me. Maybe resisting a little bit, wanting to hold on a little bit longer. This is a great service, too. I know that I agree with everything that's been said about the oral tradition of debugging being misleading. One person saw it one way, so let's just try to prescribe aspirin and see if it clears up. We just made that, just as a quick aside, the ultra of that is the JVM garbage collection algorithms. Yes. Truly handed down, father to son, mother to daughter, over the generations. I feel like, because I'm trying to figure out why I have such an allergic reaction to that, and that is the one that is just like, if you've done anything with the JVM, I feel you've heard like, oh, what GC algorithm are you? Use a different one. The one you're using is like, it's the, yeah, I'm sorry, Eliza. There's some people who are like, I actually, sorry, this is going to be like, we need a new theater precession now on JVM GC. There's like a bash script that's like, you know, I want to run a Java program bash script, and it's kind of like, the 10 lines of like, xx no whatever, xx mark sweep, xx concurrent whatever, GC this much meta size, so on and so forth, that if you want to invoke like a binary, you kind of have to like, use this bash script of like, make the JVM be normal. Exactly, it is, if it does it feels like a book of spells that's been handed down, so sorry. I feel like JVM flags need a content warning. I am really sorry about that. But Adam, you've endured that as much as anybody. Oh yeah, for sure, but it was sort of like magic that was like, handed down, like they, you know, smuggled out of Twitter like, you know, wrapped in newspaper print you know, and then unveiled outside of the building. I just have the pulp, I've got Christopher Walken from Pulp Fiction. This uncomfortable GC flags carried it through the prison camp, exactly. In a former life, I was at VMware, and one day I looked around and realized that everybody I worked with used to work at Sun, and they used to work on garbage collectors, and they used to work on different garbage collectors. Oh god. I never thought of pitting them against each other to get their secret sets of JVM flags, but they all would have had totally different ones. So not only would they have had totally different ones, though they may well be on different sides of one of the great Civil Wars. I feel like, Adam, wouldn't you read a book on technology's Civil Wars? I feel I would. Absolutely. Or a Ken Burns 14-parter on my dearest pals. Oh my god, Ken Burns, Organizational Civil War. God, I love it. They may have been on Hotspot vs. Exact, which was a very hot Civil War inside of Sun between Labs and Sunsoft, and it left that one burns hot enough that you can mention it to belligerents today and they will still tell you that everyone else was full of it. Sorry, Adam, all these are... You're trying to bring us home, and I keep... Yes, I've seen our time is up. That's right, I mentioned it again. You get all these shibboleths that we resist because of these stories, like the JVM flags, the GC flags, and so on. But shibboleths useful as for your toolbox, not to just blithely misapply, but knowing that, hey, if you've got some bizarre outliers, there are some things to explore. And you probably do want to check for TCP no delay. You do want to check for NaGL sooner rather than later. It probably is worth... I admire your desire. One's desire to debug the first principles is great, but also I would say once you believe it might be NaGL, it's very easy to demonstrate, or relatively easier to demonstrate. So that's another reason to investigate that one early. Eliza, if you expand your Tokyo list of things to check, please, I want to go check because I feel that there are other things like this that are lurking. You definitely want to have those at the ready. And you can make a good argument, like, hey, this should not be the default. Raghi, I think you made a very interesting argument at the time about being different. And I think we should either lower it or change it to be a prime value. I... Die on that hill. Agreed. I had one other idea in this which could probably be done quite easily, which is we can make a Wireshark warning filter for it fairly easily. That's a good idea. I like the Wireshark warning. I think that's a really good idea where you can see that niggling is happening. I like, Eliza, your idea of printing out TCP no delay really in the pretty formatting of a debug on a socket. And Ryan in the chat had good ideas about adding a K-stat, adding an SCT probe. I think there are things we can do to make this more visible. I think we are not ultimately going to make this problem go away, and I probably have not debugged this for the last time in my life unfortunately, but I'd like to believe that the next time will be a little less painful. And this is great to have everyone... Man, I'm telling you, TCP no delay. Search for that on social media. It's the tribe. You just identify the tribe immediately. Alright. Thanks, everybody. Take care. See you next time. "
  }
 }
}